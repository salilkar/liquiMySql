--liquibase formatted sql
--changeset salil:initialSPsandFunctions runOnChange:true endDelimiter:#

-- MySQL dump 10.13  Distrib 5.7.9, for Win64 (x86_64)
--
-- Host: risionsingaporetest.cykdfzyiuw9n.ap-southeast-1.rds.amazonaws.com    Database: risionSingapore
-- ------------------------------------------------------
-- Server version	5.6.22-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */
/*!40101 SET NAMES utf8 */
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */
/*!40103 SET TIME_ZONE='+00:00' */
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */

--
-- Dumping routines for database 'risionSingapore'
--
/*!50003 DROP FUNCTION IF EXISTS `CheckBeaconForShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `CheckBeaconForShift`(
shift_offerId BIGINT(20)
) RETURNS bit(1)
BEGIN
DECLARE beaconExists bit(1)
set beaconExists=0
if exists(
		select b.beaconId from candidateShiftOffer so 
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId
		inner join beacon b on b.businessId=bs.businessId and b.isDeleted=0
		inner join beaconBusinessSite bbs on bbs.beaconId=b.beaconId and so.businessSiteId=coalesce(bbs.businessSiteId,so.businessSiteId)
		inner join beaconDepartment bbd on bbd.beaconId=b.beaconId and so.departmentId=coalesce(bbd.departmentId,so.departmentId)
		inner join beaconSubClassification bsc on bsc.beaconId=b.beaconId and so.subClassificationId=coalesce(bsc.subClassificationId,so.subClassificationId)
		where so.shiftOfferId=shift_offerId limit 1) then
        set beaconExists=1
else 
		set beaconExists=0
end if
RETURN beaconExists
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `CheckCandidateAvailability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `CheckCandidateAvailability`(candidate_Id BIGINT(20), shift_offerId BIGINT(20), shift_StartDateTime datetime, shift_EndDateTime datetime) RETURNS bit(1)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Check if candidate has any shifts or declared unvailable for the given start and end time  
*/
    DECLARE isAvailable BIT
    DECLARE iCount INT
    
    SET isAvailable=1
    
    SELECT COUNT(candidateId) INTO iCount FROM (
    SELECT candidateId
    FROM candidateShiftOffer
    WHERE shiftOfferId<>shift_offerId AND candidateId=candidate_Id AND shiftEndDateTime>shift_StartDateTime AND shiftStartDateTime<shift_EndDateTime AND STATUS NOT IN (3,10,19,33,36) AND isDeleted=0 -- and status<>1
    UNION
    SELECT cg.candidateId
    FROM candidateGiveAwayRequests cg
    INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
    WHERE cg.shiftOfferId<>shift_offerId AND cg.candidateId=candidate_Id AND so.shiftEndDateTime>shift_StartDateTime AND so.shiftStartDateTime<shift_EndDateTime AND so.status NOT IN (3,10,19,33,36) AND cg.status NOT IN (3,6,12,42,41,18,39,21,47) AND so.isDeleted=0
    ) AS t1
    
    IF iCount>0 THEN 
	SET isAvailable=0
    ELSE
	SELECT COUNT(candidateId) INTO iCount 
	FROM candidateUnavailability
	WHERE candidateId=candidate_Id AND CONCAT(unavailableDate,' ',endTime)>shift_StartDateTime AND CONCAT(unavailableDate,' ',startTime)<shift_EndDateTime AND isDeleted=0
	
	IF iCount>0 THEN 
		SET isAvailable=0
	END IF
    END IF
    
    RETURN isAvailable
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `CheckCandidateOverTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `CheckCandidateOverTime`(employment_Type varchar(100),total_Hours float,businessSite_Id BIGINT(20),department_Id BIGINT(20),use_OvertimeIndicator bit(1)) RETURNS bigint(20)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Check weekly total hours against configured setting hours of each employment type for overtime 
*/
    DECLARE isOvertime BIGINT(20)
    
    DECLARE fullTime_OTLimit INT
    DECLARE partTime_OTLimit INT
    DECLARE casual_OTLimit INT
    
    SELECT fullTimeOTLimit,partTimeOTLimit,casualOTLimit
	INTO fullTime_OTLimit,partTime_OTLimit,casual_OTLimit
	FROM businessSettings
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
	
    IF use_OvertimeIndicator=0 THEN
	SET employment_Type=NULL
    END IF
	
    IF employment_Type IS NULL THEN
	SET isOvertime=0
    ELSEIF employment_Type='Full time' THEN
	IF total_Hours>fullTime_OTLimit THEN
		SET isOvertime=1
	ELSE
		SET isOvertime=0
	END IF
    ELSEIF employment_Type='Part time' THEN
	IF total_Hours>partTime_OTLimit THEN
		SET isOvertime=1
	ELSE
		SET isOvertime=0
	END IF
    ELSE
	IF total_Hours>casual_OTLimit THEN
		SET isOvertime=1
	ELSE
		SET isOvertime=0
	END IF
    END IF
    
    RETURN isOvertime
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `CheckCandidateRosterClash` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `CheckCandidateRosterClash`(
  candidate_Id BIGINT(20)
, shift_offerId BIGINT(20)
, shift_StartDateTime datetime
, shift_EndDateTime datetime
) RETURNS bit(1)
BEGIN

/*
 Author: James
 Date  : 30/03/2016
 Description : Check if candidate has any shifts  for the given start and end time  
*/
    DECLARE isRosterClash BIT
    DECLARE iCount INT
    
    SET isRosterClash=0

   SELECT COUNT(candidateId) INTO iCount FROM (
		SELECT candidateId
		FROM candidateShiftOffer
		WHERE shiftOfferId<>shift_offerId AND candidateId=candidate_Id AND shiftEndDateTime>shift_StartDateTime AND shiftStartDateTime<shift_EndDateTime 
        AND STATUS  IN (2,4,6,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48,49,60,61,62,63) AND isDeleted=0 -- and status<>1
    UNION
		SELECT cg.candidateId
		FROM candidateGiveAwayRequests cg
		INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
		WHERE cg.shiftOfferId<>shift_offerId AND cg.candidateId=candidate_Id AND so.shiftEndDateTime>shift_StartDateTime AND so.shiftStartDateTime<shift_EndDateTime 
		AND cg.status in (1,49,60,62,63) AND so.isDeleted=0
    ) AS t1
	IF iCount>0 THEN 
			SET isRosterClash=1
	END IF
RETURN isRosterClash
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `CheckCandidateUnavailability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `CheckCandidateUnavailability`(
  candidate_Id BIGINT(20)
, shift_offerId BIGINT(20)
, shift_StartDateTime datetime
, shift_EndDateTime datetime
) RETURNS bit(1)
BEGIN
/*
 Author: James
 Date  : 30/03/2016
 Description : Check if candidate has declared unvailable for the given start and end time  
*/
    DECLARE isUnavailable BIT
    DECLARE iCount INT
    
    SET isUnavailable=0

	SELECT COUNT(candidateId) INTO iCount 
	FROM candidateUnavailability
	WHERE candidateId=candidate_Id AND CONCAT(unavailableDate,' ',endTime)>shift_StartDateTime AND CONCAT(unavailableDate,' ',startTime)<shift_EndDateTime AND isDeleted=0
	
	IF iCount>0 THEN 
		SET isUnavailable=1
	END IF
RETURN isUnavailable
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetAgencyAncestry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetAgencyAncestry`(GivenID INT) RETURNS varchar(1024) CHARSET utf8
BEGIN
/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency Parent Ids - comma seperated 
*/

    DECLARE rv VARCHAR(1024)
    DECLARE cm CHAR(1)
    DECLARE ch INT

    SET rv = ''
    SET cm = ''
    SET ch = GivenID
    WHILE ch > 0 DO
        SELECT IFNULL(parentAgencySiteId,-1) INTO ch FROM
        (select case when exists (SELECT parentAgencySiteId FROM agencySite WHERE agencySiteId = ch  and isDeleted=0) then (SELECT parentAgencySiteId FROM agencySite WHERE agencySiteId = ch  and isDeleted=0) else -1 end as parentAgencySiteId) A
        IF ch > 0 THEN
            SET rv = CONCAT(rv,cm,ch)
            SET cm = ','
        END IF
    END WHILE
    RETURN rv
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetAgencyFamily` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetAgencyFamily`(GivenID INT) RETURNS varchar(1024) CHARSET utf8
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency Child Ids - comma seperated 
*/

    DECLARE rv,q,queue,queue_children NVARCHAR(1024)
    DECLARE queue_length,front_id,pos INT

    SET rv = ''
    SET queue = GivenID
    SET queue_length = 1

    WHILE queue_length > 0 DO
        SET front_id = FORMAT(queue,0)
        IF queue_length = 1 THEN
            SET queue = ''
        ELSE
            SET pos = LOCATE(',',queue) + 1
            SET q = SUBSTR(queue,pos)
            SET queue = q
        END IF
        SET queue_length = queue_length - 1

        SELECT IFNULL(qc,'') INTO queue_children
        FROM (SELECT GROUP_CONCAT(agencySiteId) qc
        FROM agencySite WHERE parentagencySiteId = front_id  and isDeleted=0) A

        IF LENGTH(queue_children) = 0 THEN
            IF LENGTH(queue) = 0 THEN
                SET queue_length = 0
            END IF
        ELSE
            IF LENGTH(rv) = 0 THEN
                SET rv = queue_children
            ELSE
                SET rv = CONCAT(rv,',',queue_children)
            END IF
            IF LENGTH(queue) = 0 THEN
                SET queue = queue_children
            ELSE
                SET queue = CONCAT(queue,',',queue_children)
            END IF
            SET queue_length = LENGTH(queue) - LENGTH(REPLACE(queue,',','')) + 1
        END IF
    END WHILE

    RETURN rv

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetBusinessAncestry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetBusinessAncestry`(GivenID INT) RETURNS varchar(1024) CHARSET utf8
BEGIN
/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Business Parent Ids - comma seperated 
*/

    DECLARE rv VARCHAR(1024)
    DECLARE cm CHAR(1)
    DECLARE ch INT

    SET rv = ''
    SET cm = ''
    SET ch = GivenID
    WHILE ch > 0 DO
        SELECT IFNULL(parentBusinessSiteId,-1) INTO ch FROM
        (select case when exists (SELECT parentBusinessSiteId FROM businessSite WHERE businessSiteId = ch  and isDeleted=0) then (SELECT parentBusinessSiteId FROM businessSite WHERE businessSiteId = ch  and isDeleted=0) else -1 end as parentBusinessSiteId) A
        
        IF ch > 0 THEN
            SET rv = CONCAT(rv,cm,ch)
            SET cm = ','
        END IF
    END WHILE
    RETURN rv
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetBusinessFamily` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetBusinessFamily`(GivenID INT) RETURNS varchar(1024) CHARSET utf8
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Business Child Ids - comma seperated 
*/

    DECLARE rv,q,queue,queue_children NVARCHAR(1024)
    DECLARE queue_length,front_id,pos INT

    SET rv = ''
    SET queue = GivenID
    SET queue_length = 1

    WHILE queue_length > 0 DO
        SET front_id = FORMAT(queue,0)
        IF queue_length = 1 THEN
            SET queue = ''
        ELSE
            SET pos = LOCATE(',',queue) + 1
            SET q = SUBSTR(queue,pos)
            SET queue = q
        END IF
        SET queue_length = queue_length - 1

        SELECT IFNULL(qc,'') INTO queue_children
        FROM (SELECT GROUP_CONCAT(businessSiteId) qc
        FROM businessSite WHERE parentBusinessSiteId = front_id and isDeleted=0) A

        IF LENGTH(queue_children) = 0 THEN
            IF LENGTH(queue) = 0 THEN
                SET queue_length = 0
            END IF
        ELSE
            IF LENGTH(rv) = 0 THEN
                SET rv = queue_children
            ELSE
                SET rv = CONCAT(rv,',',queue_children)
            END IF
            IF LENGTH(queue) = 0 THEN
                SET queue = queue_children
            ELSE
                SET queue = CONCAT(queue,',',queue_children)
            END IF
            SET queue_length = LENGTH(queue) - LENGTH(REPLACE(queue,',','')) + 1
        END IF
    END WHILE

    RETURN rv

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCandidateTotalAssignedHoursForWeek` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCandidateTotalAssignedHoursForWeek`(
candidate_Id bigint(20)
, week_StartDate date
, week_EndDate date
, business_SiteId bigint
) RETURNS float
BEGIN
/*
 Author: James
 Date  : 15/10/2015
 Description : Get candidate total hours for week
*/
    DECLARE iTotalHours FLOAT
    Declare business_Id bigint
    
	select distinct businessId into business_Id from businessSite   where businessSiteId=business_SiteId and isDeleted=0 

select sum(case when duration<0.00 then duration*-1 else duration end )  INTO iTotalHours from (
    SELECT timestampdiff(second,actualShiftStartDateTime,actualShiftEndDateTime)/3600 as duration 
    from (
		select candidateId,actualShiftEndDateTime,actualShiftStartDateTime 
		FROM candidateShiftOffer so
		inner join   businessSite bs on so.businessSiteId=bs.businessSiteId and bs.businessId=business_Id
		and so.isDeleted=0 and bs.isDeleted=0
		WHERE candidateId=candidate_Id and candidateId<>0  AND (date(shiftStartDateTime) >= date(week_StartDate)
		AND date(shiftStartDateTime) <= date(week_EndDate))
		AND STATUS IN (1,2,3,4,5,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48,60,61,62,63) 
    union all 
		select cg.candidateId,so.actualShiftEndDateTime,so.actualShiftStartDateTime 
		FROM candidateShiftOffer so 
		inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and cg.status in(1,48,49,39,11,60,61,62,63)
		inner join   businessSite bs on so.businessSiteId=bs.businessSiteId  and bs.businessId=business_Id
		and so.isDeleted=0 and bs.isDeleted=0
        left join candidateShiftOffer so1 on so1.shiftOfferId=so.shiftOfferId and so1.candidateId=so.candidateId and so1.candidateId=candidate_Id
        WHERE cg.candidateId=candidate_Id AND (date(so.shiftStartDateTime) >= date(week_StartDate)
		AND date(so.shiftStartDateTime) <= date(week_EndDate)) and so1.shiftOfferId is null
	
	)a   )a  
    
	IF iTotalHours IS NULL THEN
		SET iTotalHours=0
	END IF
	
    RETURN iTotalHours
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCandidateTotalAssignedHoursForWeekByDate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCandidateTotalAssignedHoursForWeekByDate`(
candidate_Id bigint(20)
, shift_Date date
, business_SiteId bigint
, manager_Id bigint
) RETURNS float
BEGIN
/*
 Author: James
 Date  : 15/10/2015
 Description : Get candidate total hours for week
*/


    DECLARE iTotalHours FLOAT
	DECLARE week_number INT
    
    DECLARE week_StartDate DATE
    DECLARE week_EndDate DATE
   --  DECLARE x_weeks_after_new_year DATE 
    Declare business_Id bigint
    
    select GetWeekStartDate(shift_Date,manager_Id) into week_StartDate
   /* 
    SET week_number=WEEK(shift_Date,1) 	    
	SET x_weeks_after_new_year=DATE_ADD(MAKEDATE(YEAR(shift_Date), 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(YEAR(shift_Date), 1))>50 , 0 , -1))+week_number WEEK)		   
	SET week_StartDate=DATE_SUB(x_weeks_after_new_year, INTERVAL WEEKDAY(x_weeks_after_new_year) DAY)
	*/
    SET week_EndDate=DATE_ADD(week_StartDate, INTERVAL 6 DAY)        
	
    
	select distinct businessId into business_Id from businessSite   where businessSiteId=business_SiteId and isDeleted=0 


select sum(case when duration<0.00 then duration*-1 else duration end )  INTO iTotalHours from (
    SELECT timestampdiff(second,actualShiftStartDateTime,actualShiftEndDateTime)/3600 as duration  from (
		select candidateId,actualShiftEndDateTime,actualShiftStartDateTime 
		FROM candidateShiftOffer so
        inner join   businessSite bs on so.businessSiteId=bs.businessSiteId and bs.businessId=business_Id
		and so.isDeleted=0 and bs.isDeleted=0
		WHERE so.candidateId=candidate_Id and so.candidateId<>0  AND (date(shiftStartDateTime) >= date(week_StartDate)
		AND date(shiftStartDateTime) <= date(week_EndDate))
		AND STATUS IN (1,2,3,4,5,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48,60,61,62,63)  
    union all
		select cg.candidateId,so.actualShiftEndDateTime,so.actualShiftStartDateTime 
		FROM candidateShiftOffer so 
		inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and cg.status in(1,48,49,39,11,60,61,62,63)
		inner join   businessSite bs on so.businessSiteId=bs.businessSiteId  and bs.businessId=business_Id
		and so.isDeleted=0 and bs.isDeleted=0
        left join candidateShiftOffer so1 on so1.shiftOfferId=so.shiftOfferId and so1.candidateId=so.candidateId and so1.candidateId=candidate_Id
        WHERE cg.candidateId=candidate_Id AND (date(so.shiftStartDateTime) >= date(week_StartDate)
		AND date(so.shiftStartDateTime) <= date(week_EndDate)) and so1.shiftOfferId is null
	
	)a  )a   
    
	 
	SET iTotalHours=coalesce(iTotalHours,0)
 	
    RETURN iTotalHours
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCandidateTotalExperience` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCandidateTotalExperience`(candidate_Id bigint(20)) RETURNS float
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get candidate total experience in days
*/
    DECLARE iTotalDays FLOAT
    DECLARE iTotalDaysPast FLOAT
    DECLARE iTotalDaysPresent FLOAT
    
    /*
    select SUM(DATEDIFF(endDate, startDate)+1) into iTotalDaysPast
    from candidateEmpProfile cep
    inner join candidateEmpProfileExperience cepe on cep.candidateEmpProfileId=cepe.candidateEmpProfileID
    where cep.candidateUserId=candidate_Id and cep.isDeleted=0 and cepe.isDeleted=0
    */
    
    SELECT SUM(totalDays) INTO iTotalDaysPresent FROM (
    SELECT CASE WHEN hrd.empEndDate>utc_timestamp() THEN (DATEDIFF(utc_timestamp(), hrd.empStartDate)+1)
    ELSE (DATEDIFF(hrd.empEndDate, hrd.empStartDate)+1) END  AS totalDays
    FROM hireRequestCandidate hrc
    INNER JOIN jobProfileHireRequest jphr ON hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId
    INNER JOIN hireRequestDetail hrd ON hrc.jobProfileHireRequestId=hrd.jobProfileHireRequestId
    WHERE hrc.candidateUserId=candidate_Id AND hrc.candidateHRStatus=11 AND hrd.empStartDate<utc_timestamp()) AS t1
	
    -- set iTotalDays=iTotalDaysPast+iTotalDaysPresent
    
    RETURN iTotalDaysPresent
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCandidateTotalHoursForSubClassification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCandidateTotalHoursForSubClassification`(candidate_Id bigint(20), businessSite_Id BIGINT(20), department_Id BIGINT(20), jobSubClassification_Id BIGINT(20), week_StartDate date, week_EndDate date) RETURNS float
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get candidate total hours by subclassification
*/
    DECLARE iTotalHours FLOAT
 
select sum(case when duration<0.00 then duration*-1 else duration end )  INTO iTotalHours from (
    SELECT timestampdiff(second,actualShiftStartDateTime,actualShiftEndDateTime)/3600 as duration 
    FROM candidateShiftOffer
    WHERE candidateId=candidate_Id AND businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=jobSubClassification_Id
	and (date(shiftStartDateTime) >= date(week_StartDate) AND date(shiftStartDateTime) <= date(week_EndDate))
	AND STATUS IN (2,4,5,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48,61) AND isDeleted=0)a
	IF iTotalHours IS NULL THEN
		SET iTotalHours=0
	END IF
	
    RETURN iTotalHours
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCandidateTotalHoursForWeek` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCandidateTotalHoursForWeek`(
candidate_Id bigint(20)
, week_StartDate date
, week_EndDate date
, business_SiteId bigint
) RETURNS float
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get candidate total hours for week
*/
    DECLARE iTotalHours FLOAT
    Declare business_Id bigint
  /*  
    SELECT SUM(TIME_TO_SEC(TIMEDIFF(actualShiftEndDateTime, actualShiftStartDateTime)) / 3600) INTO iTotalHours
    FROM candidateShiftOffer
    WHERE candidateId=candidate_Id and candidateId<>0 AND (shiftStartDateTime >= CONVERT(week_StartDate, DATETIME)
	AND shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(week_EndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
	AND STATUS IN (2,4,5,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48) AND isDeleted=0
*/	
    
	select distinct businessId into business_Id from businessSite   where businessSiteId=business_SiteId and isDeleted=0 

select sum(case when duration<0.00 then duration*-1 else duration end )  INTO iTotalHours from (
    SELECT timestampdiff(second,actualShiftStartDateTime,actualShiftEndDateTime)/3600 as duration 
    from candidateShiftOffer so 
	inner join   businessSite bs on so.businessSiteId=bs.businessSiteId and bs.businessId=business_Id
	and so.isDeleted=0 and bs.isDeleted=0
	WHERE candidateId=candidate_Id and candidateId<>0 
    AND (date(so.shiftStartDateTime) >= date(week_StartDate) AND date(so.shiftStartDateTime) <= date(week_EndDate))
	AND STATUS IN (2,4,5,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48,61) )a
	     
	SET iTotalHours=coalesce(iTotalHours,0)
 	
    RETURN iTotalHours
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCandidateTotalHoursForWeekByDate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCandidateTotalHoursForWeekByDate`(
candidate_Id bigint(20)
, shift_Date date
, business_SiteId bigint
, manager_Id bigint
) RETURNS float
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get candidate total hours for week by date
*/
    DECLARE iTotalHours FLOAT
   -- DECLARE week_number INT
    
    DECLARE week_StartDate DATE
    DECLARE week_EndDate DATE
   -- DECLARE x_weeks_after_new_year DATE 
	Declare business_Id bigint
    
    select GetWeekStartDate(shift_Date,manager_Id) into week_StartDate
    /*
	    SET week_number=WEEK(shift_Date,1)
	    SET x_weeks_after_new_year=DATE_ADD(MAKEDATE(YEAR(shift_Date), 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(YEAR(shift_Date), 1))>50 , 0 , -1))+week_number WEEK)
	    SET week_StartDate=DATE_SUB(x_weeks_after_new_year, INTERVAL WEEKDAY(x_weeks_after_new_year) DAY)
	 */  
     SET week_EndDate=DATE_ADD(week_StartDate, INTERVAL 6 DAY)  
	
	/*    
	    SELECT SUM(TIME_TO_SEC(TIMEDIFF(actualShiftEndDateTime, actualShiftStartDateTime)) / 3600) INTO iTotalHours
	    FROM candidateShiftOffer
	    WHERE candidateId=candidate_Id AND (shiftStartDateTime >= CONVERT(week_StartDate, DATETIME)
		AND shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(week_EndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
		AND STATUS IN (2,4,5,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48) AND isDeleted=0
	*/	
			
		select distinct businessId into business_Id from businessSite   where businessSiteId=business_SiteId and isDeleted=0 

select sum(case when duration<0.00 then duration*-1 else duration end )  INTO iTotalHours from (
    SELECT timestampdiff(second,actualShiftStartDateTime,actualShiftEndDateTime)/3600 as duration 
    from candidateShiftOffer so 
		inner join   businessSite bs on so.businessSiteId=bs.businessSiteId and bs.businessId=business_Id
		and so.isDeleted=0 and bs.isDeleted=0
		WHERE candidateId=candidate_Id and candidateId<>0 AND 
        (date(so.shiftStartDateTime) >= date(week_StartDate) AND date(so.shiftStartDateTime) <= date(week_EndDate))
		AND STATUS IN (2,4,5,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48,61) )a 			
	
	SET iTotalHours=coalesce(iTotalHours,0)
    
    RETURN iTotalHours
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessCriticalShiftChanges` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessCriticalShiftChanges`(User_Id bigint(20)) RETURNS bigint(20)
BEGIN
    DECLARE CriticalShiftChanges BIGINT(20)
    
    SELECT COUNT(1) into CriticalShiftChanges FROM(
	SELECT shiftOfferId
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE ucs.userId=user_Id AND so.STATUS IN (10,30,23) AND so.isDeleted=0 AND so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND ((TIME_TO_SEC(TIMEDIFF(so.shiftStartDateTime, DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)))/3600)<=48)
	UNION
	SELECT cg.shiftOfferId
	FROM candidateGiveAwayRequests cg
	INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE ucs.userId=user_Id AND cg.status=23 AND so.isDeleted=0 AND so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND (TIME_TO_SEC(TIMEDIFF(so.shiftStartDateTime, DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)))/3600)<=48
	) AS t1
    
    RETURN CriticalShiftChanges
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessDisputedTimesheets` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessDisputedTimesheets`(User_Id bigint(20)) RETURNS bigint(20)
BEGIN
    DECLARE DisputedTimesheets BIGINT(20)
    
    SELECT COUNT(1) into DisputedTimesheets
	FROM candidateTimesheet ct
	INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE ucs.userId=user_Id AND ct.status=3 AND so.isDeleted=0
    
    RETURN DisputedTimesheets
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessJobMatch` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessJobMatch`(User_Id BIGINT(20)) RETURNS bigint(20)
BEGIN
/*
 Author		: Tijo Joseph
 Date  		: 11-01-2014
 Description: Job Match count
 */
	DECLARE JobMatch BIGINT(20)
 
	SELECT COUNT(1)  INTO JobMatch 
    FROM jobProfileHireRequest jphr 
	INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId AND jphr.status =3 AND jphr.isDeleted=0 and jphr.isNotified=0
	INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
    INNER JOIN businessSite bs ON bs.businessSiteId = jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /*AND ur.roleId=role_Id*/ AND ur.userId=user_Id
    inner join roleBusinessFunction rbf on rbf.businessId=bs.businessId and rbf.roleId=ur.roleId and rbf.businessFunctionId in (55)
	-- WHERE ur.roleId IN (3,5)
    
    
    RETURN JobMatch
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessJobProfileExpiring` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessJobProfileExpiring`(User_Id BIGINT(20)) RETURNS bigint(20)
BEGIN

/*
 Author		: Tijo Joseph
 Date  		: 11-01-2014
 Description: Expiring Job profile count
 */
    DECLARE JobProfileExpiring BIGINT(20)
     
    
	SELECT COUNT(DISTINCT jp.jobProfileId)  INTO jobProfileExpiring 
    FROM jobProfile jp INNER JOIN jobProfileBusinessSite jpbs ON jp.jobProfileId=jpbs.jobProfileId AND jp.isDeleted=0 AND jpbs.isDeleted=0
	INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId AND ur.userId=user_Id
	INNER JOIN businessSite bs ON bs.businessSiteId = jpbs.businessSiteId
	inner join roleBusinessFunction rbf on rbf.businessId=bs.businessId and rbf.roleId=ur.roleId and rbf.businessFunctionId in (48, 50)
	INNER JOIN timeZone tz ON  bs.timeZoneId = tz.timeZoneId
	WHERE DATEDIFF(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))<=28 AND DATEDIFF(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))>=0 -- AND jpbs.status=2
	-- AND ur.roleId IN (3,5)
    
    

    
    RETURN JobProfileExpiring
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessLastMinuteHireCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessLastMinuteHireCount`(User_Id BIGINT(20)) RETURNS bigint(20)
BEGIN

/*
 Author		: Tijo Joseph
 Date  		: 11-01-2014
 Description: Last minute hire count
 */
    DECLARE LastMinuteHireCount BIGINT(20)
    
   SELECT COUNT(distinct lmh.lastMinuteHireId) INTO LastMinuteHireCount FROM 
			lastMinuteHire lmh
			INNER JOIN candidateShiftOffer cso ON cso.shiftOfferId = lmh.shiftOfferId and cso.isDeleted=0
			INNER JOIN businessSite bs ON bs.businessSiteId = cso.businessSiteId and bs.isDeleted=0
			INNER JOIN timeZone tz ON bs.timeZoneId=tz.timeZoneId 
			INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId = bs.businessSiteId and urbs.isDeleted=0
			INNER JOIN userRole ur ON urbs.userRoleId = ur.userRoleId and ur.isDeleted=0
            inner join roleBusinessFunction rbf on rbf.businessId=bs.businessId and rbf.roleId=ur.roleId and rbf.businessFunctionId in (62)
			WHERE lmh.status <> 3 AND ur.userId = user_Id
			AND TIMEDIFF(cso.shiftEndDateTime,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))>=0

    RETURN LastMinuteHireCount
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessNewHireRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessNewHireRequest`(User_Id BIGINT(20)) RETURNS bigint(20)
BEGIN

/*
 Author		: Tijo Joseph
 Date  		: 11-01-2014
 Description: New Hire count
 */
    DECLARE NewHireRequest BIGINT(20)
    
    SELECT COUNT(1) INTO NewHireRequest 
    FROM jobProfileHireRequest jphr 
	INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId AND jphr.status IN(2,3) AND jphr.isDeleted=0
	INNER JOIN businessSite bs ON bs.businessSiteId = jpbs.businessSiteId
    INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId  AND ur.userId=User_Id
    inner join roleBusinessFunction rbf on rbf.businessId=bs.businessId and rbf.roleId=ur.roleId and rbf.businessFunctionId in (55)
	-- WHERE ur.roleId IN (3,5)
    
    
    RETURN NewHireRequest
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessNewHires` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessNewHires`(User_Id BIGINT(20)) RETURNS bigint(20)
BEGIN

/*
 Author		: Tijo Joseph
 Date  		: 11-01-2014
 Description: New Hire count
 */

	DECLARE NewHires BIGINT(20)

	SELECT COUNT(1) INTO NewHires 
    FROM hireRequestCandidate hrc 
    INNER JOIN jobProfileHireRequest jphr 
	ON hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId AND hrc.candidateHRStatus=11 AND hrc.isDeleted=0
	INNER JOIN hireRequestDetail hrd ON hrd.jobProfileHireRequestId=hrc.jobProfileHireRequestId
	INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId     AND jphr.isDeleted=0
    INNER JOIN businessSite bs ON bs.businessSiteId = jpbs.businessSiteId
	INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /*AND ur.roleId=role_Id*/ AND ur.userId=user_Id
	inner join roleBusinessFunction rbf on rbf.businessId=bs.businessId and rbf.roleId=ur.roleId and rbf.businessFunctionId in (55)
	WHERE DATEDIFF(empStartDate,utc_timestamp())<=6 AND DATEDIFF(empStartDate,utc_timestamp())>=0 
	-- AND ur.roleId IN (3,5)
    
    
    RETURN NewHires
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessOutstandingApprovals` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessOutstandingApprovals`(User_Id bigint(20)) RETURNS bigint(20)
BEGIN
    DECLARE OutstandingApprovals BIGINT(20)
    
    SELECT COUNT(1) into OutstandingApprovals
	FROM candidateTimesheet ct
	INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE ucs.userId=user_Id AND ct.status=34 AND so.isDeleted=0
    
    RETURN OutstandingApprovals
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessShiftChanges` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessShiftChanges`(User_Id bigint(20)) RETURNS bigint(20)
BEGIN
    DECLARE ShiftChanges BIGINT(20)
    
    SELECT COUNT(1) into shiftChanges 
		FROM
		(
			SELECT shiftOfferId
			FROM candidateShiftOffer so
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE ucs.userId=user_Id AND (so.STATUS IN (10,12,30,23,38) or so.isCantWork=1)  AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
			UNION
			SELECT cg.shiftOfferId
			FROM candidateGiveAwayRequests cg
			INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE ucs.userId=user_Id AND cg.status=23 AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
		) t1
    
    RETURN ShiftChanges
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessShiftGiveAway` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessShiftGiveAway`(User_Id bigint(20),isSpecified_Period bit(1)) RETURNS bigint(20)
BEGIN
  DECLARE ShiftChanges BIGINT(20)
    
    SELECT COUNT(1) into ShiftChanges  from (
			SELECT distinct cg.shiftOfferId
			FROM candidateGiveAwayRequests cg
			INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE ucs.userId=user_Id AND cg.status=23 AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
			and case when isSpecified_Period =1 then timediff(so.shiftEndDateTime,DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE))<=cast('48:00:00' as time) else 1=1 end
       )t1
    
    RETURN ShiftChanges
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessShiftSick` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessShiftSick`(
User_Id bigint(20),
search_Type tinyint,
week_StartDate date,
week_EndDate date
) RETURNS bigint(20)
BEGIN
/*
	search_Type =1 -- within 48 hrs
				 2 -- outstanding
                 3 -- History
*/


   DECLARE ShiftChanges BIGINT(20)
    
    SELECT COUNT(1) into ShiftChanges  from (
	
			SELECT shiftOfferId
			FROM candidateShiftOffer so
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE ucs.userId=User_Id AND so.isDeleted=0
			and case when search_Type =1 then 
					timediff(so.shiftEndDateTime,DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE))<=cast('48:00:00' as time) 
					and so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
					AND (so.STATUS IN (10,12,38) or so.isCantWork=1) 
                when coalesce(search_Type,0)  in(2,0) then so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
					 AND (so.STATUS IN (10,12,38) or so.isCantWork=1) 
                when search_Type=3 then date(so.shiftStartDateTime) between week_StartDate and week_EndDate
					 and so.shiftEndDateTime<DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
                     AND (so.STATUS IN (10,12,38,36) or so.isCantWork=1) 
                else   (so.STATUS IN (10,12,38) or so.isCantWork=1)  end
       )t1
    
    RETURN ShiftChanges
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountBusinessShiftSwap` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountBusinessShiftSwap`(User_Id bigint(20),isSpecified_Period bit(1)) RETURNS bigint(20)
BEGIN
  DECLARE ShiftChanges BIGINT(20)
    
    SELECT COUNT(1) into ShiftChanges  from (
	
			SELECT shiftOfferId
			FROM candidateShiftOffer so
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE ucs.userId=User_Id AND so.STATUS IN (30) AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
			and case when isSpecified_Period =1 then timediff(so.shiftEndDateTime,DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE))<=cast('48:00:00' as time) else 1=1 end
       )t1
    
    RETURN ShiftChanges
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountCandidateJobMatches` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountCandidateJobMatches`(candidate_Id BIGINT(20)) RETURNS int(11)
BEGIN

/*
 Author		: Tijo Joseph
 Date  		: 10-01-2015
 Description: Candidate job offer count
 */
    DECLARE jobMatches_count INT
    
    SELECT COUNT(1) INTO jobMatches_count
    FROM hireRequestCandidate hrc
    INNER JOIN jobProfileHireRequest hr ON hrc.jobProfileHireRequestId = hr.jobProfileHireRequestId
    INNER JOIN hireRequestDetail hrd ON hr.jobProfileHireRequestId = hrd.jobProfileHireRequestId
    WHERE candidateUserId=candidate_Id AND candidateHRstatus IN  (3,7)  AND hrc.isDeleted=0
	AND DATEDIFF(empStartDate,utc_timestamp())>=0
    
    RETURN jobMatches_count
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountCandidateLastMinuteHire` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountCandidateLastMinuteHire`(candidate_Id BIGINT(20)) RETURNS int(11)
BEGIN

/*
 Author		: Tijo Joseph
 Date  		: 10-01-2015
 Description: Candidate last minute hire count
 */
    DECLARE lastMinuteHireCount INT
    
    SELECT COUNT(1) INTO lastMinuteHireCount
	FROM lastMinuteHireCandidate lmhc
	INNER JOIN lastMinuteHire lmh ON lmhc.lastMinuteHireId = lmh.lastMinuteHireId
    INNER JOIN candidateShiftOffer cso ON cso.shiftOfferId = lmh.shiftOfferId
    INNER JOIN businessSite bs ON bs.businessSiteId = cso.businessSiteId
	INNER JOIN timeZone tz ON tz.timeZoneId = bs.timeZoneId
	WHERE candidateUserId = candidate_Id AND lmhc.IsIgnored = 0 AND lmhc.candidatestatus=2 
	AND cso.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
    
    RETURN lastMinuteHireCount
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountCandidateShiftOffer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountCandidateShiftOffer`(candidate_Id bigint(20)) RETURNS int(11)
BEGIN

/*
 Author: Ecanarys
 Date  : 
 Description : 
 */
    DECLARE shiftOffers_count INT
    
    SELECT COUNT(t1.shiftOfferId) INTO shiftOffers_count FROM (
		SELECT so.shiftOfferId
		FROM candidateShiftOffer so 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		WHERE so.candidateId=candidate_Id AND so.status IN (1,14,18,39,41,63) and so.candidateId<>0
		AND so.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
		UNION all		
    	select cg.shiftOfferId
        from candidateGiveAwayRequests cg 
		inner join candidateShiftOffer so on cg.shiftOfferId=so.shiftOfferId and cg.status IN (1,18,39,41,49,63) and so.isDeleted=0
		left join candidateShiftOffer so2 on so2.shiftOfferId=cg.shiftOfferId and so2.candidateId=cg.candidateId and so2.status not in (38,40,46)
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and bs.isDeleted=0 
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		where cg.candidateId=candidate_Id and so2.shiftOfferId is null AND so.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
		union all
		select cc.shiftOfferId
        from candidateShiftCancel  cc
		inner join candidateShiftOffer so on cc.shiftOfferId=so.shiftOfferId and cc.status IN (55,57,58,59) and so.isDeleted=0
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and bs.isDeleted=0 
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		where cc.candidateUserId=candidate_Id AND cc.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
		and cc.isNotified in(0,1)    
    
    ) AS t1
    
    RETURN shiftOffers_count
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountCandidateTimeSheet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountCandidateTimeSheet`(candidate_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE timeSheet_count INT
    
    SELECT COUNT(so.shiftOfferId) INTO timeSheet_count 
	FROM candidateShiftOffer so
	INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId 
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.candidateId=candidate_Id AND so.shiftEndDateTime < DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
    AND /*so.status NOT IN (1,3,19,33,36)*/ so.status IN (2,4,7,9,14,17,18,21,22,23,24,25,27,28,29,31,32,35,37,40, 48) 
   -- and so.status not IN (1,3,46)  
    AND ct.status IN (1,3, 10) AND so.isDeleted=0 and so.isTimeSheetSubmitRequired = 1
    
    RETURN timeSheet_count
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountCriticalShiftChanges` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountCriticalShiftChanges`(User_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE CriticalShiftChanges int
    
    SELECT COUNT(1) into CriticalShiftChanges FROM(
	SELECT shiftOfferId
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.createdBy=user_Id AND so.STATUS IN (10,30,23) AND so.isDeleted=0 AND so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND ((TIME_TO_SEC(TIMEDIFF(so.shiftStartDateTime, DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)))/3600)<=48)
	UNION
	SELECT cg.shiftOfferId
	FROM candidateGiveAwayRequests cg
	INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.createdBy=user_Id AND cg.status=23 AND so.isDeleted=0 AND so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND (TIME_TO_SEC(TIMEDIFF(so.shiftStartDateTime, DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)))/3600)<=48
	) AS t1

    
    RETURN CriticalShiftChanges
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountDisputedTimesheets` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountDisputedTimesheets`(User_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE DisputedTimesheets int
    
    SELECT COUNT(1) into DisputedTimesheets
			FROM candidateTimesheet ct
			INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
			WHERE so.createdBy=user_Id AND ct.status=3 AND so.isDeleted=0
    
    RETURN DisputedTimesheets
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountJobMatch` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountJobMatch`(User_Id bigint(20)) RETURNS int(11)
BEGIN

	DECLARE JobMatch int

	SELECT COUNT(1) into JobMatch 
    FROM jobProfileHireRequest jphr 
	INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId AND jphr.status =3 AND jphr.isDeleted=0
	INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /*AND ur.roleId=role_Id*/ AND ur.userId=user_Id
	where ur.roleId in (3,5)
    
    RETURN JobMatch
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountJobProfileExpiring` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountJobProfileExpiring`(User_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE JobProfileExpiring int
    
    SELECT COUNT(DISTINCT jp.jobProfileId) into jobProfileExpiring FROM jobProfile jp INNER JOIN jobProfileBusinessSite jpbs ON jp.jobProfileId=jpbs.jobProfileId AND jp.isDeleted=0 AND jpbs.isDeleted=0
	INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId AND ur.userId=user_Id
	INNER JOIN businessSite bs ON bs.businessSiteId = jpbs.businessSiteId
	INNER JOIN timeZone tz ON  bs.timeZoneId = tz.timeZoneId
	WHERE DATEDIFF(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))<=28 AND DATEDIFF(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))>=0 AND jpbs.status=2
	and ur.roleId in (3,5)
    
    RETURN JobProfileExpiring
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountLastMinuteHireCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountLastMinuteHireCount`(User_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE LastMinuteHireCount int
    
   SELECT COUNT(1) into LastMinuteHireCount FROM 
			lastMinuteHire lmh
			INNER JOIN candidateShiftOffer cso ON cso.shiftOfferId = lmh.shiftOfferId
			INNER JOIN businessSite bs ON bs.businessSiteId = cso.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId=tz.timeZoneId 
			INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId = bs.businessSiteId
			INNER JOIN userRole ur ON urbs.userRoleId = ur.userRoleId
			WHERE lmh.status <> 3 AND ur.userId = user_Id
			AND TIMEDIFF(cso.shiftEndDateTime,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))>=0
    
    RETURN LastMinuteHireCount
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountNewHireRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountNewHireRequest`(User_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE NewHireRequest int
    
    SELECT COUNT(1) into NewHireRequest 
    FROM jobProfileHireRequest jphr 
	INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId AND jphr.status IN(2,3) AND jphr.isDeleted=0
	INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId  AND ur.userId=User_Id
	where ur.roleId in (3,5)
    
    RETURN NewHireRequest
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountNewHires` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountNewHires`(User_Id bigint(20)) RETURNS int(11)
BEGIN

	DECLARE NewHires int

	SELECT COUNT(1) into NewHires 
    FROM hireRequestCandidate hrc 
    INNER JOIN jobProfileHireRequest jphr 
	ON hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId AND hrc.candidateHRStatus=11 AND hrc.isDeleted=0
	INNER JOIN hireRequestDetail hrd ON hrd.jobProfileHireRequestId=hrc.jobProfileHireRequestId
	INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId     AND jphr.isDeleted=0
	INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /*AND ur.roleId=role_Id*/ AND ur.userId=user_Id
	WHERE DATEDIFF(empStartDate,utc_timestamp())<=6 AND DATEDIFF(empStartDate,utc_timestamp())>=0 
	and ur.roleId in (3,5)
    
    RETURN NewHires
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountOutstandingApprovals` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountOutstandingApprovals`(User_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE OutstandingApprovals int
    
    SELECT COUNT(1) into OutstandingApprovals
			FROM candidateTimesheet ct
			INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
			WHERE so.createdBy=user_Id AND ct.status=34 AND so.isDeleted=0
    
    RETURN OutstandingApprovals
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetCountShiftChanges` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetCountShiftChanges`(User_Id bigint(20)) RETURNS int(11)
BEGIN
    DECLARE ShiftChanges int
    
    SELECT COUNT(1) into shiftChanges 
		FROM
		(
			SELECT shiftOfferId
			FROM candidateShiftOffer so
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE so.createdBy=user_Id AND so.STATUS IN (10,30,23) AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
			UNION
			SELECT cg.shiftOfferId
			FROM candidateGiveAwayRequests cg
			INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE so.createdBy=user_Id AND cg.status=23 AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
		) t1
    
    RETURN ShiftChanges
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetDateTimeFromCityTimezone` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetDateTimeFromCityTimezone`(city_Id bigINT(20),date_ToConvert datetime) RETURNS datetime
BEGIN

/*
 Author: Ecanarys
 Date  : 
 Description : 
 */
    DECLARE time_difference varchar(10)
    DECLARE converted_dateTime DATETIME
    
    select timezoneOffset into time_difference from cityTimezone where cityId=city_Id
    
    set converted_dateTime=CONVERT_TZ(date_ToConvert,'+00:00',time_difference)
    
    return converted_dateTime
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetTargetEmployeeForShiftSwap` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetTargetEmployeeForShiftSwap`(shift_Id bigint(20),candidate_Id BIGINT(20)) RETURNS bigint(20)
BEGIN

/*
 Author: Ecanarys
 Date  : 
 Description : 
 */
    DECLARE employeeId bigint(20)
    set employeeId=0
    
    select candidateId into employeeId
    from shiftoffer so
    where so.shiftId=shift_Id and so.createdBy=candidate_Id and so.status=15 and isDeleted=0 LIMIT 1
    
    RETURN employeeId
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetTargetOfferIdForShiftSwap` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetTargetOfferIdForShiftSwap`(targetcandidate_Id BIGINT(20),shift_StartDateTime datetime,shift_EndDateTime DATETIME,manager_Id bigint(20)) RETURNS bigint(20)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shift offer Id of target candidate
*/
    DECLARE shiftoffer_Id BIGINT(20)
    SET shiftoffer_Id=0
    
    SELECT shiftofferId INTO shiftoffer_Id
    FROM candidateShiftOffer so
    WHERE targetCandidateId=targetcandidate_Id AND shiftStartDateTime=shift_StartDateTime AND shiftEndDateTime=shift_EndDateTime AND createdBy=manager_Id AND STATUS=7 AND isDeleted=0 LIMIT 1
    
    RETURN shiftoffer_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetTimeSheetStatusForShiftOffer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetTimeSheetStatusForShiftOffer`(shiftOffer_Id BIGINT(20), shift_StartDatetTime datetime) RETURNS bit(1)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get timesheet status for shift offer
*/
    DECLARE timesheet_status INT
    DECLARE isSubmitted BIT
    DECLARE timeDiff_InMinutes INT
    
    SET isSubmitted=0
    SELECT so.status,tz.timeDiffInMinutes INTO timesheet_status,timeDiff_InMinutes
    FROM candidateTimesheet ct
    INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
    INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
    INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
    WHERE ct.shiftOfferId=shiftOffer_Id
    
    IF shift_StartDatetTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE) AND (timesheet_status=2 OR timesheet_status=34) THEN 
	SET isSubmitted=1
    END IF
    
    RETURN isSubmitted
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetUserLastLoginDevice` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetUserLastLoginDevice`(
user_Id BIGINT(20),
language_Id bigint(20)
) RETURNS varchar(100) CHARSET utf8
BEGIN
/*
 Author: James
 Date  : 13/04/2016
 Description : Get User last login Device details
*/

declare device_Name nvarchar(100)

set @sl=0
set @userId=0

select group_concat(deviceType) into device_Name from(
	select @sl :=if(@userId=userId,@sl+1,1) as sl,@userId :=userId,deviceType
		, case when deviceTypeID=3 and @sl=3 then 1.1 else @sl end sln from (	 
		select userId,lastLoginTime,ul.deviceTypeId,deviceType from userLastLogin ul 
		inner join deviceTypeLocale dt on ul.deviceTypeId=dt.deviceTypeID and dt.languageId=language_Id
		where userId=user_Id 
		order by lastLoginTime desc 
	 )a order by sln limit 2
)a 
 
RETURN device_Name
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetWeekEndDateByDate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetWeekEndDateByDate`(empStart_date DATE,empEnd_date DATE,timeDiff_InMinutes INT(11)) RETURNS date
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get week end date by date
*/
    DECLARE week_number INT
    DECLARE x_weeks_after_new_year DATE
    DECLARE weekStartDate DATE
    DECLARE weekEndDate DATE
    
    IF empStart_date<DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE) THEN
	SET empStart_date=DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)
    END IF
    
    SET week_number=WEEK(empStart_date,1)
    SET x_weeks_after_new_year=DATE_ADD(MAKEDATE(YEAR(empStart_date), 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(YEAR(empStart_date), 1))>50 , 0 , -1))+week_number WEEK)
	
    SET weekStartDate=DATE_SUB(x_weeks_after_new_year, INTERVAL WEEKDAY(x_weeks_after_new_year) DAY)
    SET weekEndDate=DATE_ADD(weekStartDate, INTERVAL 6 DAY)
	
    RETURN weekEndDate
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP FUNCTION IF EXISTS `GetWeekStartDate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE FUNCTION `GetWeekStartDate`(
 shift_Date date
, manager_Id bigint
) RETURNS date
begin
-- set @shift_Date='2016-01-17'

declare week_startDay tinyint

	select distinct weekStartDayId into week_startDay
	from userRole ucs left join userRoleBusinessSite ucsb 	on ucs.userRoleId=ucsb.userRoleId
	left join businessSite bs on bs.businessSiteId=ucsb.businessSiteId
	left join business b on bs.businessId=b.businessId 
	inner join country co on b.countryId = co.countryId
	where userId=manager_Id limit 1
	
    set week_startDay=coalesce(week_startDay,1)
	
    SET @week_number=WEEK(shift_Date,1) 
    
	SET @x_weeks_after_new_year=DATE_ADD(MAKEDATE(YEAR(shift_Date), 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(YEAR(shift_Date), 1))>50 , 0 , -1))+@week_number WEEK)
		   
	SET @week_StartDate=DATE_SUB(@x_weeks_after_new_year, INTERVAL WEEKDAY(@x_weeks_after_new_year) DAY)
	SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY)        
 
	
 if shift_Date between @week_StartDate and @week_EndDate and week_startDay<>1 then
		-- select 1
        if @week_EndDate=shift_Date and WEEKDAY(shift_Date)+1=week_startDay then
			SET @week_StartDate=shift_Date
            SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY) 
        elseif shift_Date >=(DATE_add(@week_StartDate, INTERVAL week_startDay-1 DAY)) then
			set @week_StartDate= DATE_add(@week_StartDate, INTERVAL week_startDay-1 DAY) 			
			SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY)  
		else 
			set @week_StartDate= DATE_ADD((DATE_sub(@week_StartDate, INTERVAL 7 DAY)), INTERVAL week_startDay-1 DAY) 			
			SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY) 
        end if
        
elseif week_startDay=1 then
		SET @week_StartDate=DATE_SUB(@x_weeks_after_new_year, INTERVAL WEEKDAY(@x_weeks_after_new_year) DAY)
		SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY)    

else 
	-- select 2
		SET @week_StartDate=shift_Date
		SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY) 
 end if

 -- select @week_StartDate as weekStartDate,@week_EndDate as weekEndDate

RETURN @week_StartDate 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `ActivateDeactivateBusinessFeatures` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `ActivateDeactivateBusinessFeatures`(
)
BEGIN

/*
 Author			: Tijo
 Date  			: 29/04/2015
 Description 	: Activating and Deactivating Business Features like Job Profile, Hire Request
				  Server will run schecduler which will call this service every half hour.
*/
	 SET SQL_SAFE_UPDATES = 0
    
    /* ACTIVATING JOB PROFIE */
	update  jobProfileBusinessSite jpbs   
	inner join jobProfile jp  
	on jpbs.jobProfileId=jp.jobProfileId
	inner join businessSite bs on bs.businessSiteId=jpbs.businessSiteId
	left join timeZone tz on bs.timeZoneId=tz.timeZoneId 
	set jpbs.status = 2  , isProvisional =0
	where isProvisional =1 
    and DATEDIFF(DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute), activeDate) =0 
	and status =1
    
    
    /* DEACTIVATING JOB PROFIE */
    update  jobProfileBusinessSite jpbs   
    inner join jobProfile jp  on jpbs.jobProfileId=jp.jobProfileId
	inner join businessSite bs on bs.businessSiteId=jpbs.businessSiteId
	left join timeZone tz on bs.timeZoneId=tz.timeZoneId 
	set jpbs.status = 1   
	where isProvisional =0 
    and DATEDIFF(DATE_ADD(DATE_ADD(utc_timestamp(),INTERVAL -1 Day),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute), expiryDate) =0 and status =2
    
    /* EXPIRE HIRE REQUEST */
    update jobProfileHireRequest jphr inner join hireRequestDetail hrd 
	on jphr.jobProfileHireRequestId=hrd.jobProfileHireRequestId
	inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId=jphr.jobProfileBusinessSiteId
	inner join businessSite bs on bs.businessSiteId=jpbs.businessSiteId
	left join timeZone tz on bs.timeZoneId=tz.timeZoneId 
	set jphr.status=7
	where datediff(hrd.empEndDate,DATE_ADD(DATE_ADD(utc_timestamp(),INTERVAL -1 Day),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute)) <=0 and jphr.status<>7


	SET SQL_SAFE_UPDATES = 1
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `ActivateDeactivateUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `ActivateDeactivateUser`(
 in email_Id varchar(100)
,in updated_By bigint(20)
,in update_Type tinyint(2)
)
BEGIN

/*
update_Type -- 1 - Activate User
			   2 - Deactivate User
*/
declare statusValue bit(1)
declare user_Id bigint(20)
declare role_CategoryId tinyint(4)

set statusValue=0


select userId,roleCategoryId into user_Id,role_CategoryId  from scUser where emailId=email_Id


	if update_Type=1 then
			update scUser set 
					 status=2
					,isOTPGenerated=0
					,updatedBy=coalesce(updated_By,updatedBy)
					,updatedOn=utc_timestamp()
			where emailId = email_Id 
			if row_count()>0 then
					set statusValue=1
			end if

	elseif  update_Type=2 then
			update scUser set 
				 emailId= concat(email_Id ,'-',userId)
				,isDeleted=1
				,updatedBy=coalesce(updated_By,updatedBy)
				,updatedOn=utc_timestamp()
			where emailId = email_Id  
			if row_count()>0 then
				set statusValue=1
							update userRole ur 
							inner join userRoleBusinessSite urbs on ur.userRoleId=urbs.userRoleId 
							and ur.userId=user_Id and ur.isDeleted=0 and urbs.isDeleted=0
							inner join candidateShiftOffer so on so.businessSiteId=urbs.businessSiteId
							set so.isDeleted=1,so.updatedBy=updated_By,so.updatedOn=utc_timestamp()
							where date(so.shiftStartDateTime)>date(utc_timestamp()) and role_CategoryId=3

							update   candidateShiftOffer so
							set so.isDeleted=1,so.updatedBy=updated_By,so.updatedOn=utc_timestamp()  
							where so.candidateId=user_Id and date(so.shiftStartDateTime)>date(utc_timestamp()) and role_CategoryId=2

							update candidateShiftOffer so 
							inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId 
							set so.isDeleted=1,so.updatedBy=updated_By,so.updatedOn=utc_timestamp()
							where cg.candidateId=user_Id and date(so.shiftStartDateTime)>date(utc_timestamp()) and role_CategoryId=2

							update  hireRequestCandidate  set  
							isDeleted=1,updatedBy=updated_By,updatedOn=utc_timestamp()
							where candidateUserId=user_Id and role_CategoryId=2
 
							update  candidateEmpProfile set 
							isDeleted=1,updatedBy=updated_By,updatedOn=utc_timestamp()
							where candidateUserId=user_Id                
			end if
	elseif  update_Type=3 then
			update scUser set  
				 userPassword=TO_BASE64(UNHEX(sha1('test@1'))) 
				,updatedBy=coalesce(updated_By,updatedBy)
				,updatedOn=utc_timestamp()
			where emailId = email_Id  
			if row_count()>0 then
				set statusValue=1
			end if

	end if

select statusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckBusinessCostCentre` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckBusinessCostCentre`(
  IN CostCentre_Id bigint(20) 
, IN Business_Id bigint(20) 
, IN CostCentre_Name varchar(50) 
)
BEGIN

/*
 Author			: Tijo
 Date  			: 29/04/2015
 Description 	: To check whether the same Costcentre name is already existing for the same business.
*/

	select CostCentreId 
    from businessCostCentre 
    where businessId = Business_Id and costCentreName=CostCentre_Name and isDeleted=0 and costCentreId <> CostCentre_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckCandidateAvailability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckCandidateAvailability`(
 IN candidate_Id varchar(5000)
,IN shift_offerId BIGINT(20)
,IN shift_StartDateTime datetime
,IN shift_EndDateTime datetime
,in search_Type tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Check the candidate Availability
 
 search_Type - 1 -  Roster Clash & Unavailability
			   2 - Roster Clash
               3 - Unavailability Clash
*/

if  search_Type=2 then
	select userId,firstName,lastName
    ,case when  CheckCandidateRosterClash(userId, shift_offerId, shift_StartDateTime, shift_EndDateTime) =1 then 0 else 1 end    as isAvailble
	from scUser
	where find_in_set(userId,candidate_Id) 
elseif search_Type=3 then
	select userId,firstName,lastName
    , case when CheckCandidateUnavailability(userId, shift_offerId, shift_StartDateTime, shift_EndDateTime) =1 then 0 else 1 end    as isAvailble
	from scUser
	where find_in_set(userId,candidate_Id) 
else 
	select userId,firstName,lastName
    ,case when  CheckCandidateAvailability(userId, shift_offerId, shift_StartDateTime, shift_EndDateTime)=1 then 1 else 0 end as isAvailble
	from scUser
	where find_in_set(userId,candidate_Id) 
end if

 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckDocumentPath` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckDocumentPath`(IN id bigint,IN document_Path varchar(1000),IN document_type tinyint)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Used at the time of deleting the file.
 
 
Document Type  
1 - Candidate Employment Profile Document
2 - Candidate Preferred Country Document
3 - Candidate Qualification Document
4 - User Profile Image
5 - Business Document
6 - Agency Document
7 - candidate Document
8 - Job Profile Document
*/

 
		select documentPath as doc_exists
		from candidateEmpProfileDocument 
        where document_type = 1 and candidateEmpProfileDocId = id and documentPath = document_Path and fileStatus=1
			union all
		select documentPath as doc_exists
		from candidatePreferredCountryDocument 
        where  document_type = 2 and candidatePreferredCountryDocumentId = id and documentPath = document_Path and fileStatus=1
			union all
		select documentPath as doc_exists
		from candidateQualificationDocument 
        where  document_type = 3 and candidateQualificationDocumentId = id and documentPath = document_Path and fileStatus=1
			union all 
		select imagePath as doc_exists
		from userProfileImage 
        where  document_type = 4 and userId = id and imagePath = document_Path and fileStatus=1
			union all 
		select fileUrl as doc_exists 
		from businessDocument 
        where document_type = 5 and  businessDocumentId = id and fileUrl = document_Path and fileStatus=1
			union all 
		select fileUrl as doc_exists
		from agencyDocument 
        where  document_type = 6 and agencyDocumentId = id and fileUrl = document_Path and fileStatus=1
			union all    
    	select documentPath as doc_exists from candidateDocument
		where  document_type = 7 and candidateUserId =id and documentPath=document_Path and fileStatus=1
			union all  
        select fileUrl as doc_exists from jobProfileAttachment
		where document_type = 8 and  jobProfileId =id and fileUrl=document_Path and fileStatus=1 
 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckEmailID` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckEmailID`( IN Email_Id varchar(100) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Checking Email Id exists or not
*/

	select 1 as IsExists from scUser where emailId = Email_Id
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckHireRequestCandidateCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckHireRequestCandidateCount`(
IN jobProfileHireRequest_Id bigint
)
BEGIN

/*
Author			: Tijo
Date  			: 07/04/2015
Description 	: To check if hire request is editable or not. If candidate is selected for a particular hire request, the hire request will not be editable.
*/
	select count(1) as hireRequestCandidateCount from 
    hireRequestCandidate where jobProfileHireRequestId = jobProfileHireRequest_Id

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckHireRequestExpiry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckHireRequestExpiry`(
IN jobProfileHireRequest_Id bigint
)
BEGIN

	select jphr.jobProfileHireRequestId
	from jobProfileHireRequest jphr
	inner join hireRequestDetail hrd on jphr.jobProfileHireRequestId = hrd.jobProfileHireRequestId
	inner join businessSite bs on bs.businessSiteId = hrd.businessSiteId
	inner join timeZone tz on bs.timeZoneId = tz.timeZoneId
	where jphr.jobProfileHireRequestId = jobProfileHireRequest_Id and
	case when isCsvUpload =0 then 
		DATEDIFF(DATE_ADD(utc_timestamp(),INTERVAL coalesce(  tz.timeDiffInMinutes ,0) minute), empStartDate ) <=0
    else 1=1 end

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckJobProfileTitle` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckJobProfileTitle`( 
  IN job_Title varchar(500) 
, IN business_Id bigint(20) 
, IN employmentType_Id TINYINT
, IN grade_Id bigint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Checking Job profile Name is exists or not
*/


	select jobProfileId, jobTitle 
	from  jobProfile 
	where businessId = business_Id
	and  rtrim(ltrim(jobTitle)) = rtrim(ltrim(job_Title)) 
    and  coalesce(employmentTypeId,0) = coalesce(employmentType_Id ,0)
    and coalesce(gradeId,0) =coalesce(grade_Id,0)

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckLastMinuteHireForShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckLastMinuteHireForShift`(
IN shiftOffer_Id bigint
)
BEGIN

	select shiftOfferId from lastMinuteHire where shiftOfferId =shiftOffer_Id and isDeleted=0 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckQuoteRequestForHireRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckQuoteRequestForHireRequest`(
	IN hireRequest_Id bigint
)
BEGIN

/*
 Author: James
 Date  : 11/02/2015
 Description :  
*/


		select hr.jobProfileHireRequestId
				,jobProfileBusinessSiteId
				,hireRequestNo 
				,qr.quoteRequestId
				,qr.quoteRequsetNo
		from jobProfileHireRequest hr 
        inner join quoteRequest qr on hr.jobProfileHireRequestId=qr.jobProfileHireRequestId  and qr.isDeleted=0
		where hr.jobProfileHireRequestId=hireRequest_Id and hr.workflowId in(1,2) and hr.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckRoleName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckRoleName`(
	 in business_Id bigint
	,in role_Name	varchar(200)
	,in roleCategory_Id tinyint
    ,in language_Id bigint
)
BEGIN

/*
Author			: Tijo
Date  			: 07/04/2015
Description 	: Whether the same role name is existing for the same business.
*/

	select r.businessId,rl.roleName 
    from roleInfo r 
    inner join roleInfoLocale rl on r.roleId=rl.roleId and languageId=language_Id
    where rl.roleName = role_Name and businessId = business_Id and roleCategoryId =roleCategory_Id
    and r.isDeleted = 0
    
    union 
    
    select 0 as businessId,rl.roleName 
    from roleInfo r 
    inner join roleInfoLocale rl on r.roleId=rl.roleId and languageId=language_Id
    where rl.roleName = role_Name and isSystemRole =1 and roleCategoryId =roleCategory_Id
	and r.isDeleted = 0
    


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckShiftStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckShiftStatus`(
In shiftOffer_Id bigint
)
BEGIN

/*
 Author: James
 Date  : 15/02/2016
 Description : get shift status 
*/

select shiftOfferId,candidateId,status,shiftStartDateTime,shiftEndDateTime ,sl.statusName
from candidateShiftOffer so left join statusLookup sl on so.status=sl.statusId
where shiftOfferId=shiftOffer_Id and isDeleted=0  and candidateId<>0
union
select so.shiftOfferId,cg.candidateId,so.status,shiftStartDateTime,shiftEndDateTime,sl.statusName from candidateGiveAwayRequests cg 
left join candidateShiftOffer so on cg.shiftOfferId=so.shiftOfferId
left join statusLookup sl on so.status=sl.statusId
where so.shiftOfferId=shiftOffer_Id 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckShiftTimeOver` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckShiftTimeOver`(IN shiftOffer_Id bigint)
BEGIN

/*
 Author			: Tijo
 Date  			: 29/04/2015
 Description 	: Checking shift end time is already over or not.
*/

	select shiftEndDateTime 
	from candidateShiftOffer cso
	inner join businessSite bs on bs.businessSiteId = cso.businessSiteId
	inner join timeZone tz on tz.timeZoneId = bs.timeZoneId
	where timediff(cso.shiftEndDateTime,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute)) >0
	and shiftOfferId= shiftOffer_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckSiteName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckSiteName`(

IN RoleCategory_Id tinyint,
IN id BIGINT,
IN Site_Name NVARCHAR(1000),
IN site_id BIGINT


)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 16/02/2015
 Description : To check whether the same site name is existing for the same business.
*/

/*
if (site_id = 0) THEN
	if (RoleCategory_Id = 3) then
		select businessSiteId, siteName from businessSite where businessId = id and isDeleted=0 and siteName = ltrim(rtrim(Site_Name)) 
	else
		select agencySiteId, siteName from agencySite where agencyId = id and isDeleted=0 and siteName = ltrim(rtrim(Site_Name)) 
	end if
else
	if (RoleCategory_Id = 3) then
		select businessSiteId, siteName from businessSite where businessId = id and isDeleted=0 and siteName = ltrim(rtrim(Site_Name)) and businessSiteId <> site_id
	else
		select agencySiteId, siteName from agencySite where agencyId = id and isDeleted=0 and siteName = ltrim(rtrim(Site_Name)) and agencySiteId <> site_id
	end if
end if */
 
		select businessSiteId, siteName from businessSite 
        where RoleCategory_Id = 3 and  businessId = id and isDeleted=0 and siteName = ltrim(rtrim(Site_Name))
        and businessSiteId <> site_id   
			union all
		select agencySiteId, siteName from agencySite 
        where RoleCategory_Id = 4 and   agencyId = id and isDeleted=0 and siteName = ltrim(rtrim(Site_Name))
        and  agencySiteId <> site_id   


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckSystemClaimSet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckSystemClaimSet`(in role_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : 
*/


select roleId from scRole
where roleId=role_Id and isSystemRole=1


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckSystemRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckSystemRole`(in role_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : To check whether its a system role or not.
*/


select roleId from roleInfo
where roleId=role_Id and isSystemRole=1


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckUserActivation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckUserActivation`( IN Email_Id varchar(100) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Checking Email Id is activated or not
*/
 
     if exists (select 1 from scUser where  emailId = Email_Id and Status<>2) then
		 select 0 as IsValidated -- Deactivated
     elseif exists (select 1 as IsValidated from scUser where  emailId = Email_Id and Status=2) then
		  select 1 as IsValidated -- Activated
	 end if
 
		/*
	 select case when Status=2 then 1 else 0 end as IsValidated 
     from scUser where  emailId = Email_Id  */
     
	


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckUserSiteAcess` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckUserSiteAcess`( 

  IN user_Id bigint(20) 
, IN userRole_Id bigint(20)  
, IN userRoleSite_Id bigint(20)  
, IN site_ID bigint(20) 
, IN role_categoryId tinyint
, IN email_id NVARCHAR(200)
)
BEGIN


/*
Author : Tijo Joseph
Date   :
Description : Used for checking whether the user is associated with any other business or with the same businessSite with different role.
Status: 0-Cant Add/Update  1-Can Add/update  2- User associated with different business.
*/
	declare StatusValue tinyint
	declare user_businessId  bigint(20) 
	declare business_Id  bigint(20) 

	
    if (user_Id <> 0) then
		if (role_categoryId = 3) then
			set business_Id = (select businessId from businessSite where businessSiteId =site_ID and isDeleted=0)
			set user_businessId = (select businessId from userRoleBusinessSite ubs inner join businessSite bs on ubs.businessSiteId = bs.businessSiteId where userRoleId in (select userRoleId from userRole where userId =user_Id and isDeleted=0)   and bs.isDeleted=0 limit 1)
			
			if (business_Id = user_businessId) then -- checking whether the user is associated with same business or not.
				if exists(select 1 from userRoleBusinessSite where BusinessSiteId = site_ID and userRoleId in (select userRoleId from userRole where userId= User_Id and isDeleted =0) and isDeleted=0) then
					if (select BusinessSiteId from userRoleBusinessSite where userRoleBusinessSiteId = userRoleSite_Id and isDeleted=0) = site_ID then
						set StatusValue = 1
						select  StatusValue
					ELSE	
						set StatusValue = 0
						select  StatusValue
					end if
				else
					set StatusValue = 1
					select  StatusValue
				end if
			else
				set StatusValue = 2
				select  StatusValue
			end if
		else
			set business_Id = (select agencyId from agencySite where agencySiteId =site_ID and isDeleted=0)
			set user_businessId = (select AgencyId from userRoleAgencySite ubs inner join agencySite bs on ubs.AgencySiteId = bs.AgencySiteId where userRoleId in (select userRoleId from userRole where userId =user_Id and isDeleted=0)    and  bs.isDeleted=0 limit 1)
			
            
			-- select business_Id, user_businessId
			if (business_Id = user_businessId) then
				if exists(select 1 from userRoleAgencySite where AgencySiteId = site_ID and userRoleId in (select userRoleId from userRole where userId= User_Id and isDeleted =0) and isDeleted=0) then
					if (select AgencySiteId from userRoleAgencySite where userRoleAgencySiteId = userRoleSite_Id and isDeleted=0) = site_ID then
						set StatusValue = 1
						select  StatusValue
					ELSE	
						set StatusValue = 0
						select  StatusValue
					end if
				else
					set StatusValue = 1
					select  StatusValue
				end if
			else
				set StatusValue = 2
				select  StatusValue
			end if
		end if
	ELSE
		if (role_categoryId = 3) then
			if exists (select userId from scUser where emailId = email_Id ) THEN
				set business_Id = (select businessId from businessSite where businessSiteId =site_ID and isDeleted=0)
				set user_businessId = (select businessId from userRoleBusinessSite ubs inner join businessSite bs on ubs.businessSiteId = bs.businessSiteId where userRoleId in (select userRoleId from userRole where userId =(select userId from scUser where emailId = email_Id)) and bs.isDeleted=0 limit 1)
				-- select business_Id, user_businessId
				if (business_Id = user_businessId) then
					if exists(select 1 from userRoleBusinessSite where BusinessSiteId = site_ID and userRoleId in (select userRoleId from userRole where userId =(select userId from scUser where emailId = email_Id ) and isDeleted =0) and isDeleted =0) then
						if (select BusinessSiteId from userRoleBusinessSite where userRoleBusinessSiteId = userRoleSite_Id and isDeleted =0) = site_ID then
							set StatusValue = 1
							select  StatusValue
						ELSE	
							set StatusValue = 0
							select  StatusValue
						end if
					else
						set StatusValue = 1
						select  StatusValue
					end if
				else
					set StatusValue = 2
					select  StatusValue
				end if
			else
				set StatusValue = 1
				select  StatusValue
			end if
		else
			if exists (select 1 from scUser where emailId = email_Id) THEN
				set business_Id = (select agencyId from agencySite where agencySiteId =site_ID and isDeleted =0)
				set user_businessId = (select AgencyId from userRoleAgencySite ubs inner join agencySite bs on ubs.AgencySiteId = bs.AgencySiteId where userRoleId in (select userRoleId from userRole where userId =(select userId from scUser where emailId = email_Id))  and bs.isDeleted =0 limit 1)
			
				if (business_Id = user_businessId) then
					if exists(select 1 from userRoleAgencySite where AgencySiteId = site_ID and userRoleId in (select userRoleId from userRole where userId =(select userId from scUser where emailId = email_Id) and isDeleted =0)) then
						if (select AgencySiteId from userRoleAgencySite where userRoleAgencySiteId = userRoleSite_Id and isDeleted =0) = site_ID then
							set StatusValue = 1
							select  StatusValue
						ELSE	
							set StatusValue = 0
							select  StatusValue
						end if
					else
						set StatusValue = 1
						select  StatusValue
					end if
				else
					set StatusValue = 2
					select  StatusValue
				end if
			else
				set StatusValue = 1
				select  StatusValue
			end if
		end if
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckUserWithMultipleBusiness` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckUserWithMultipleBusiness`(
IN user_Id bigint
)
BEGIN
/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Checking whether the user is associated with different business.
*/

	select userRoleBusinessSiteId 
    from userRole ur
    inner join userRoleBusinessSite urbs on ur.userRoleId = urbs.userRoleId
    where userId =user_Id 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CheckWorkFlowCompleted` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CheckWorkFlowCompleted`(
IN jobProfileHire_RequestId	 bigint
,IN current_StateId  varchar(100)
,IN search_type tinyint

)
BEGIN
/*
Author			: James
Date  			: 07/04/2015
Description 	: To check whether the workflow is completed or not.
search_type     : 1 -- All declined, 2-- Hire Request completed
call CheckWorkFlowCompleted(370, '5,10,8,7',1 )
*/

Declare estimated_Staff bigint 
Declare TotalCandidate_Wf bigint
declare TotalCandidate_WfState bigint
declare isMatched bit
set @rown=0 
set @candidateUserId=0 

set estimated_Staff=
		( select estimatedStaff from hireRequestEstimatedStaff
		 where jobProfileHireRequestId=jobProfileHire_RequestId 
		 order by estimatedStaffId limit 1  )

set TotalCandidate_Wf=
	  (select count(distinct candidateUserId ) TotalCandidateWf
		from workFlowInstance wfi inner join candidateWfInstance cwf 
		on wfi.workflowInstanceId=cwf.workflowInstanceId
		where  jobProfileHireRequestId =jobProfileHire_RequestId ) 

set TotalCandidate_WfState=(
	select count(*)TotalCandidateWfState
			from (
				select * ,@rown :=if(@candidateUserId =candidateUserId,@rown +1,1) as rownum ,@candidateUserId :=candidateUserId from (
					select 	wfi.workflowInstanceId
						,	workFlowId
						,	currentStateId
						,	parentWorkflowInstanceId
						,	businessSiteId
						,	jobProfileHireRequestId
						,	cwf.candidateUserId
					from workFlowInstance wfi inner join candidateWfInstance cwf 
					on wfi.workflowInstanceId=cwf.workflowInstanceId
					 where  jobProfileHireRequestId =jobProfileHire_RequestId
					order by cwf.candidateUserId,candidateWfInstanceId desc  
		)a )a where rownum=1 and find_in_set( currentStateId ,current_StateId) )

set isMatched =case when search_type=1 then TotalCandidate_Wf=TotalCandidate_WfState  
    when search_type=2 then estimated_Staff<=TotalCandidate_WfState  else 0 END  
    
select estimated_Staff,TotalCandidate_Wf,TotalCandidate_WfState ,isMatched
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `CreateAdmin` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `CreateAdmin`( IN AdminEmailId varchar(100) , IN AdminPwd varchar(200) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/07/2014
 Description : Create admin user
*/


insert into scUser(
				userUIId
				,RoleCategoryId
				,emailId
				,UserPassword
				,status
				,createdON
					)
           values (
				CONCAT(UUID() , '-' , 1)
				, "Admin"
				, "1"
				, AdminEmailId
				, SHA1(AdminPwd)
				,2
				,utc_timestamp() 
				  )


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteAgencyPublicLiability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteAgencyPublicLiability`(
IN Liability_Id bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : deleting public liability for a particular agency
*/

	delete from agencyPublicLiability 
    where agencyPublicLiabilityId = Liability_Id
    
    IF ROW_COUNT() > 0 THEN
		SELECT 	Liability_Id
	END IF

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteAgencySite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteAgencySite`(IN agencySite_Id bigint(20) ,IN created_By bigint(20) )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Soft delete of a agency site
*/


			update agencySite set isDeleted =1,updatedBy = created_By
				,updatedOn =	utc_timestamp()  where agencySiteId = agencySite_Id

				IF ROW_COUNT() > 0 THEN
	 
					select 1 as StatusValue 
	 
				end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteAgencyWrkerCompensation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteAgencyWrkerCompensation`(
IN Compensation_Id bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : deleting Worker compensation for a particular agency
*/


	delete from agencyWorkerCompensation 
    where agencyWorkerCompId = Compensation_Id
    
    IF ROW_COUNT() > 0 THEN
		SELECT 	Compensation_Id
	END IF

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteBeaconBusinessSiteDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteBeaconBusinessSiteDetail`(
 IN beacon_Id bigint(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 06/06/2016
 Description : Insert BeaconBusinessSiteDetail
 call est_skillsconnect_dev.DeleteBeaconBusinessSiteDetail(1)
*/
	
	DECLARE status_value bit(1)
    SET status_value = 0
    
    if coalesce(beacon_Id,0)<>0 then 
    
		DELETE FROM beaconBusinessSite WHERE beaconId = beacon_Id
		DELETE FROM beaconDepartment WHERE beaconId = beacon_Id
		DELETE FROM beaconSubClassification WHERE beaconId = beacon_Id
		SET status_value = 1
        
	end if
    
    select status_value
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteBusinessPublicLiability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteBusinessPublicLiability`(
IN Liability_Id bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 17/11/2014
 Description : deleting public liability for a particular Business
*/

	delete from businessPublicLiability 
    where businessPublicLiabilityId = Liability_Id
    
    IF ROW_COUNT() > 0 THEN
		SELECT 	Liability_Id
	END IF

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteBusinessShiftTemplates` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteBusinessShiftTemplates`(
in businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id INT
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Delete Business shift templates
*/
	SET SQL_SAFE_UPDATES=0
		DELETE FROM businessShiftTemplate 
		WHERE businessSiteId=businessSite_Id AND departmentId=department_Id 
		AND subClassificationId=subClassification_Id
	SET SQL_SAFE_UPDATES=1
	
	SELECT ROW_COUNT() AS STATUS
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteBusinessSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteBusinessSite`(IN businessSite_Id bigint(20) , IN created_By bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Soft delete of a agency site
*/
Declare business_Id bigint
set business_Id=(select businessId from businessSite where businessSiteId = businessSite_Id)

		update businessSite set 
				isDeleted = 1 ,updatedBy = created_By
				,updatedOn =	utc_timestamp() 
		where businessSiteId = businessSite_Id
		
		IF ROW_COUNT() > 0 THEN 
                 update businessSite set 
						childHierarchy =GetBusinessFamily(businessSiteId),
						parentHierarchy = GetBusinessAncestry(businessSiteId)
				 where businessId = business_Id

				select 1 as StatusValue 
		end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteBusinessSiteJobProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteBusinessSiteJobProfile`(IN JobProfile_Id bigint, IN BusinessSiteIds nvarchar(5000))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Deleting job profile for multiple sites.
 call DeleteBusinessSiteJobProfile (1, "69,70")
*/

	update jobProfileBusinessSite
		set isDeleted = 1
        where find_in_set(businessSiteId, BusinessSiteIds)
        and jobProfileId=JobProfile_Id
	
    if ROW_COUNT() > 0 then
     select 1 as StatusValue
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteBusinessUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteBusinessUser`(
IN User_Id bigint ,
IN created_By bigint , 
IN userRoleSite_Id bigint,  
IN role_Id int
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : To delete user from a particular business site.
*/

declare userUniqueId nvarchar(100)
	update userRoleBusinessSite set isDeleted =1, updatedBy=created_By  
    where userRoleBusinessSiteId = userRoleSite_Id
        
        if (role_Id = 3) then -- Business user
			SET SQL_SAFE_UPDATES = 0
			update userRoleBusinessSite urbs
            inner join userRole ur on urbs.userRoleId = ur.userRoleId
            set urbs.isDeleted =1, urbs.updatedBy=created_By
            where  userId =User_Id and roleId = 3
            SET SQL_SAFE_UPDATES = 1
        end if
            
		IF ROW_COUNT() > 0 THEN
			set userUniqueId = (select userUIId from scUser where userId = User_Id)
			select User_Id,userUniqueId 
		end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteBusinessWorkerCompensation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteBusinessWorkerCompensation`(
IN Compensation_Id bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 17/11/2014
 Description : deleting Worker compensation for a particular Business
*/


	delete from businessWorkerCompensation 
    where businessWorkerCompId = Compensation_Id
    
    IF ROW_COUNT() > 0 THEN
		SELECT 	Compensation_Id
	END IF

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteCandidateEmpProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteCandidateEmpProfile`(
  in  candidateEmpProfile_Id	bigint(20)
, in created_By bigint(20))
BEGIN

	/*
	 Author: James
	 Date  : 24/11/2014
	 Description : Delete Candidate Employee profile
	*/

declare StatusValue bit
set StatusValue =0

            delete from candidateEmpProfile
            where candidateEmpProfileId=candidateEmpProfile_Id
            
				IF ROW_COUNT() > 0 THEN
						set StatusValue =1 
				end if
			
        if StatusValue =1 then
				update candidateEmpProfileExperience set 
					isDeleted=1
					,updatedBy=created_By
					,updatedOn=utc_timestamp()
				where candidateEmpProfileId=candidateEmpProfile_Id

			IF ROW_COUNT() > 0 THEN
					set StatusValue =1 
			end if
					
				update candidateEmpProfileExpSkill   cepes inner join candidateEmpProfileExperience  cepe
				on cepes.candidateEmpProfileExpId=cepe.candidateEmpProfileExpId
                set cepes.isDeleted=1
					,cepes.updatedBy=created_By
					,cepes.updatedOn=utc_timestamp()
				where cepe.candidateEmpProfileId=candidateEmpProfile_Id

 
			IF ROW_COUNT() > 0 THEN
					set StatusValue =1 
			end if
	 end if

	select StatusValue 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteCandidateShiftOfferHistory` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteCandidateShiftOfferHistory`(
 in shiftOffer_Id bigint(20)
,in created_By  bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 11/02/2016
 Description : Soft delete of a agency site
*/

	update candidateShiftOfferHistory set isDeleted=1,updatedBy=created_By,updatedOn=utc_timestamp()
	where shiftOfferId=shiftOffer_Id
    if row_count()>0 then 
		update candidateShiftOffer set updatedBy=created_By,updatedOn=utc_timestamp()
        where shiftOfferId=shiftOffer_Id
		select row_count() as statusValue
    end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteHireRequestCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteHireRequestCandidate`(
	 in business_id bigint
    ,in candidate_UserId varchar(500)
    ,in created_By	bigint
    ,in hireRequest_CandidateId bigint(20)
    ,in search_Type tinyint(1)
)
BEGIN
/*
 Author: James
 Date  : 22/09/2015
 Description :  Deleting hired candidate
 call est_skillsconnect.DeleteHireRequestCandidate(99, '925', 925)
 Type_Id 1 - Unhire a candidate for a specific business
         2 - Unhire a candidate for a specific hire request
*/
declare StatusValue bit
declare total_candidate int
declare isDemoJobProfile bit(1)

set StatusValue = 0

set total_candidate=(
	select count(1)tt  from hireRequestCandidate hrc inner join (
	select jobProfileHireRequestId from hireRequestCandidate hrc  
	where hireRequestCandidateId=hireRequest_CandidateId)hr
on hrc.jobProfileHireRequestId=hr.jobProfileHireRequestId and hrc.isDeleted	=0 )  


if search_Type=1 then
		update  hireRequestCandidate hrc inner join jobProfileHireRequest hr
		on hrc.jobProfileHireRequestId=hr.jobProfileHireRequestId
		set hrc.isDeleted=1,hrc.updatedBy=created_By,hrc.updatedOn=utc_timestamp()
		where find_in_set(hrc.candidateUserId,candidate_UserId) and businessId=business_id 
		IF ROW_COUNT() > 0 THEN 
			set StatusValue=1 
		 end if
elseif search_Type=2 then

		update hireRequestCandidate set isDeleted=1
				,updatedBy=created_By
				,updatedOn=utc_timestamp()
		where hireRequestCandidateId=hireRequest_CandidateId
        
		if row_count()>0 then 
			set StatusValue=1              
            
            update  jobProfileHireRequest jphr 
			inner join hireRequestCandidate hrc on jphr.jobProfileHireRequestId=hrc.jobProfileHireRequestId
			set jphr.isDeleted=1 ,jphr.updatedBy=created_By,jphr.updatedOn=utc_timestamp()
			where hrc.hireRequestCandidateId=hireRequest_CandidateId and total_candidate=1         
        end if

end if
		select StatusValue 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteHireRequestShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteHireRequestShift`(
IN jobProfileHireRequest_Id  bigint(20)
)
BEGIN

/*
 Author: Tijo
 Date  : 15-01-2015
 Description : Deleting Hire request shift
 call DeleteHireRequestShift(1)
*/

declare StatusValue bit
set StatusValue =0

	update hireRequestShift set isDeleted = 1
    where jobProfileHireRequestId =jobProfileHireRequest_Id
    
    IF ROW_COUNT() > 0 THEN
		set StatusValue =1
		select StatusValue
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteJobProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteJobProfile`(
IN jobProfile_Id bigint
,IN created_by bigint
)
BEGIN
 
/*
 Author: James
 Date  : 19/03/2014
 Description : Deleting Job Profile
 call est_skillsconnect.DeleteJobProfile(48, 45)
*/

if not exists (	select 1 from jobProfileBusinessSite  jpbs inner join  jobProfileHireRequest jphr
			on jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId  and jphr.isDeleted=0 and jpbs.isDeleted=0
			where jpbs.jobProfileId =jobProfile_Id)  then

			update jobProfile set isDeleted=1,updatedBy=created_by,updatedOn=utc_timestamp()
			where jobProfileId=jobProfile_Id  

			if ROW_COUNT() > 0 then
				select jobProfile_Id 

				update jobProfileBusinessSite set isDeleted=1,updatedBy=created_by,updatedOn=utc_timestamp()
				where jobProfileId=jobProfile_Id  
			end if
 
 else
		set jobProfile_Id=0
		select   jobProfile_Id            
 
end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteRole`(

 IN Role_Id bigint
,IN created_By bigint(20) 
,IN RoleCategory_Id tinyint
,IN business_Id bigint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Deleteing role for Business and HR agency
 
 RoleCategory_Id - 3 - Businesss
 RoleCategory_Id - 4 - HR Agency
*/

 
        
			update  roleInfo  set
            		 isDeleted = 1
					,updatedBy = created_By
					,updatedOn = utc_timestamp() 			
            where isSystemRole=0 and roleId = Role_Id and roleCategoryId = RoleCategory_Id   
        
         IF ROW_COUNT() > 0 THEN
					update roleInfoLocale set isDeleted = 1
						,updatedBy = created_By
						,updatedOn = utc_timestamp()
                    where roleId=Role_Id 
                
			 select Role_Id
             update roleBusinessFunction set isDeleted = 1 
             where roleId = Role_Id and businessId = business_Id and roleCategoryid = RoleCategory_Id
            END IF
            
            

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteSiteClaimSet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteSiteClaimSet`(

 IN claimSet_Id bigint
,IN Site_Id bigint
,IN created_By bigint(20) 
,IN RoleCategory_Id tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Deleteing claim set for Business and HR agency
 
 RoleCategory_Id - 3 - Businesss
 RoleCategory_Id - 4 - HR Agency
*/


		update scClaimSet set isDeleted = 1 ,updatedBy = created_By
								,updatedOn =	utc_timestamp() where claimSetId = claimSet_Id
        
         IF ROW_COUNT() > 0 THEN
				if (RoleCategory_Id = 3) then
					delete from businessSiteClaimSet where claimSetId = claimSet_Id and businessSiteId=Site_Id
                    select claimSet_Id
                end if
                if (RoleCategory_Id = 4) then
					delete from agencySiteClaimSet where claimSetId = claimSet_Id and agencySiteId=Site_Id
                    select claimSet_Id
                end if
            END IF
            
            

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteSiteRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteSiteRole`(

 IN Role_Id bigint
,IN Site_Id bigint
,IN created_By bigint(20) 
,IN RoleCategory_Id tinyint
, IN business_Id bigint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Deleteing claim set for Business and HR agency
 
 RoleCategory_Id - 3 - Businesss
 RoleCategory_Id - 4 - HR Agency
*/

 
        
			update roleInfoLocale rl inner join roleInfo r
			on rl.roleId=r.roleId set    
					 r.isDeleted = 1
					,r.updatedBy = created_By
					,r.updatedOn = utc_timestamp()
			where r.isSystemRole=0 and rl.roleId = role_Id             
            
        
         IF ROW_COUNT() > 0 THEN
                    select Role_Id
		 end if
               

            

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteStaff` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteStaff`(
 in  business_SiteId  bigint(20)
,in  department_Id  bigint(20)
,in  subClassification_Id bigint(20)
,in  candidate_UserId varchar(5000)
, in  manager_Id bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 21/03/2016
 Description :  Deleting hired candidate 
*/
declare shiftOffer_Id bigint(20)
declare candidate_Id bigint(20)
declare total_Candidates int
declare declined_count int
declare candidate_userId_Single bigint(20)
declare status_Value bit(1)

set status_Value=0
DROP TABLE IF EXISTS TempShiftData
CREATE TEMPORARY TABLE  TempShiftData
(
	shiftOfferId BIGINT(20),
	candidateId BIGINT(20),
    STATUS TINYINT(4),
    recNo bigint(20)
) 

set @rown=0 
set @i=1
set @totalRec =0

SET SQL_SAFE_UPDATES = 0

	update hireRequestCandidate hrc 
	inner join jobProfileHireRequest jphr on jphr.jobProfileHireRequestId=hrc.jobProfileHireRequestId and hrc.isDeleted=0 and hrc.candidateHRStatus=11 and jphr.isDeleted=0 and find_in_set(hrc.candidateUserId,candidate_UserId)
	inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId=jphr.jobProfileBusinessSiteId and jpbs.isDeleted=0
	inner join jobProfile jp on jp.jobProfileId=jpbs.jobProfileId
		set hrc.isDeleted=1 , hrc.updatedBy=manager_Id,hrc.updatedOn=utc_timestamp()
	where jpbs.businessSiteId=business_SiteId and jp.departmentId=department_Id 
	and jp.jobSubClassificationId=subClassification_Id
    
	if row_count()>0 then
		set status_Value=1
    end if
    
	insert into TempShiftData
	(shiftOfferId, candidateId,status,recNo)
	select *,@rown :=@rown + 1 as rown from (
		select so.shiftOfferId,so.candidateId,so.status from candidateShiftOffer so 
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and so.isDeleted=0 and bs.isDeleted=0
		inner join timeZone tz on tz.timeZoneId=bs.timeZoneId
		where so.businessSiteId=business_SiteId and departmentId=department_Id 
		and subClassificationId=subClassification_Id and find_in_set(candidateId,candidate_UserId)
		and date(shiftStartDateTime)>date( DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)) 
		union
		select so.shiftOfferId,cg.candidateId,so.status from candidateShiftOffer so 
		inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and find_in_set(cg.candidateId,candidate_UserId)
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and so.isDeleted=0 and bs.isDeleted=0
		inner join timeZone tz on tz.timeZoneId=bs.timeZoneId
		where so.businessSiteId=business_SiteId and departmentId=department_Id 
		and subClassificationId=subClassification_Id 
		and date(shiftStartDateTime)>date( DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE))
	 )a 

	set @totalRec=(select max(recNo) as recNo from TempShiftData)

	while @i<=@totalRec do
		select shiftOfferId,candidateId into shiftOffer_Id,candidate_Id from TempShiftData where recNo=@i
		-- unassign
		call InsertCandidateShiftUnassign(shiftOffer_Id,candidate_Id,manager_Id)
 
		select count(candidateId)  into total_Candidates from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id

		select count(candidateId) as tt into declined_count from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateStatus=3
		set declined_count=coalesce(declined_count,0)
		set total_Candidates=coalesce(total_Candidates,0)
        
        select candidateId into candidate_userId_Single from candidateGiveAwayRequests 
        where shiftOfferId=shiftOffer_Id and total_Candidates=1
        
        set candidate_userId_Single=coalesce(candidate_userId_Single,0)
        
        UPDATE candidateShiftOffer SET sourceModule='ROSTER', STATUS=1,candidateId=0,updatedBy=manager_Id,updatedOn=utc_timestamp() 
		WHERE shiftOfferId=shiftOffer_Id and total_Candidates=0
        
		UPDATE candidateShiftOffer SET sourceModule='ROSTER', candidateId=candidate_userId_Single,updatedBy=manager_Id,updatedOn=utc_timestamp() 
		WHERE shiftOfferId=shiftOffer_Id and total_Candidates<>0
        
        if total_Candidates =declined_count and total_Candidates<>0 then
			UPDATE candidateShiftOffer SET  STATUS=3,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=1
			
			UPDATE candidateShiftOffer SET  STATUS=32,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=4
			
			UPDATE candidateShiftOffer SET  STATUS=12,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=38
					
			UPDATE candidateShiftOffer SET  STATUS=42,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=40
			
			UPDATE candidateShiftOffer SET  STATUS=47,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=46        
		end if      
        
	set @i =@i + 1 
	end while 
    DROP TABLE IF EXISTS TempShiftData
    SET SQL_SAFE_UPDATES = 1
    select status_Value
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteUploadedCandidateDeatils` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteUploadedCandidateDeatils`(IN file_Id bigint(20))
BEGIN

	delete from candidateTemp where fileId = file_Id
    
    IF ROW_COUNT() > 0 THEN
		select 1 as StatusValue
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteUploadedCandidateDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteUploadedCandidateDetails`(in business_Id bigint(20)  )
BEGIN

	delete from scUserTemp
	where businessId=business_Id

	if row_count()>0 then
		select 2 as StatusValue
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `DeleteUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `DeleteUser`( 
IN User_Id bigint ,
IN created_By bigint , 
IN userRoleSite_Id bigint,  
IN Role_Category_Id smallint(6),
IN role_Id int
)
BEGIN
/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : To delete user from a particular business or agency site.
*/


declare userUniqueId nvarchar(100)

	if (Role_Category_Id = 3) then
        
		update userRoleBusinessSite set isDeleted =1, updatedBy=created_By  where userRoleBusinessSiteId = userRoleSite_Id
        
        if (role_Id = 3) then -- Business user
			SET SQL_SAFE_UPDATES = 0
			update userRoleBusinessSite urbs
            inner join userRole ur on urbs.userRoleId = ur.userRoleId
            set urbs.isDeleted =1, urbs.updatedBy=created_By
            where  userId =User_Id and roleId = 3
            SET SQL_SAFE_UPDATES = 1
        end if
            
		IF ROW_COUNT() > 0 THEN
			set userUniqueId = (select userUIId from scUser where userId = User_Id)
			select User_Id,userUniqueId 
		end if
	else -- Agency user
		update userRoleAgencySite set isDeleted =1, updatedBy=created_By  where userRoleAgencySiteId = userRoleSite_Id
            
		IF ROW_COUNT() > 0 THEN
			set userUniqueId = (select userUIId from scUser where userId = User_Id)
			select User_Id,userUniqueId 
		end if
        
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAdminAgencyList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAdminAgencyList`(
	IN 	agency_Name  varchar(200)
,	IN	industry_Id		bigint(20)
,	IN	state_Id		bigint(20)
,	IN 	city_Id			bigint(20)
,	IN  start_record bigint(20)  
,	IN  no_of_records int(11) 
,	IN  sort_by_Column varchar(50)
,	IN  sort_Order	varchar(10)
,	IN  language_Id  bigint(20)	

)
BEGIN

/*
 Author: James
 Date  : 08/01/2014
 Description : Get agency list for admin
 call est_skillsconnect.GetAdminAgencyList(null, null, null, null, 0, 10, 'agencyName', 'desc', 264)
 call est_skillsconnect.GetAdminAgencyList('te', 2, null, null, 0, 10, 'agencyName', 'desc', 264)

 */
 

set Sort_by_Column = concat(Sort_by_Column, "_", lower(Sort_Order))
 
select * ,FOUND_ROWS() as TotalRecords  from(  
		select 
			 a.agencyId  
			,agencyRegId  
			,agencyName   
			,ai.agencyIndustryID
            ,ai.industryId
            ,il.industryName 
            ,ai.isOther
            ,ai.otherIndustrydesc
			,a.phone  
			,a.cityId 
			,cl.cityName
			,a.stateId 
			,sl.stateName
			,a.countryId 
			,col.countryName
			,a.zipCode 
            ,bs.agencySiteId
            ,a.agencyUrl
            ,a.status
  		 from agency a 
         left join cityLocale cl on a.cityId=cl.cityId  and cl.languageId=language_Id
         left join stateLocale sl on a.stateId=sl.stateId  and cl.languageId=language_Id
         left join countryLocale col on a.countryId =col.countryId   and cl.languageId=language_Id
         left join agencySite bs on bs.agencyId = a.agencyId and parentAgencySiteId is null 
		 left join agencyIndustry ai on a.agencyId=ai.agencyId 
         left join industryLocale il on il.industryID=ai.industryID and il.languageId=language_Id
		 where  a.isDeleted =0 and a.agencyName like concat("%", coalesce(agency_Name,a.agencyName),"%"  )
         and   coalesce(ai.industryID,0)=coalesce(industry_Id,coalesce(ai.industryID,0))  
         and   coalesce(a.stateId,0)=coalesce(state_Id , coalesce(a.stateId,0)) 
         and  coalesce(a.cityId,0)=coalesce(city_Id,coalesce(a.cityId,0))  
    )a order by 
		case when  Sort_by_Column ='agencyName_asc' then   agencyName end asc ,
		case when  Sort_by_Column ='agencyName_desc' then   agencyName end desc,
        case when  Sort_by_Column ='industryName_asc' then   industryName end asc,
		case when  Sort_by_Column ='industryName_desc' then   industryName end desc,
        case when  Sort_by_Column ='stateName_asc' then   stateName end asc,
		case when  Sort_by_Column ='stateName_desc' then   stateName end desc,        
        case when  Sort_by_Column ='cityName_asc' then   cityName end asc,
		case when  Sort_by_Column ='cityName_desc' then   cityName end desc,        
        case when  Sort_by_Column ='phone_asc' then   phone end asc,
		case when  Sort_by_Column ='phone_desc' then   phone end desc,         
        case when  Sort_by_Column ='status_asc' then   status end asc,
		case when  Sort_by_Column ='status_desc' then   status end desc            
    LIMIT  no_of_records  OFFSET  start_record     


      


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAdminBusinessList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAdminBusinessList`(
	IN 	business_Name  varchar(200)
,	IN	industry_Id		bigint(20)
,	IN	state_Id		bigint(20)
,	IN 	city_Id			bigint(20)
,	IN  start_record bigint(20)  
,	IN  no_of_records int(11) 
,	IN  sort_by_Column varchar(50)
,	IN  sort_Order	varchar(10)
,	IN  language_Id  bigint(20)	
)
BEGIN

/*
 Author: James
 Date  : 08/01/2014
 Description : Get business list for admin
call est_skillsconnect.GetAdminBusinessList(null, null, null, null, 0, 10, 'industryName', 'desc', 264)
call est_skillsconnect.GetAdminBusinessList('st', 1, 1, 1, 0, 10, 'industryName', 'desc', 264)
 */
 
set Sort_by_Column = concat(Sort_by_Column, "_", lower(Sort_Order))
 
select * ,FOUND_ROWS() as TotalRecords  from(
	select 
			 b.businessId  
			,businessRegId  
			,businessName    
			,bi.businessIndustryID
            ,bi.industryId
            ,il.industryName 
            ,bi.isOther
            ,bi.otherIndustrydesc
			,b.phone  
			,b.cityId 
			,cl.cityName
			,b.stateId 
			,stl.stateName
			,b.countryId 
			,col.countryName
			,b.zipCode 
			,bs.businessSiteId
            ,b.businessUrl
			,b.status 
		 from business b 
         left join cityLocale cl on cl.cityId=b.cityId and cl.languageId=language_Id	 
         left join stateLocale stl	on stl.stateId=b.stateId and stl.languageId=language_Id	 
         left join countryLocale col on col.countryId=b.countryId and col.languageId=language_Id
		 left join businessSite bs on bs.businessId = b.businessId and parentBusinessSiteId is null 
         left join businessIndustry bi on b.businessId=bi.businessId               
         left join industryLocale il on il.industryID=bi.industryID and il.languageId=language_Id
         where b.isDeleted =0 and b.businessName like  concat("%", coalesce(business_Name,b.businessName),"%"  )
		 and   coalesce(bi.industryID,0)=coalesce(industry_Id,coalesce(bi.industryID,0))  
         and   coalesce(b.stateId,0)=coalesce(state_Id , coalesce(b.stateId,0)) 
         and  coalesce(b.cityId,0)=coalesce(city_Id,coalesce(b.cityId,0))    
    )a order by 
		case when Sort_by_Column ='businessName_asc' then businessName end  asc,
        case when Sort_by_Column ='businessName_desc' then businessName end  desc,
        case when  Sort_by_Column ='industryName_asc' then   industryName end asc,
		case when  Sort_by_Column ='industryName_desc' then   industryName end desc,
        case when  Sort_by_Column ='stateName_asc' then   stateName end asc,
		case when  Sort_by_Column ='stateName_desc' then   stateName end desc,        
        case when  Sort_by_Column ='cityName_asc' then   cityName end asc,
		case when  Sort_by_Column ='cityName_desc' then   cityName end desc,        
        case when  Sort_by_Column ='phone_asc' then   phone end asc,
		case when  Sort_by_Column ='phone_desc' then   phone end desc,         
        case when  Sort_by_Column ='status_asc' then   status end asc,
		case when  Sort_by_Column ='status_desc' then   status end desc           
    LIMIT no_of_records  OFFSET start_record       

     
         
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAdminCandidateList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAdminCandidateList`(
	IN 	candidate_Name  varchar(200)
,	IN	email_Id		varchar(100)    
,	IN	state_Id		bigint(20)
,	IN 	city_Id			bigint(20)
,	IN  start_record bigint(20)  
,	IN  no_of_records int(11) 
,	IN  sort_by_Column varchar(50)
,	IN  sort_Order	varchar(10)
,	IN  language_Id  bigint(20)	

)
BEGIN

/*
 Author: James
 Date  : 08/01/2014
 Description : Get candidate list for admin 
 call est_skillsconnect.GetAdminCandidateList(null, null, null, null, 0, 10, 'emailId', 'asc', 264)
call est_skillsconnect.GetAdminCandidateList(null, 'ja', null, null, 0, 10, 'emailId', 'asc', 264)

 */
 
set Sort_by_Column = concat(Sort_by_Column, "_", lower(Sort_Order))
 
	select * ,FOUND_ROWS() as TotalRecords  from(
		select 	 u.userId
				,u.firstName
				,u.middleName
				,u.lastName
				,u.emailId
				,u.secondaryEmail
				,cd.cityId
				,cl.cityName
				,cd.stateId
				,sl.stateName
				,cd.countryId
				,col.countryName
				,uc.homePhone
				,uc.mobilePhone
				,uc.workPhone
				,uc.fax
				,u.status
                ,u.userUIId
                ,u.encryptionKey
		from scUser u 
		inner join candidateDetail cd on u.userId=cd.candidateUserId
		left join userContact uc on uc.userID=u.userId and uc.isDeleted=0
		left join cityLocale cl on cl.cityId=cd.cityId and cl.languageId=language_Id		 
		left join stateLocale sl on sl.stateId=cd.stateId and sl.languageId=language_Id		 
		left join countryLocale col on col.countryId=cd.countryId and col.languageId=language_Id	 
		where u.isDeleted=0 and concat(coalesce(firstName,''),coalesce(middleName,''),coalesce(lastName,'')) like concat("%", coalesce(candidate_Name,firstName),"%") 
		and u.emailId like  concat("%", coalesce(email_Id,u.emailId),"%" )
         and   coalesce(cd.stateId,0)=coalesce(state_Id , coalesce(cd.stateId,0)) 
         and  coalesce(cd.cityId,0)=coalesce(city_Id,coalesce(cd.cityId,0))  
	)a order by 
		case when Sort_by_Column ='firstName_asc' then firstName end asc,
        case when Sort_by_Column ='firstName_desc' then firstName end desc,
        
        case when Sort_by_Column ='emailId_asc' then emailId end asc,
        case when Sort_by_Column ='emailId_desc' then emailId end desc,
        
		case when  Sort_by_Column ='stateName_asc' then   stateName end asc,
		case when  Sort_by_Column ='stateName_desc' then   stateName end desc,        
        case when  Sort_by_Column ='cityName_asc' then   cityName end asc,
		case when  Sort_by_Column ='cityName_desc' then   cityName end desc,        
        case when  Sort_by_Column ='mobileNo_asc' then   mobilePhone end asc,
		case when  Sort_by_Column ='mobileNo_desc' then   mobilePhone end desc,         
        case when  Sort_by_Column ='status_asc' then   status end asc,
		case when  Sort_by_Column ='status_desc' then   status end desc 
    LIMIT  no_of_records OFFSET start_record    
     
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgency`( IN agency_Id bigint(20) , IN agencyStatus tinyint(4),  IN language_Id bigint(20) )
BEGIN
/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency Deatails
*/

		select 
			 a.agencyId  
			,agencyRegId  
			,agencyName  
			,timeSheetWeekEndDayId  
			,weekEndDay
			,a.phone 
			,a.addressLine1
			,a.addressLine2 
			,a.cityId 
			,cl.cityName
			,a.stateId 
			,sl.stateName
			,a.countryId 
			,col.countryName
			,a.zipCode 
            ,bs.agencySiteId
            ,a.agencyUrl
            ,a.agencyDescription
            ,a.areaOfExpertiseId
            ,ae.areaOfExpertise
            ,ai.agencyIndustryID
            ,ai.industryId
            ,il.industryName 
            ,ai.isOther
            ,ai.otherIndustrydesc
            ,privacyPolicy
            ,termsAndCondition
            ,a.fax
            ,a.timeZoneId
			,timeZoneName 
			,timeZoneFormat
		 from agency a
		 left join timeSheetweekEnd ts on ts.weekEndDayId = a.timeSheetWeekEndDayId
         left join timeSheetweekEndLocale tsl on ts.weekEndDayId=tsl.weekEndDayId and tsl.languageId=language_Id
         left join cityLocale cl on a.cityId=cl.cityId  and cl.languageId=language_Id
         left join stateLocale sl on a.stateId=sl.stateId  and cl.languageId=language_Id 
         left join countryLocale col on a.countryId =col.countryId   and cl.languageId=language_Id
         left join agencySite bs on bs.agencyId = a.agencyId and parentAgencySiteId is null
         left join areaOfExpertiseLocale ae on a.areaOfExpertiseId=ae.areaOfExpertiseId  and ae.languageId = language_Id
		 left join agencyIndustry ai on a.agencyId=ai.agencyId and a.agencyId = COALESCE(agency_Id,a.agencyId)             
         left join industryLocale il on il.industryID=ai.industryID and il.languageId=language_Id 
		 left join timeZoneLocale tz on a.timeZoneId = tz.timeZoneId and tz.languageId=language_Id
         where a.status = COALESCE(agencyStatus,a.status)  and a.agencyId = COALESCE(agency_Id,a.agencyId) and a.isDeleted =0
         
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencyClaimsetClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencyClaimsetClaim`(
 IN AgencySite_Id bigint(20) 
,IN claimSet_Id bigint(20)  
)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Claims for a particular claimset and for a agency
*/

    

   select claimId from agencySiteClaimsetClaim bcs 
   where claimSetId=claimSet_Id and agencySiteId =AgencySite_Id
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencyGroupName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencyGroupName`(IN agency_Id bigint(20) , IN language_ID bigint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency Group Name details
*/

	select a.groupNameId
			,case when isOtherGroupName=1 then otherGroupName else gl.groupName  end as groupName
			,haveSite
    from agency a
    left join groupNameLocale gl on a.groupNameId = gl.groupNameId and languageId = language_ID
    where agencyId=agency_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencyPaymentMethod` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencyPaymentMethod`( IN Agency_Id bigint(20) )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get payment methods for a agency
*/

	select  AgencyID  
			,apm.paymentMethodId
			,paymentMethod
		from agencyPaymentMethod  apm
		left join paymentMethod pm  on apm.paymentMethodId = pm.paymentMethodId
		where AgencyId = Agency_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencyPublicLiability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencyPublicLiability`( IN Agency_Id bigint(20) )
BEGIN
/*
Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency public liability
*/
	select   agencyPublicLiabilityId    
			,policyProvider  
			,coverageAmt 
			,policyNo  
			,expiryDate
		from agencyPublicLiability pl
		where AgencyId = Agency_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencyRoleClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencyRoleClaim`(
 IN AgencySite_Id bigint(20) 
,IN Role_Id bigint(20)  
,IN language_Id bigint(20)  
,IN agency_Id bigint
)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Claims for a particular RoleRole and for a agency
*/

     
   
select arc.claimId
,cl.claimName
,arc.roleId
,c.parentClaimId
,cl2.claimName as parentClaimName 
from agencySiteRoleClaim arc 
left join scClaimLocale cl on cl.claimId = arc.claimId and cl.languageId=language_Id
left join scClaim c on c.claimId=cl.claimId
left join scClaimLocale cl2 on cl2.claimId =c.parentClaimId and cl2.languageId=language_Id
left join scRoleLocale rl on rl.roleId =arc.roleId and rl.languageId=language_Id
where arc.roleId=role_Id and arc.agencySiteId= coalesce( agencySite_Id,(select agencySiteId from agencySite where agencyId=agency_Id and parentAgencySiteId is null ))
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencySite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencySite`(IN AgencySite_Id bigint(20) )
Begin
/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency Site Name 
*/
	
    select
	 bs.agencySiteId  
	,bs.siteName  
	from agencySite bs 
	where 
    (FIND_IN_SET( bs.agencySiteId , (select GetAgencyFamily (agencySiteId) from agencySite where agencySiteId = AgencySite_Id))  or agencySiteId = AgencySite_Id )
   -- ( bs.agencySiteId in (select GetAgencyFamily (agencySiteId) from agencySite where agencySiteId = AgencySite_Id)  or agencySiteId = AgencySite_Id)
	and 
    bs.isDeleted =0
    order by siteName
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencySiteCountry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencySiteCountry`(IN language_Id BIGINT)
BEGIN


select c.countryId,countryName  from country c left join countryLocale cl
on c.countryId=cl.countryId
where c.countryId in (select distinct countryId from agency where isDeleted =0)
and cl.languageId = language_Id

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencySiteDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencySiteDetails`( 
 IN Agency_Id bigint(20) 
,IN AgencySite_Id bigint(20) 
,IN language_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Updating Business Work Flow
 call GetAgencySiteDetails(1,null ,264)
 AgencySite_Id = null for getting all agency site under particular agency
*/


	select
	 ag.agencyId
    ,ag.agencyName
	,a.agencySiteId  
	,a.siteName  
	,a.siteDescription   
	,COALESCE(a.parentAgencySiteId ,0) as parentAgencySiteId
    ,bsp.siteName as parentSiteName
	,a.countryId 
    ,col.countryName
	,a.stateId  
    ,stl.stateName
	,a.cityId  
    ,cl.cityName
	,a.phone  
	,a.addressLine1  
	,a.addressLine2  
	,a.fax  
	,a.zipCode  
    ,ag.agencyUrl
    ,ad.fileUrl
    ,ag.privacyPolicy
    ,ag.termsAndCondition
    ,il.industryName
    ,'' as email
    ,ae.areaOfExpertise
    ,a.timeZoneId
	,timeZoneName 
	,timeZoneFormat
	from agencySite a 
    left join agency ag on ag.agencyId = a.agencyId
    left join agencyDocument ad on ad.agencyId = ag.agencyId and ad.documentTypeId =4 and fileStatus=2
    left join agencyIndustry ai on ai.AgencyId = ag.AgencyId
    left join industryLocale il	on ai.industryID=il.industryID and il.languageId=language_Id
    left join agencySite bsp on a.parentAgencySiteId = bsp.agencySiteId
    left join cityLocale cl on a.cityId =cl.cityId  and cl.languageId= language_Id
    left join stateLocale stl on a.stateId=stl.stateId and stl.languageId=language_Id
    left join countryLocale col on a.countryId=col.countryId and col.languageId=language_Id
    left join areaOfExpertiseLocale ae on ag.areaOfExpertiseId=ae.areaOfExpertiseId  and ae.languageId = language_Id
    left join timeZoneLocale tz on a.timeZoneId = tz.timeZoneId and tz.languageId=language_Id
    where a.agencyId = COALESCE(Agency_Id,a.agencyId) 
    and a.agencySiteId = COALESCE(AgencySite_Id,a.agencySiteId) and a.isDeleted =0 
     
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencySiteForBusiness` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencySiteForBusiness`( IN business_Site_Id bigint(20) )
BEGIN
/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Getting all agency site details
*/

	
	select 
	 agencySiteId 
	,agencyId 
	,siteName
	,case when exists (select 1 from businessSitePreferredAgency bfa where bfa.businessSiteId = business_Site_Id and bfa.AgencySiteId = a.agencySiteId and isDeleted =0) then 1 else 0 end as isPreferred
	from agencySite a where isDleted =0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencySiteHierarchy` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencySiteHierarchy`(IN Agency_Id bigint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Business Site Heirarchy
 call GetAgencySiteHierarchy(1)
*/


SELECT agencySiteId,  siteName, siteDescription,  parentAgencySiteId
FROM agencySite where agencyId= Agency_Id  and isDeleted =0 -- and parentAgencySiteId is not null

	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencySiteTree` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencySiteTree`(IN ParentAgencySite_Id bigint)
BEGIN
/*Not using*/
	declare ChildId bigint
    declare LevelId smallint
    declare AgencyTree nvarchar(2000)
    
    set LevelId =1
    
	CREATE TEMPORARY TABLE  ChildAgencySite
	(
	  Child_Id bigint,
	  Level_Id smallint,
	  Is_Checked bit
	)
    

	insert into ChildAgencySite (Child_Id, Is_Checked, Level_Id)
	select agencySiteId,0,LevelId from agencySite where parentAgencySiteId = ParentAgencySite_Id  
    
	IF ROW_COUNT() > 0 THEN
	SET LevelId = LevelId + 1
	END IF
		
	WHILE (select count(1) from ChildAgencySite where Is_Checked=0 > 0  ) DO
		
		SET ChildId = (SELECT Child_Id from ChildAgencySite WHERE Is_Checked =0 LIMIT 1)
        
		
		insert into ChildAgencySite (Child_Id, Is_Checked,Level_Id)
		select agencySiteId,0,LevelId from agencySite where parentAgencySiteId = ChildId and isDeleted=0  
        
        IF ROW_COUNT() > 0 THEN
		SET LevelId = LevelId + 1
        END IF
        
		SET SQL_SAFE_UPDATES=0
		update ChildAgencySite set Is_Checked =1 where Child_Id = ChildId
		SET SQL_SAFE_UPDATES=1
	END WHILE

	-- select group_concat(distinct Child_Id) as ChildBusinessSite  from ChildBussinessSite
	select Child_Id,Level_Id from ChildAgencySite
	drop table ChildAgencySite

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencySiteUsers` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencySiteUsers`(
IN AgencySite_Id bigint(20) 
,IN User_Name varchar(50) 
,IN Sort_by_Column varchar(50) 
,IN Sort_Order varchar(10) 
,IN no_of_records int(11) 
,IN start_record int(11)
, IN language_Id	bigint(20)
, IN user_Id bigint
  )
BEGIN

/*
 Author: James Dsilva
 Date  : 11/11/2014
 Description : Get Agency Site users
 call est_skillsconnect.GetAgencySiteUsers(4, '', 'firstName', 'desc', 10, 0, 264,null)

 */



 set Sort_by_Column = concat(Sort_by_Column, " ", Sort_Order)
 
select * ,FOUND_ROWS() as TotalRecords  from(
		  select  U.userid 
			 , firstName 
			 , middleName
			 , lastName  
			 ,CS.RoleId 
			 ,CS.RoleName 
			 ,AGS.agencySiteId
			 ,AGS.siteName
			 ,U.emailId
			 ,UCSAS.status
			 ,UCSAS.userRoleId
			 ,userRoleAgencySiteId as userRoleSiteId
		  from scUser U  inner join userRole UCS on U.userid=UCS.userID 
		  inner join roleInfoLocale CS on UCS.RoleId=CS.RoleId  and CS.languageId=language_Id and CS.isDeleted=0
		  inner join  userRoleAgencySite  UCSAS on UCS.userRoleId=UCSAS.userRoleId and UCSAS.isDeleted =0
		  inner join agencySite AGS on UCSAS.agencySiteId=AGS.agencySiteId
          inner join (select distinct agencySiteId from userRoleAgencySite urbs 
						inner join userRole ur on ur.userRoleId=urbs.userRoleId
						where ur.userId=user_Id and urbs.isDeleted=0 and ur.isDeleted=0)bss
		  on UCSAS.agencySiteId=bss.agencySiteId
		  where AGS.agencySiteId =coalesce(AgencySite_Id,AGS.agencySiteId)
		  and concat(coalesce(U.firstName,"")," ",coalesce(U.LastName,"")) like concat("%",User_Name,"%")
		 --  and U.userid=coalesce(user_Id,U.userid)  
          and U.isDeleted=0 and AGS.isDeleted=0 and UCSAS.isDeleted=0           
      )a order by case when Sort_by_Column="firstName_Asc" then firstName end asc , 
				  case when Sort_by_Column="firstName_Desc" then firstName end desc ,
                  
                  case when Sort_by_Column="RoleName_Asc" then RoleName end asc , 
				  case when Sort_by_Column="RoleName_Desc" then RoleName end desc ,
                  
                  case when Sort_by_Column="siteName_Asc" then siteName end asc , 
				  case when Sort_by_Column="siteName_Desc" then siteName end desc ,
                  
                  case when Sort_by_Column="status_Asc" then status end asc , 
				  case when Sort_by_Column="status_Desc" then status end desc 
      
      LIMIT no_of_records OFFSET start_record

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAgencyWorkerCompensation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAgencyWorkerCompensation`( IN Agency_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency Worker Compensation
*/

	select   agencyWorkerCompId   
			,policyProvider   
			,coverageAmt 
			,policyNo  
			,expiryDate
		from agencyWorkerCompensation wc
		where AgencyId = Agency_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAllowance`(
in award_Id varchar(5000)
,in language_Id bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 25/05/2016
 Description : Get Allowance
 call GetAllowance('1,2', 264)
*/

select   aa.awardId
		,aa.allowanceId
        ,al.allowanceName 
from awardAllowance aa 
inner join allowanceLocale al on aa.allowanceId=al.allowanceId and al.languageId=language_Id
where find_in_set(aa.awardId,award_Id)
order by aa.awardId,aa.allowanceId

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAllowancePaidType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAllowancePaidType`( IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Agency Allowance Paid Type
*/

	select   allowancePaidTypeId 
			,allowancePaidType
	from allowancePaidTypeLocale where languageId =language_Id
    order by allowancePaidType
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetApplicationDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetApplicationDocument`(
IN document_TypeId smallint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Application Document	
*/

select 	applicationDocumentId
	,	documentName
	,	documentPath
	,	documentMimeType
	,	documentTypeId
	,	eTag
	,	fileStatus
	 from applicationDocument 
where documentTypeId=coalesce(document_TypeId,documentTypeId) and isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAreaOfExpertise` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAreaOfExpertise`(in language_Id int)
BEGIN
/*
 Author: James
 Date  : 14/11/2014
 Description : Get are of expertise 
 call GetAreaOfExpertise(264)
 */
 
	select areaOfExpertiseId,areaOfExpertise from areaOfExpertiseLocale
	where languageId=language_Id 
    order by areaOfExpertise 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAvailableCandidates` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAvailableCandidates`(
IN candidate_Id BIGINT(20),
in shiftOffer_Id BIGINT(20)
,IN language_Id bigint
, IN manager_Id bigint
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get available candidates
*/
	DECLARE businessSite_Id BIGINT(20)
	DECLARE subClassification_Id BIGINT(20)
	DECLARE department_Id BIGINT(20)
	DECLARE shift_StartDateTime DATETIME
	DECLARE shift_EndDateTime DATETIME
    DECLARE isFlexible_ShiftTime BIT(1)
	
	DECLARE is_Overtime BIT(1)
                
	SET is_Overtime=0
	
	SET @totalWorkHours=0.0
	set @totalAssignedWorkHours=0.0
    
	SELECT so.businessSiteId,so.departmentId ,so.subClassificationId,so.shiftStartDateTime,so.shiftEndDateTime,so.candidateId
	INTO businessSite_Id,department_Id,subClassification_Id,shift_StartDateTime,shift_EndDateTime,candidate_Id
	FROM candidateShiftOffer so
	WHERE   so.shiftOfferId=shiftOffer_Id AND so.IsDeleted=0
	SELECT DISTINCT crd.candidateId
		,CONCAT(scu.firstName,' ',scu.lastName) AS candidateName
		,upi.imagePath
		,@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(crd.candidateId,DATE(shift_StartDateTime),businessSite_Id,manager_Id) AS totalAcceptedHours
		,CheckCandidateOverTime(etl.employmentType,@totalWorkHours,businessSite_Id,department_Id,bss.useOvertimeIndicator) AS isOverTimeForAcceptedHours
		,scu.firstName
		,scu.lastName
		,@totalAssignedWorkHours:=ROUND(GetCandidateTotalAssignedHoursForWeekByDate(crd.candidateId,DATE(shift_StartDateTime),crd.businessSiteId,manager_Id),2) AS totalAssignedWorkHours
		,CheckCandidateOverTime(etl.employmentType,@totalAssignedWorkHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAssignedHours
		,(select shiftStartDateTime from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36) order by so.shiftStartDateTime limit 1) as nextShiftStartDateTime
		,(select shiftEndDateTime from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36) order by so.shiftStartDateTime limit 1) as nextShiftEndDateTime
		,cg.candidateStatus
		,uc.mobilePhone
		,scu.encryptionKey
		,ROUND(GetCandidateTotalExperience(crd.candidateId),1) AS seniority
		,jp.employmentTypeId
		,etl.employmentType
		,CheckCandidateRosterClash(crd.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime) as isRosterClash
		,CheckCandidateUnavailability(crd.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime) as isUnavailable
        ,(select isFlexibleShiftTime from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36) order by so.shiftStartDateTime limit 1) as nextShiftFlexibleShiftTime
		,(select shiftEndTimeType from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36) order by so.shiftStartDateTime limit 1) as nextShiftEndTimeType
		,(select shiftEndTimeValue from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36) order by so.shiftStartDateTime limit 1) as nextShiftEndTimeValue
    FROM vwCandidateRosterDetails crd
	INNER JOIN scUser scu ON crd.candidateId=scu.userId
    left join userContact uc on uc.userID=scu.userId and uc.isDeleted=0
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id 
	INNER JOIN businessSettings bss ON crd.businessSiteId=bss.businessSiteId AND crd.departmentId=bss.departmentId 
	left join candidateGiveAwayRequests cg on shiftOfferId=shiftOffer_Id and cg.candidateId=crd.candidateId   and cg.status not in(21)
    left join candidateShiftOffer so on so.shiftOfferId=shiftOffer_Id and so.candidateId=crd.candidateId
    WHERE  case when so.status in(1,3,10,12,38,40,42,46,47,60,62,63) then 1=1 else  crd.candidateId<>candidate_Id end 
		AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=subClassification_Id 
		AND scu.isDeleted=0  
        and crd.empEndDate>=date(shift_StartDateTime) and crd.empStartDate <= date(shift_StartDateTime)
        order by coalesce(cg.candidateStatus,4) ,coalesce(cg.updatedOn,cg.createdOn) desc ,scu.firstName
        
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAvailableCandidatesByDate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAvailableCandidatesByDate`(
IN candidate_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN req_date DATE)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get available candidates by date for swap
*/
	DECLARE businessSite_Id BIGINT(20)
	DECLARE jobSubClassification_Id BIGINT(20)
	DECLARE department_Id BIGINT(20)
	DECLARE shift_StartDateTime DATETIME
	DECLARE shift_EndDateTime DATETIME
	DECLARE timeDiff_InMinutes INT(11)
	Declare SourceDaytt int
    Declare SourceTT int
    
	SELECT so.businessSiteId,so.departmentId ,so.subClassificationId,so.shiftStartDateTime,so.shiftEndDateTime,tz.timeDiffInMinutes 
	INTO businessSite_Id,department_Id,jobSubClassification_Id,shift_StartDateTime,shift_EndDateTime,timeDiff_InMinutes
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.candidateId=candidate_Id AND so.shiftOfferId=shiftOffer_Id AND so.IsDeleted=0
	 
 
select sum(daytt) as SourceDaytt,count(1) as tt into SourceDaytt, SourceTT from (
	select  date(shiftStartDateTime)shift,count(1)daytt from (
		select  so.candidateId,so.shiftOfferId,	so.shiftStartDateTime, so.shiftEndDateTime 
        FROM candidateShiftOffer so  
        inner join (
					select distinct candidateId from candidateShiftOffer so
					WHERE so.candidateId<>candidate_Id  AND so.shiftOfferId<>shiftOffer_Id 
					AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
					AND (DATE(so.shiftStartDateTime)=req_date  or  DATE(so.shiftStartDateTime)=date(shift_StartDateTime))
					and so.STATUS NOT IN (3,10,19,33,36,60,62) AND so.isDeleted=0 ) sor
		on so.candidateId=sor.candidateId
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		WHERE so.candidateId=candidate_Id  -- AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
		AND (DATE(so.shiftStartDateTime)=req_date or   DATE(so.shiftStartDateTime)=date(shift_StartDateTime))  and so.STATUS NOT IN (3,10,19,33,36,60,62) AND so.isDeleted=0
        union
        select  cg.candidateId,so.shiftOfferId,	so.shiftStartDateTime, so.shiftEndDateTime FROM candidateShiftOffer so
        inner join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		WHERE cg.candidateId=candidate_Id   AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
		AND (DATE(so.shiftStartDateTime)=req_date or DATE(so.shiftStartDateTime)=date(shift_StartDateTime))  and cg.status NOT IN (6,12,42,41,18,39,60,62) 
    )a group by   date(shiftStartDateTime)   
)a       
        
    
		SELECT DISTINCT so.candidateId,
		CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
		so.shiftOfferId,
		so.shiftStartDateTime,
		so.shiftEndDateTime,
		1 AS isAvailable,
		upi.imagePath,
		'SUCCESS' AS STATUS,
        so.isFlexibleShiftTime
        ,so.shiftEndTimeType
		,so.shiftEndTimeValue
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId
		LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		WHERE so.candidateId<>candidate_Id AND so.shiftOfferId<>shiftOffer_Id AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
			AND DATE(so.shiftStartDateTime)=req_date AND DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)<so.shiftEndDateTime
			AND (so.shiftStartDateTime<>shift_StartDateTime AND so.shiftEndDateTime<>shift_EndDateTime)
			AND so.status IN (2,9,10,15,16,17,20,21,24,25,26,27,28,29,48,61)
			AND CheckCandidateAvailability(so.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime)=1
            AND CheckCandidateAvailability(candidate_Id,so.shiftOfferId,so.shiftStartDateTime,so.shiftEndDateTime)=1
     		AND so.sourceModule='ROSTER'
			AND scu.isDeleted=0 AND so.isDeleted=0            
 
	union 
		select  so.candidateId,
		CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
		so.shiftOfferId,
		so.shiftStartDateTime,
		so.shiftEndDateTime,
		1 AS isAvailable,
		upi.imagePath,
		'SUCCESS' AS STATUS,
         so.isFlexibleShiftTime
         ,so.shiftEndTimeType
		,so.shiftEndTimeValue
        from (
			select candidateId,count(shiftday)daytt,sum(tt)tt from(		
				select candidateId,DATE(shiftStartDateTime)shiftday,count(1) tt from (		 
					   select so.candidateId,so.shiftOfferId,
						so.shiftStartDateTime,
						so.shiftEndDateTime
						FROM candidateShiftOffer so inner join (
								select distinct candidateId from candidateShiftOffer so
								WHERE so.candidateId<>candidate_Id  AND so.shiftOfferId<>shiftOffer_Id 
								AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
								AND (DATE(so.shiftStartDateTime)=req_date  or  DATE(so.shiftStartDateTime)=date(shift_StartDateTime))
								and so.STATUS NOT IN (3,10,19,33,36,60,62) AND so.isDeleted=0 ) sor
						on so.candidateId=sor.candidateId
                        AND (DATE(so.shiftStartDateTime)=req_date  or  DATE(so.shiftStartDateTime)=date(shift_StartDateTime))
						and so.STATUS NOT IN (3,10,19,33,36,60,62) AND so.isDeleted=0
						INNER JOIN scUser scu ON so.candidateId=scu.userId and scu.isDeleted=0
						INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
						INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
						WHERE so.candidateId<>candidate_Id  AND so.shiftOfferId<>shiftOffer_Id 
						-- AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
					UNION all         
						select  cg.candidateId,so.shiftOfferId,	so.shiftStartDateTime, so.shiftEndDateTime FROM candidateShiftOffer so
						inner join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId
						INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
						INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
						WHERE cg.candidateId<>candidate_Id   AND so.shiftOfferId<>shiftOffer_Id   
						AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
						AND (DATE(so.shiftStartDateTime)=req_date  or  DATE(so.shiftStartDateTime)=date(shift_StartDateTime)) and cg.status NOT IN (6,12,42,41,18,39,60,62) 
				)a where coalesce( SourceDaytt,0) =coalesce(SourceTT,0)
				group by candidateId,DATE(shiftStartDateTime)  
			 )a group by candidateId having count(shiftday)=sum(tt)
	)a left join candidateUnavailability cu on  cu.candidateId=a.candidateId AND CONCAT(cu.unavailableDate,' ',cu.endTime)>shift_StartDateTime AND CONCAT(cu.unavailableDate,' ',cu.startTime)<shift_EndDateTime AND cu.isDeleted=0
       inner join  candidateShiftOffer so on so.candidateId=a.candidateId
	   left join candidateUnavailability cus on  cus.candidateId=candidate_Id AND CONCAT(cus.unavailableDate,' ',cus.endTime)>so.shiftStartDateTime AND CONCAT(cus.unavailableDate,' ',cus.startTime)<so.shiftEndDateTime AND cus.isDeleted=0
        INNER JOIN scUser scu ON so.candidateId=scu.userId
		LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		WHERE so.candidateId<>candidate_Id AND so.shiftOfferId<>shiftOffer_Id AND so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=jobSubClassification_Id 
		AND DATE(so.shiftStartDateTime)=req_date AND DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)<so.shiftEndDateTime
		AND so.status IN (2,9,10,15,16,17,20,21,24,25,26,27,28,29,48,61)
		AND so.sourceModule='ROSTER'
		AND scu.isDeleted=0 AND so.isDeleted=0 and cu.candidateId is null and cus.candidateId is null   
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAvailableCandidatesByShiftTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAvailableCandidatesByShiftTime`(
 in businessSite_Id bigint(20)
,in department_Id bigint(20)
,in subClassification_Id bigint(20)
,in shift_StartDateTime datetime
,in shift_EndDateTime datetime
,in manager_Id bigint(20)
,in language_Id bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 07/03/2016
 Description : Get available candidates for shift templates
*/


set @candidate_Id=0
set @shiftOffer_Id=0 
set @totalWorkHours=0.0
set @totalAssignedWorkHours=0.0

	SELECT DISTINCT crd.candidateId
		,CONCAT(scu.firstName,' ',scu.lastName) AS candidateName
		,upi.imagePath
		,@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(crd.candidateId,DATE(shift_StartDateTime),businessSite_Id,manager_Id) AS totalAcceptedHours
		,CheckCandidateOverTime(etl.employmentType,@totalWorkHours,businessSite_Id,department_Id,bss.useOvertimeIndicator) AS isOverTimeForAcceptedHours
		,scu.firstName
		,scu.lastName
		,@totalAssignedWorkHours:=ROUND(GetCandidateTotalAssignedHoursForWeekByDate(crd.candidateId,DATE(shift_StartDateTime),crd.businessSiteId,manager_Id),2) AS totalAssignedWorkHours
		,CheckCandidateOverTime(etl.employmentType,@totalAssignedWorkHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAssignedHours
		,(select shiftStartDateTime from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36,60) order by so.shiftStartDateTime limit 1) as nextShiftStartDateTime
		,(select shiftEndDateTime from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36,60) order by so.shiftStartDateTime limit 1) as nextShiftEndDateTime
		,cg.candidateStatus
		,uc.mobilePhone
		,scu.encryptionKey
		,ROUND(GetCandidateTotalExperience(crd.candidateId),1) AS seniority
		,jp.employmentTypeId
		,etl.employmentType
        ,CheckCandidateRosterClash(crd.candidateId,@shiftOffer_Id,shift_StartDateTime,shift_EndDateTime) as isRosterClash
		,CheckCandidateUnavailability(crd.candidateId,@shiftOffer_Id,shift_StartDateTime,shift_EndDateTime) as isUnavailable
        ,(select isFlexibleShiftTime from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36,60) order by so.shiftStartDateTime limit 1) as nextShiftFlexibleShiftTime
		,(select shiftEndTimeType from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36,60) order by so.shiftStartDateTime limit 1) as nextShiftEndTimeType
		,(select shiftEndTimeValue from candidateShiftOffer so
			where crd.candidateId=so.candidateId and so.shiftStartDateTime> shift_StartDateTime and so.isDeleted=0
			and so.status NOT IN (3,10,19,33,36,60) order by so.shiftStartDateTime limit 1) as nextShiftEndTimeValue
    FROM vwCandidateRosterDetails crd
	INNER JOIN scUser scu ON crd.candidateId=scu.userId
    left join userContact uc on uc.userID=scu.userId and uc.isDeleted=0
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
	INNER JOIN businessSettings bss ON crd.businessSiteId=bss.businessSiteId AND crd.departmentId=bss.departmentId
	left join candidateGiveAwayRequests cg on shiftOfferId=@shiftOffer_Id and cg.candidateId=crd.candidateId   and cg.status not in(21)
    left join candidateShiftOffer so on so.shiftOfferId=@shiftOffer_Id and so.candidateId=crd.candidateId
    WHERE  case when so.status in(1,3,10,12,38,40,42,46,47,60,62,63) then 1=1 else  crd.candidateId<>@candidate_Id end 
		AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=subClassification_Id 
		AND etl.languageId=language_Id AND scu.isDeleted=0
      	and crd.empEndDate>=date(shift_StartDateTime) and crd.empStartDate <= date(shift_StartDateTime)
        order by coalesce(cg.candidateStatus,4) ,coalesce(cg.updatedOn,cg.createdOn) desc ,scu.firstName
        

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAvailableCandidatesForOfflineSync` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAvailableCandidatesForOfflineSync`(
 in shiftOffer_Id varchar(5000)
,in language_Id bigint(20)
,in manager_Id bigint(20) 
)
BEGIN
/*
 Author: James
 Date  : 01/03/2016
 Description : Get available candidates for mobile offline Mode
*/
	SET @totalWorkHours=0.0
	set @totalAssignedWorkHours=0.0
    
	SELECT DISTINCT
		 so.shiftOfferId
        ,crd.candidateId    
		,scu.firstName
		,scu.lastName
		,upi.imagePath
		,(select shiftStartDateTime from candidateShiftOffer so1
			where crd.candidateId=so1.candidateId and so1.shiftStartDateTime> so.shiftStartDateTime and so.isDeleted=0
			and so1.status NOT IN (3,10,19,33,36) order by so1.shiftStartDateTime limit 1) as nextShiftStartDateTime
		,(select shiftEndDateTime from candidateShiftOffer so1
			where crd.candidateId=so1.candidateId and so1.shiftStartDateTime> so.shiftStartDateTime and so.isDeleted=0
			and so1.status NOT IN (3,10,19,33,36) order by so1.shiftStartDateTime limit 1) as nextShiftEndDateTime
	    ,cg.candidateStatus
		,uc.mobilePhone
		,scu.encryptionKey
		,ROUND(GetCandidateTotalExperience(crd.candidateId),1) AS seniority
		,jp.employmentTypeId
		,etl.employmentType 
		,@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(crd.candidateId,DATE(so.shiftStartDateTime),crd.businessSiteId,manager_Id) AS totalAcceptedHours
		,CheckCandidateOverTime(etl.employmentType,@totalWorkHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAcceptedHours
		,@totalAssignedWorkHours:=ROUND(GetCandidateTotalAssignedHoursForWeekByDate(crd.candidateId,DATE(so.shiftStartDateTime),crd.businessSiteId,manager_Id),2) AS totalAssignedWorkHours
		,CheckCandidateOverTime(etl.employmentType,@totalAssignedWorkHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAssignedHours
        ,CheckCandidateRosterClash(crd.candidateId,so.shiftOfferId,so.shiftStartDateTime,so.shiftEndDateTime) as isRosterClash
		,CheckCandidateUnavailability(crd.candidateId,so.shiftOfferId,so.shiftStartDateTime,so.shiftEndDateTime) as isUnavailable
		,so.shiftStartDateTime
        ,so.shiftEndDateTime
        ,so.isFlexibleShiftTime
        ,so.shiftEndTimeType
		,so.shiftEndTimeValue
        ,(select isFlexibleShiftTime from candidateShiftOffer so1
			where crd.candidateId=so1.candidateId and so1.shiftStartDateTime> so.shiftStartDateTime and so.isDeleted=0
			and so1.status NOT IN (3,10,19,33,36) order by so1.shiftStartDateTime limit 1) as nextShiftFlexibleShiftTime
        ,(select shiftEndTimeType from candidateShiftOffer so1
			where crd.candidateId=so1.candidateId and so1.shiftStartDateTime> so.shiftStartDateTime and so.isDeleted=0
			and so1.status NOT IN (3,10,19,33,36) order by so1.shiftStartDateTime limit 1) as nextShiftEndTimeType
		,(select shiftEndTimeValue from candidateShiftOffer so1
			where crd.candidateId=so1.candidateId and so1.shiftStartDateTime> so.shiftStartDateTime and so.isDeleted=0
			and so1.status NOT IN (3,10,19,33,36) order by so1.shiftStartDateTime limit 1) as nextShiftEndTimeValue
    FROM vwCandidateRosterDetails crd
	INNER JOIN scUser scu ON crd.candidateId=scu.userId
    left join userContact uc on uc.userID=scu.userId and uc.isDeleted=0
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
	INNER JOIN businessSettings bss ON crd.businessSiteId=bss.businessSiteId AND crd.departmentId=bss.departmentId
	inner join candidateShiftOffer so on find_in_set(so.shiftOfferId,shiftOffer_Id) 
		and crd.businessSiteId=so.businessSiteId AND crd.departmentId=so.departmentId AND crd.jobSubClassificationId=so.subClassificationId 
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id
	left join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId and cg.candidateId=crd.candidateId   and cg.status not in(21)
	WHERE  case when so.status in(1,3,12,38,40,42,46,47,60,62,63) then 1=1 else  crd.candidateId<>so.candidateId end   AND scu.isDeleted=0
	-- AND CheckCandidateAvailability(crd.candidateId,so.shiftOfferId,so.shiftStartDateTime,so.shiftEndDateTime)=1 
	and crd.empEndDate>=date(so.shiftStartDateTime) and crd.empStartDate <= date(so.shiftStartDateTime)
	order by so.shiftOfferId,coalesce(cg.candidateStatus,4) ,coalesce(cg.updatedOn,cg.createdOn) desc ,scu.firstName
	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAvailableCandidatesToSendOffers` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAvailableCandidatesToSendOffers`(
IN shiftOffer_Id BIGINT(20),
in businessSite_Id BIGINT(20),
in jobSubClassification_Id BIGINT(20),
in department_Id BIGINT(20),
in shift_StartDateTime DATETIME,
in shift_EndDateTime DATETIME,
in shift_status varchar(50)
,in created_By	bigint

)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get available candidates to send offers
*/
	DECLARE candidateUser_Id BIGINT(20)
	DECLARE action_by BIGINT(20)
	DECLARE old_status_Id TINYINT(4)
	DECLARE old_status varchar(50)
	DECLARE timeDiff_InMinutes INT(11)
    declare business_Name varchar(500) 	
	DECLARE isCandidateAckReq BIT
    DECLARE is_TimeSheetSubmitRequired BIT
    declare cand_id bigint(20)
    SELECT candidateAcknowledgeReq,approveHoursReq INTO isCandidateAckReq,is_TimeSheetSubmitRequired FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
    
    if shiftOffer_Id=0 and shift_status='STAFFINVITED' then
			INSERT INTO candidateShiftOffer(candidateId,jobProfileId,departmentId,subClassificationId,
				businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,STATUS,sourceModule,createdBy,createdOn, isShiftAcceptRequired, isTimeSheetSubmitRequired)
			VALUES(0,NULL,department_Id,jobSubClassification_Id,
				businessSite_Id,shift_StartDateTime,shift_EndDateTime,shift_StartDateTime,shift_EndDateTime,40,'ROSTER',created_By,utc_timestamp(), isCandidateAckReq, is_TimeSheetSubmitRequired)
			IF ROW_COUNT() > 0 THEN
				set shiftOffer_Id= last_insert_id() 
			end if
    end if
    
	SELECT so.candidateId,so.createdBy,so.status,tz.timeDiffInMinutes ,b.businessName
	INTO candidateUser_Id,action_by,old_status_Id,timeDiff_InMinutes ,business_Name
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
    inner join business b on bs.businessId=b.businessId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE shiftOfferId=shiftOffer_Id
	 
select statusName  into old_status FROM statusLookup where statusId=old_status_Id

	IF DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)<shift_EndDateTime THEN
    
		IF shift_status='SICKINVITED' THEN
			IF old_status_Id=10 THEN
				INSERT INTO candidateGiveAwayRequests(shiftOfferId,candidateId,STATUS,candidateStatus,createdBy,createdOn)
				SELECT DISTINCT shiftOffer_Id,crd.candidateId,39,1,created_By,UTC_TIMESTAMP()
				FROM vwCandidateRosterDetails crd
				WHERE crd.candidateId<>candidateUser_Id AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=jobSubClassification_Id  
					AND CheckCandidateAvailability(crd.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime)=1
					IF ROW_COUNT() = 1 THEN   
						set cand_id=(select candidateId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id limit 1) 
					else 
						set cand_id=0
					end if
            
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = action_by , `updatedOn` = UTC_TIMESTAMP() , 
					`status` = 38 ,candidateId=cand_id
				WHERE `shiftofferId`=shiftOffer_Id
				
				SELECT DISTINCT crd.candidateId,ud.deviceTypeID,ud.deviceToken,scu.RoleCategoryId,shift_status AS STATUS,shift_StartDateTime,shift_EndDateTime,business_Name
				FROM vwCandidateRosterDetails crd
				INNER JOIN scUser scu ON crd.candidateId=scu.userId
				LEFT JOIN userDevice ud ON crd.candidateId=ud.userId AND ud.isDeleted=0
				WHERE crd.candidateId<>candidateUser_Id AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=jobSubClassification_Id 
					AND CheckCandidateAvailability(crd.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime)=1
			ELSE
				SELECT candidateUser_Id,NULL,NULL,2,old_status
			END IF
		ELSEIF shift_status='STAFFINVITED' THEN
			INSERT INTO candidateGiveAwayRequests(shiftOfferId,candidateId,STATUS,candidateStatus,createdBy,createdOn)
			SELECT DISTINCT shiftOffer_Id,crd.candidateId,41,1,created_By,UTC_TIMESTAMP()
			FROM vwCandidateRosterDetails crd
			WHERE crd.candidateId<>candidateUser_Id AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=jobSubClassification_Id  
				AND CheckCandidateAvailability(crd.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime)=1
			IF ROW_COUNT() = 1 THEN   
				set cand_id=(select candidateId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id limit 1) 
            else 
				set cand_id=0
            end if
            
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = action_by , `updatedOn` = UTC_TIMESTAMP() , 
					`status` = 40, `isNotified` = 1,candidateId=cand_id
				WHERE `shiftofferId`=shiftOffer_Id 
			SELECT DISTINCT crd.candidateId,ud.deviceTypeID,ud.deviceToken,scu.RoleCategoryId,shift_status AS STATUS,shift_StartDateTime,shift_EndDateTime,business_Name
			FROM vwCandidateRosterDetails crd
			INNER JOIN scUser scu ON crd.candidateId=scu.userId
			LEFT JOIN userDevice ud ON crd.candidateId=ud.userId AND ud.isDeleted=0
			WHERE crd.candidateId<>candidateUser_Id AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=jobSubClassification_Id 
				AND CheckCandidateAvailability(crd.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime)=1
		END IF
	ELSE
		SELECT candidateUser_Id,NULL,NULL,2,'TIMEELAPSED'  AS STATUS
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetAwardGradeLevel` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetAwardGradeLevel`(
 in classification_Id bigint(20)
,in language_Id int
)
BEGIN
/*
 Author: James
 Date  : 17/05/2016
 Description : Get Award & Grade For a Classification
*/


select 
     jca.jobClassificationId
	,jca.awardId
	,al.awardName
	,ag.gradeLevelId
	,gl.gradeLevel 
from jobClassificationAward  jca 
left join awardGradeLevel ag on jca.awardId=ag.awardId
left join awardLocale al on al.awardId=jca.awardId and al.languageId=language_Id
left join gradeLevelLocale gl on gl.gradeLevelId=ag.gradeLevelId and gl.languageId=language_Id
where jca.jobClassificationId=coalesce(classification_Id,jca.jobClassificationId) 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBeaconBusinessSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBeaconBusinessSite`(
 IN beacon_Ids varchar(1000)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 07/06/2016
 Description : GetBeaconBusinessSite
 call est_skillsconnect_dev.GetBeaconBusinessSite('6,7')
*/
	
    SELECT b.beaconId,
		bbs.businessSiteId,
		bs.siteName
    FROM beacon b
    LEFT JOIN beaconBusinessSite bbs ON bbs.beaconId = b.beaconId
	LEFT JOIN businessSite bs ON bs.businessSiteId=bbs.businessSiteId AND bs.isDeleted=0
    WHERE b.isdeleted=0 AND FIND_IN_SET(b.beaconId, beacon_Ids)
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBeaconDepartment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBeaconDepartment`(
 IN beacon_Ids varchar(1000)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 07/06/2016
 Description : GetBeaconDepartment
 call est_skillsconnect_dev.GetBeaconDepartment('6,7')
*/
	
    SELECT b.beaconId,
		bed.departmentId,
        bd.departmentName
    FROM beacon b
    LEFT JOIN beaconDepartment bed on bed.beaconId =  b.beaconId
	LEFT JOIN businessDepartment bd ON bd.departmentId=bed.departmentId AND bd.isDeleted=0
    WHERE b.isdeleted=0 AND FIND_IN_SET(b.beaconId, beacon_Ids)
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBeaconDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBeaconDetails`(
  IN manager_Id BIGINT(20)
  ,IN businessSite_Ids varchar(1000)
  ,IN department_Ids varchar(1000)
  ,IN is_Registered BIT(1)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 17/05/2016
 Description : GetBeaconDetails
 call est_skillsconnect_dev.GetBeaconDetails(1369,null,null,1)
*/
	declare isAll tinyint(4)
    declare notAll tinyint(4)
    
	set isAll =1
    set notAll = 0
	if is_Registered=1 then
		SELECT distinct b.beaconId,
			b.UUID,
			b.beaconName,
			b.major,
			b.minor,
			b.isEnabled,
			bss.proximityOfTouchPoint,
			bss.isEnabledBeaconGPS,
			bss.resetGPSPosition,
			bss.isEnabledStaffGPS,
			bss.staffGPSCheckPoints,
			bss.isAutoClockOffStaff,
			bss.isTimeSheetApprovalRequired,
			bss.isAllowEarlyStart,
			bss.allowMinTimeBeforeShiftStart,
			bss.allowMaxTimeBeforeShiftStart,
			bss.isAllowLateStart,
			bss.allowMinTimeAfterShiftStart,
			bss.allowMaxTimeAfterShiftStart,
			bsy.GPSLocationDisparityCount,
			bsy.clockOnCount,
			bsy.manualSubmittedTimesheets
            ,(SELECT if(bbs.businessSiteId is null,isAll,notAll) FROM beaconBusinessSite bbs where bbs.beaconId = b.beaconId limit 1) as isAllBusinessSite 
            ,(SELECT if(bbd.departmentId is null,isAll,notAll) FROM beaconDepartment bbd where bbd.beaconId = b.beaconId limit 1) as isAllDepartment
            ,(SELECT if(bsc.subClassificationId is null,isAll,notAll) FROM beaconSubClassification bsc where bsc.beaconId = b.beaconId limit 1) as isAllSubClassification
            ,b.isRegistered
		from userRoleBusinessSite urbs 
		INNER JOIN userRole ur ON urbs.userRoleId = ur.userRoleId AND ur.isDeleted = 0 AND ur.userId=manager_Id
		INNER JOIN businessSite bs on bs.businessSiteId=urbs.businessSiteId and bs.isDeleted=0
		INNER JOIN beacon b on b.businessId=bs.businessId and b.isDeleted=0
		INNER JOIN businessDepartment bd on bd.businessId=b.businessId 
		INNER JOIN beaconDepartment bbd on bbd.beaconId=b.beaconId and coalesce(bbd.departmentId,bd.departmentId)=bd.departmentId
		INNER JOIN beaconBusinessSite bbs on  b.beaconId=bbs.beaconId and coalesce(bbs.businessSiteId,urbs.businessSiteId)=urbs.businessSiteId
		LEFT JOIN beaconSettings bss on bss.beaconId = b.beaconId
			LEFT JOIN beaconSummary bsy on bsy.beaconId = b.beaconId
		where bs.businessSiteId=coalesce(businessSite_Ids,bs.businessSiteId) 
		and bd.departmentId = coalesce(department_Ids,bd.departmentId) and b.isRegistered=1
        
	else
		
        SELECT distinct b.beaconId,
			b.UUID,
			b.beaconName,
			b.major,
			b.minor,
			b.isEnabled,
			bss.proximityOfTouchPoint,
			bss.isEnabledBeaconGPS,
			bss.resetGPSPosition,
			bss.isEnabledStaffGPS,
			bss.staffGPSCheckPoints,
			bss.isAutoClockOffStaff,
			bss.isTimeSheetApprovalRequired,
			bss.isAllowEarlyStart,
			bss.allowMinTimeBeforeShiftStart,
			bss.allowMaxTimeBeforeShiftStart,
			bss.isAllowLateStart,
			bss.allowMinTimeAfterShiftStart,
			bss.allowMaxTimeAfterShiftStart,
			bsy.GPSLocationDisparityCount,
			bsy.clockOnCount,
			bsy.manualSubmittedTimesheets
            ,notAll as isAllBusinessSite 
            ,notAll as isAllDepartment
            ,notAll as isAllSubClassification
            ,b.isRegistered
		from userRoleBusinessSite urbs 
		INNER JOIN userRole ur ON urbs.userRoleId = ur.userRoleId AND ur.isDeleted = 0 AND ur.userId=manager_Id
		INNER JOIN businessSite bs on bs.businessSiteId=urbs.businessSiteId and bs.isDeleted=0
		INNER JOIN beacon b on b.businessId=bs.businessId and b.isDeleted=0
		LEFT JOIN beaconSettings bss on bss.beaconId = b.beaconId
			LEFT JOIN beaconSummary bsy on bsy.beaconId = b.beaconId
		        where b.isRegistered = 0
        
	end if
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBeaconDetailsForCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBeaconDetailsForCandidate`(
 in candidate_UserId bigint(20)
,in start_Date date
,in end_Date  date
)
BEGIN

/*
 Author: James
 Date  : 08/06/2016
 Description : Get Beacon details for candidate 
 call est_skillsconnect_dev.GetBeaconDetailsForCandidate(2242, '2016-06-10', '2016-06-20')
*/

	select 
		 b.beaconId
		,so.businessSiteId
		,so.departmentId
		,so.subClassificationId 
		,b.UUID
		,b.beaconName
		,b.major
		,b.minor
		,b.isEnabled
		,b.isRegistered
		,beas.proximityOfTouchPoint
		,beas.isEnabledBeaconGPS
		,beas.resetGPSPosition
		,beas.isEnabledStaffGPS
		,beas.staffGPSCheckPoints
		,beas.isAutoClockOffStaff
		,beas.isTimeSheetApprovalRequired
		,beas.isAllowEarlyStart
		,beas.allowMinTimeBeforeShiftStart
		,beas.allowMaxTimeBeforeShiftStart
		,beas.isAllowLateStart
		,beas.allowMinTimeAfterShiftStart
		,beas.allowMaxTimeAfterShiftStart
	from (
			select distinct  businessSiteId,departmentId,subClassificationId from candidateShiftOffer 
			where candidateId=candidate_UserId and isDeleted=0 and date(shiftStartDateTime) between start_Date and end_Date and status NOT IN (10,19,33,36)
			union 
			select distinct  businessSiteId,departmentId,subClassificationId from candidateShiftOffer so inner join candidateGiveAwayRequests cg 
			on so.shiftOfferId=cg.shiftOfferId and so.isDeleted=0
			where cg.candidateId=candidate_UserId and date(shiftStartDateTime) between start_Date and end_Date and so.status NOT IN (10,19,33,36)
	)so inner join businessSite bs on so.businessSiteId=bs.businessSiteId and bs.isDeleted=0
	inner join beacon b on b.businessId=bs.businessId and b.isDeleted=0
	inner join beaconBusinessSite bbs on bbs.beaconId=b.beaconId and  so.businessSiteId=coalesce(bbs.businessSiteId ,so.businessSiteId)
	inner join beaconDepartment bd  on bbs.beaconId=bd.beaconId and so.departmentId=coalesce(bd.departmentId ,so.departmentId)
	inner join beaconSubClassification bsc on bsc.beaconId=bd.beaconId and so.subClassificationId=coalesce(bsc.subClassificationId,so.subClassificationId)
	inner join beaconSettings beas on beas.beaconId=b.beaconId
	order by b.beaconId
	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBeaconGPSLocation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBeaconGPSLocation`(
 IN beacon_Id varchar(5000)
)
BEGIN

/*
 Author: Sravanthi M
 Date  : 19/05/2016
 Description : GetBeaconGPSLocation
 call est_skillsconnect_dev.GetBeaconGPSLocation(6)
*/

    SELECT beaconId,
		latitude,
		longitude
        from beaconGPSLocation WHERE find_in_set(beaconId , beacon_Id)
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBeaconSubClassification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBeaconSubClassification`(
 IN beacon_Ids varchar(1000)
 ,IN language_Id int(11)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 07/06/2016
 Description : GetBeaconSubClassification
 call est_skillsconnect_dev.GetBeaconSubClassification('6,7',264)
*/
	
    SELECT b.beaconId,
        bsc.subClassificationId,
        jscl.jobSubClassification
    FROM beacon b
    LEFT JOIN beaconSubClassification bsc on bsc.beaconId =  b.beaconId
	LEFT JOIN jobSubClassificationLocale jscl ON jscl.jobSubClassificationId=bsc.subClassificationId 
		AND jscl.languageId=language_Id
    WHERE b.isdeleted=0 AND FIND_IN_SET(b.beaconId, beacon_Ids)
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBeaconUUID` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBeaconUUID`(
 IN business_Id bigint(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 17/05/2016
 Description : Get list of business BeaconUUIDs
 call est_skillsconnect_dev.GetBeaconUUID(193)
*/
	
    SELECT distinct b.UUID,b.businessId
    FROM beacon b
    INNER JOIN business bn on bn.businessId =  b.businessId and bn.isDeleted=0
    WHERE bn.businessId=business_Id AND b.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBreakTimesForShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBreakTimesForShift`(
IN shiftOffer_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get break times for shift
*/
	SELECT shiftbreakId,
	shiftOfferId,
	startTime,
	endTime
	FROM candidateShiftBreaks
	WHERE shiftOfferId=shiftOffer_Id AND isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBreakTimesForTimesheet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBreakTimesForTimesheet`(
in timesheet_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get break times for timesheet
*/
	SELECT ctb.startTime AS timesheetBreakStartTime,
	ctb.endTime AS timesheetBreakEndTime,ctb.timesheetBreakId
	FROM candidateTimesheetBreak ctb
	WHERE ctb.timesheetId=timesheet_Id AND ctb.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBuinessFeature` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBuinessFeature`(IN business_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Get Business Feature
 call GetBuinessFeature(1)
*/

	select bf.featureId
	from businessFeature bf
    where businessId = business_Id and bf.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusiness` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusiness`( IN Business_Id bigint(20)
 , IN BusinessStatus tinyint(4)
 , IN language_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Business Deatails
 call GetBusiness (1, null)
*/
	
	
select 
			 b.businessId  
			,businessRegId  
			,businessName    
			,timeSheetWeekEndDayId  
			,weekEndDay
			,b.phone 
			,b.addressLine1
			,b.addressLine2 
			,b.cityId 
			,cl.cityName
			,b.stateId 
			,stl.stateName
			,b.countryId 
			,col.countryName
			,b.zipCode 
			,bs.businessSiteId
            ,b.areaOfExpertiseId
            ,ae.areaOfExpertise
            ,b.businessUrl
            ,b.businessDescription
            ,b.fax
            ,b.privacyPolicy
            ,b.termsAndCondition
            ,bi.businessIndustryID
            ,bi.industryId
            ,il.industryName 
            ,bi.isOther
            ,bi.otherIndustrydesc
            ,b.timeZoneId
			,timeZoneName 
			,timeZoneFormat
            ,b.jobClassificationId
			,b.otherJobClassification
            ,jcl.jobClassification
		 from business b
         left join timeSheetweekEndLocale tsl on b.timeSheetWeekEndDayId=tsl.weekEndDayId and tsl.languageId=language_Id
         left join cityLocale cl on cl.cityId=b.cityId and cl.languageId=language_Id		 
         left join stateLocale stl	on stl.stateId=b.stateId and stl.languageId=language_Id		 
         left join countryLocale col on col.countryId=b.countryId and col.languageId=language_Id
		 left join businessSite bs on bs.businessId = b.businessId and parentBusinessSiteId is null
         left join areaOfExpertiseLocale ae on b.areaOfExpertiseId=ae.areaOfExpertiseId and ae.languageId=language_Id
         left join businessIndustry bi on b.businessId=bi.businessId               
         left join industryLocale il on il.industryID=bi.industryID and il.languageId=language_Id
         left join timeZoneLocale tz on b.timeZoneId = tz.timeZoneId  and tz.languageId=language_Id
         left join jobClassificationLocale jcl on b.jobClassificationId=jcl.jobClassificationId and jcl.languageId=language_Id
		 where b.status = COALESCE(BusinessStatus,b.status)  and b.businessId = COALESCE(business_Id,b.BusinessId) and b.isDeleted =0
		  	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessAllowance`(
  IN	allowance_Name	varchar(200)
 ,IN	business_Id	bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Business Allowance
 call GetBusinessAllowance(null, 1)
*/

select allowanceId, allowanceName 
from businessAllowance 
where businessId = business_Id 
and allowanceName like coalesce(concat("%",allowance_Name,"%"),allowanceName) and isDeleted = 0

	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessBeacon` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessBeacon`(
  IN manager_Id BIGINT(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 17/05/2016
 Description : GetBusinessBeacon
 call est_skillsconnect_dev.GetBusinessBeacon(1369)
*/
	SELECT distinct b.beaconId,
			b.UUID,
			b.beaconName,
			b.major,
			b.minor,
            b.isRegistered
            from userRoleBusinessSite urbs 
		INNER JOIN userRole ur ON urbs.userRoleId = ur.userRoleId AND ur.isDeleted = 0 AND ur.userId=manager_Id
		INNER JOIN businessSite bs on bs.businessSiteId=urbs.businessSiteId and bs.isDeleted=0
		INNER JOIN beacon b on b.businessId=bs.businessId
		where b.isDeleted=0
        
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessClaimsetClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessClaimsetClaim`(
 IN businessSite_Id bigint(20) 
,IN claimSet_Id bigint(20)  
,IN language_Id bigint(20)  
)
BEGIN


	select bcs.claimId 
			  ,cn.claimName
			  ,sc.claimSetName
			  ,c.parentClaimId
			  ,pcn.claimName as parentClaimName
	   from businessSiteClaimsetClaim bcs 
	   left join scClaimName cn on cn.claimId = bcs.claimId and cn.languageId = language_Id
	   left join scClaimSet sc on bcs.claimSetId = sc.claimSetId
	   left join scClaim c on bcs.claimId = c.claimId
	   left join scClaimName pcn on pcn.claimId = c.parentClaimId and cn.languageId = language_Id
	   where bcs.claimSetId=claimSet_Id and bcs.businessSiteId =businessSite_Id

  
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessCostCenter` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessCostCenter`( IN Business_Id bigint(20) )
BEGIN 


			
	select  * from businessCostCentre 
		where businessId =  Business_Id and is_Deleted=0
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessCostCenterList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessCostCenterList`(
in businessSite_Id BIGINT(20))
BEGIN
	select bcc.costCentreId,bcc.businessId,bcc.costCentreName,bcc.description
	from businessCostCentre bcc
	inner join businessSite bs on bcc.businessId=bs.businessId
	where bs.businessSiteId=businessSite_Id AND bs.isDeleted=0 and bcc.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessCostCentre` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessCostCentre`(
IN business_Id bigint
)
BEGIN

/*
 Author			: Tijo
 Date  			: 21/02/2015
 Description 	:  call GetBusinessCostCentre(1)
*/

		select  costCentreId,costCentreName 
		from businessCostCentre
		where businessId=business_Id 
		and isDeleted=0 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessCostCentreList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessCostCentreList`(
	IN business_Id bigint
,   IN costCentre_Name varchar(50)
,	IN start_record bigint(20)  
,	IN no_of_records int(11) 
)
BEGIN

/*
Author: James
Date  : 17/02/2015
Description : Get business Cost Centre
call est_skillsconnect.GetBusinessCostCentreList(1, 'test', 0, 10)

*/



 select * ,FOUND_ROWS() as TotalRecords  
	from(
		select  costCentreId,costCentreName,description 
		from businessCostCentre
		where businessId=business_Id and costCentreName like concat("%",costCentre_Name,"%")
		and isDeleted=0 
	)a
	LIMIT  no_of_records  OFFSET  start_record 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessDepartment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessDepartment`(
  IN	department_Name	varchar(100)
, IN	business_Id	bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 17/12/2014
 Description : Get Business Department
 call est_skillsconnect.GetBusinessDepartment(null, 1)
 */
    
    
	select departmentId,departmentName from businessDepartment
	where businessId=business_Id
	and   departmentName like concat("%", coalesce(department_Name, departmentName), "%")  
	and isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinesses` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinesses`()
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get all businesses
*/	
	SELECT businessId,businessName
	FROM business 
	WHERE isDeleted=0
	ORDER BY businessName
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessFunction` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessFunction`(
 IN RoleCategory_Id tinyint
,in role_Id bigint
,in business_Id bigint
)
BEGIN

/*
 Author: Tijo
 Date  : 17/12/2014
 Description : Access rights for a role.
*/

	
			select businessFunctionId 
			from roleBusinessFunction  
			where roleId=role_Id 
            and businessId= business_Id and roleCategoryId = RoleCategory_Id and isDeleted=0
  
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessFunctionName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessFunctionName`(
 IN RoleCategory_Id tinyint
,in role_Id bigint
,in business_Id bigint
,IN language_id int
)
BEGIN

/*
 Author: Tijo
 Date  : 17/12/2014
 Description :  Access rights name for a role replaced with Group Name Term.
*/

declare groupName nvarchar(1000)
set groupName = (select case when isOtherGroupName=1 then otherGroupName else gl.groupName  end as groupName
				from business b left join groupNameLocale gl on b.groupNameId = gl.groupNameId and languageId = language_id
				where businessId = business_Id)
		
			
	select businessFunctionId
		, REPLACE(businessFunctionName, 'Site', groupName) as businessFunctionName
        , parentBusinessFunctionId,isHeader 
	from(
		select distinct a.businessFunctionId,a.businessFunctionName,a.parentBusinessFunctionId,a.isHeader  from 
		(
			select bf.businessFunctionId , bfl.businessFunctionName, bf.parentBusinessFunctionId, bf.isHeader
			from businessFunction bf  
			inner join businessFunctionLocale bfl on bfl.businessFunctionId = bf.businessFunctionId and bfl.languageid =language_id
			where bf.isHeader =1
		) a
		inner join (
			select bf.businessFunctionId , bfl.businessFunctionName , bf.parentBusinessFunctionId, bf.isHeader
			from roleBusinessFunction rbf
			inner join businessFunction bf on rbf.businessFunctionId = bf.businessFunctionId
			inner join businessFunctionLocale bfl on bfl.businessFunctionId = rbf.businessFunctionId and bfl.languageid =264
			where  rbf.roleCategoryId = RoleCategory_Id  and rbf.roleId = role_Id
			and rbf.isDeleted =0 and rbf.businessId = business_Id
		)b on a.businessFunctionId =b.parentBusinessFunctionId
	) c
	
        


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessGrade` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessGrade`(
   IN	grade_Name	varchar(100)
 , IN	business_Id	bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 17/12/2014
 Description : Get Business Grade
 call est_skillsconnect.GetBusinessGrade(null, 1)
 */

	select gradeId,gradeName from businessGrade 
	where businessId=business_Id 
    and  gradeName like concat("%",coalesce(grade_Name,gradeName),"%")  
	and isDeleted=0 order by gradeName


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessGroupName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessGroupName`( IN business_Id bigint(20) , IN language_ID bigint)
BEGIN

/*
 Author: Tijo
 Date  : 17/12/2014
 Description : Group Term Name for Business.
*/
	select b.groupNameId
	,case when isOtherGroupName=1 then otherGroupName else gl.groupName  end as groupName
	,haveSite
    ,b.departmentGroupNameId
    ,dgl.departmentGroupName
    from business b
    left join groupNameLocale gl on b.groupNameId = gl.groupNameId and gl.languageId = language_ID
    left join departmentGroupNameLocale dgl on b.departmentGroupNameId = dgl.departmentGroupNameId and dgl.languageId = language_ID
    where businessId = business_Id

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessIndustry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessIndustry`( IN Business_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Business Industry 
*/
	

	select   BusinessIndustryID   
			,BusinessId  
			,bi.industryId  
			,i.name as industryName
			,isOther  
			,otherIndustrydesc
		from businessIndustry bi 
		left join industry i on bi.industryId = i.industryId
		where BusinessId = Business_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessLicense` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessLicense`(
  IN	license_Name	varchar(100)
, IN	business_Id	bigint(20) 
)
BEGIN

/*
 Author: James
 Date  : 17/12/2014
 Description : Get Business License
 call est_skillsconnect.GetBusinessLicense(null, 1)
*/
	select licenseId,licenseName from businessLicense
	where businessId= business_Id
	and licenseName like concat("%",coalesce(license_Name,licenseName),"%") 
	and isDeleted=0
    order by licenseName
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessPrefferedAgency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessPrefferedAgency`( 
 IN business_Site_Id bigint(20) 
,IN isPreferred bit
,IN site_Name nvarchar(1000)
,IN industry_ID int
,IN state_Id bigint
,IN city_ID bigint
,IN start_record int(11)
,IN no_of_records int(11)
,IN country_Id bigint
,IN language_Id bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Getting business preffered agency
 call est_skillsconnect.GetBusinessPrefferedAgency(null, 0, null,null ,null , null,0,5,null,264)
*/

	if (isPreferred =1) then
		select * ,FOUND_ROWS() as TotalRecords  from(
        select
			 sa.AgencySiteId 
			,sa.siteName
			,sa.isDeleted as siteDeleted
            ,sa.phone as AgencySitePhone
            ,il.industryName 
            ,ad.fileUrl
            ,cityName
            ,agencyUrl
            , 1 as isPreffered
            ,'' as email
            ,a.AgencyId
            , a.agencyName
            ,pa.businessSiteId
            , (select count(1) from businessSitePreferredAgency where isNotified=0 and businessSiteId=business_Site_Id ) as notificationCount
		from businessSitePreferredAgency pa 
		left join agencySite sa on pa.AgencySiteId = sa.AgencySiteId
        left join agency a on sa.agencyId = a.agencyId
        left join agencyDocument ad on ad.agencyId = a.agencyId and ad.documentTypeId =4
        left join agencyIndustry ai on ai.AgencyId = a.AgencyId
        left join industryLocale il on il.industryID=ai.industryID and il.languageId=language_Id
        left join cityLocale cl on a.cityId=cl.cityId  and cl.languageId=language_Id
		where businessSiteId  = business_Site_Id and pa.isDeleted=0 and sa.isDeleted=0 and a.isDeleted=0
        and a.agencyName like concat("%",coalesce(site_Name, a.agencyName),"%")
        and ai.industryId = coalesce(industry_ID, ai.industryId)
        and a.stateId = coalesce(state_Id, a.stateId)
        and a.cityId = coalesce(city_ID, a.cityId)
        and a.countryId  = coalesce(country_Id, a.countryId) 
        )a
		LIMIT no_of_records OFFSET start_record
    else
		select * ,FOUND_ROWS() as TotalRecords  from(
		select  
			 sa.AgencySiteId 
			,sa.siteName
			,sa.isDeleted as siteDeleted
			,sa.phone as AgencySitePhone
            ,il.industryName
            ,ad.fileUrl
            ,cityName
            ,agencyUrl
			,case when exists (select 1 from businessSitePreferredAgency pa where pa.AgencySiteId = sa.AgencySiteId and pa.businessSiteId  = business_Site_Id and pa.isDeleted=0) then 1 else 0 end as isPreffered
            ,'' as email
            ,a.AgencyId
            ,a.agencyName
            ,business_Site_Id as businessSiteId
            ,(select count(1) from businessSitePreferredAgency where isNotified=0 and businessSiteId=business_Site_Id ) as notificationCount
		from agency a 
		left join agencySite sa  on sa.agencyId = a.agencyId
        left join agencyDocument ad on ad.agencyId = a.agencyId and ad.documentTypeId =4
        left join agencyIndustry ai on ai.AgencyId = a.AgencyId
        left join industryLocale il on il.industryID=ai.industryID and il.languageId=language_Id
        left join cityLocale cl on a.cityId=cl.cityId    and cl.languageId=language_Id      
		where a.agencyName like concat("%",coalesce(site_Name, a.agencyName),"%")
        and ai.industryId = coalesce(industry_ID, ai.industryId)
        and a.stateId = coalesce(state_Id, a.stateId)
        and a.cityId = coalesce(city_ID, a.cityId) and a.isDeleted=0 
        and a.countryId  = coalesce(country_Id, a.countryId) and sa.isDeleted=0 
        )a
		LIMIT no_of_records OFFSET start_record
    end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessPublicLiability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessPublicLiability`( IN Business_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Business Public Liability
*/
	

	select   businessPublicLiabilityId    
			,policyProvider  
			,coverageAmt 
			,policyNo  
			,expiryDate
		from businessPublicLiability pl
		where businessId = Business_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessRoleClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessRoleClaim`(
 IN businessSite_Id bigint(20) 
,IN role_Id bigint(20)  
,IN language_Id bigint(20)  
,IN business_Id	bigint(20)
)
BEGIN

 
select brc.claimId
,cl.claimName
,brc.roleId
,c.parentClaimId
,cl2.claimName as parentClaimName 
from businessSiteRoleClaim brc 
left join scClaimLocale cl on cl.claimId = brc.claimId and cl.languageId=language_Id
left join scClaim c on c.claimId=cl.claimId
left join scClaimLocale cl2 on cl2.claimId =c.parentClaimId and cl2.languageId=language_Id
left join scRoleLocale rl on rl.roleId =brc.roleId and rl.languageId=language_Id
where brc.roleId=role_Id and brc.businessSiteId=coalesce(businessSite_Id,(select businessSiteId from businessSite where businessId=business_Id and parentBusinessSiteId is null))
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessShiftTemplatesByDay` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessShiftTemplatesByDay`(
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id BIGINT(20),
in week_dayId tinyint(1),
in manager_Id bigint(20),
in language_Id bigint(20) 
)
BEGIN
/*
 Author: James
 Date  : 26/04/2016
 Description : Get business shift templates by day name
*/
select   shiftTemplateId
		,bst.businessSiteId
        ,bst.departmentId
        ,bst.subClassificationId
        ,bst.weekDayId
        ,wdl.weekDay
        ,shiftStartTime
        ,shiftEndTime
        ,longBreak1Start
        ,longBreak2Start
        ,shortBreak1Start
        ,shortBreak2Start 
        ,isFlexibleShiftTime
        , shiftEndTimeType
		, shiftEndTimeValue
from userRoleBusinessSite urbs 
inner join userRole ur on ur.userRoleId=urbs.userRoleId and urbs.isDeleted=0 and ur.isDeleted=0 and ur.userId=manager_Id
inner join businessShiftTemplate bst on bst.businessSiteId=urbs.businessSiteId and bst.isDeleted=0
left join weekDayLocale wdl on wdl.weekDayId=bst.weekDayId and wdl.languageId=language_Id
where ur.userId=manager_Id and bst.businessSiteId=coalesce(businessSite_Id,bst.businessSiteId) 
and bst.departmentId=coalesce(department_Id,bst.departmentId) 
and bst.subClassificationId=coalesce(subClassification_Id,bst.subClassificationId)
and bst.weekDayId=coalesce(week_dayId,bst.weekDayId) 
order by bst.businessSiteId,bst.departmentId,bst.subClassificationId,bst.weekDayId,bst.shiftStartTime 
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSite`( IN businessSite_Id bigint(20) , IN language_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Business Site Names 
 call GetBusinessSite(1)
*/
	

	select
	 bs.businessSiteId  
	,bs.siteName  
    ,bs.fax
    ,bi.industryId
    ,il.industryName
    ,b.termsAndCondition
    ,b.privacyPolicy
	from businessSite bs 
    left join businessIndustry bi on bi.businessId=bs.businessId
    left join business b on b.businessId=bs.businessId
    left join industry i on bi.industryId=i.industryID
    left join industryLocale il	on il.industryID=i.industryID and il.languageId=language_Id
	where 
    (FIND_IN_SET( bs.businessSiteId , (select childHierarchy from businessSite where businessSiteId = businessSite_Id))  or businessSiteId = businessSite_Id )
     
    and bs.isDeleted =0
    order by siteName
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSiteCostCentreList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSiteCostCentreList`(
in businessSite_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get cost centre list for business site
*/
	SELECT bcc.costCentreId,bcc.businessId,bcc.costCentreName,bcc.description
	FROM businessCostCentre bcc
	INNER JOIN businessSite bs ON bcc.businessId=bs.businessId
	WHERE bs.businessSiteId=businessSite_Id AND bs.isDeleted=0 AND bcc.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSiteDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSiteDetails`( 
  IN Business_Id bigint(20) 
, IN businessSite_Id bigint(20)
, IN  language_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Business Site details
*/

	select
	 bs.businessSiteId  
	,bs.siteName  
	,bs.siteDescription   
	,COALESCE(bs.parentBusinessSiteId ,0) as parentBusinessSiteId
    ,bsp.siteName as parentSiteName
	,bs.countryId 
    ,col.countryName
	,bs.stateId  
    ,stl.stateName
	,bs.cityId  
    ,cl.cityName
	,bs.phone  
	,bs.addressLine1  
	,bs.addressLine2  
	,bs.fax  
	,bs.zipCode  
    ,b.businessId
    ,b.businessName
    ,b.businessUrl
    ,bd.fileUrl
    ,b.privacyPolicy
    ,b.termsAndCondition
    ,il.industryName
    ,'' as email
    ,ae.areaOfExpertise
	,bs.timeZoneId
	,timeZoneName 
	,timeZoneFormat
	from businessSite bs 
    left join business b on b.businessId=bs.businessId
    left join businessDocument bd on b.businessId=bd.businessId and bd.documentTypeId =4 and fileStatus=2
    left join businessIndustry bi on bi.businessId=b.businessId
    left join industryLocale il	on bi.industryID=il.industryID  and il.languageId=language_Id
    left join businessSite bsp on bs.parentBusinessSiteId = bsp.businessSiteId
    left join cityLocale cl on cl.cityId=bs.cityId  and cl.languageId=language_Id
    left join stateLocale stl on stl.stateId=bs.stateId  and stl.languageId=language_Id
    left join countryLocale col on col.countryId=bs.countryId  and col.languageId=language_Id 
	left join areaOfExpertiseLocale ae on b.areaOfExpertiseId =ae.areaOfExpertiseId  and ae.languageId = language_Id
    left join timeZoneLocale tz on bs.timeZoneId = tz.timeZoneId and tz.languageId=language_Id
    where bs.businessId = COALESCE(Business_Id,bs.businessId) 
    and bs.businessSiteId = COALESCE(businessSite_Id,bs.businessSiteId) and bs.isDeleted =0  --  and bs.parentBusinessSiteId is not null
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSiteHierarchy` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSiteHierarchy`(IN Business_Id bigint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Business Site Heirarchy
*/


SELECT businessSiteId,  siteName, siteDescription,  parentBusinessSiteId
FROM businessSite where businessId= Business_Id  and isDeleted =0 -- and parentBusinessSiteId is not null

	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSitePrefferedAgencySiteId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSitePrefferedAgencySiteId`( IN business_Site_Id bigint(20) )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Business site preffered agency site
*/

	select
	ba.AgencySiteId 
	from businessSitePreferredAgency ba 
	where businessSiteId  = business_Site_Id and ba.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSitesForBusiness` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSitesForBusiness`(
IN business_Id BIGINT(20))
BEGIN
	
	SELECT bs.businessSiteId,bs.siteName,tz.timeDiffInMinutes
	FROM businessSite bs
	INNER JOIN timeZone tz ON bs.timeZoneId=tz.timeZoneId
	WHERE bs.businessId=business_Id AND bs.isDeleted=0
	ORDER BY bs.siteName
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSiteTree` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSiteTree`(IN ParentBusinessSite_Id bigint)
BEGIN

/*Not using*/

	declare ChildId bigint
    declare LevelId smallint
    declare BusinessTree nvarchar(2000)
    
    set LevelId =1
    
	CREATE TEMPORARY TABLE  ChildBussinessSite
	(
	  Child_Id bigint,
	  Level_Id smallint,
	  Is_Checked bit
	)
    

	insert into ChildBussinessSite (Child_Id, Is_Checked, Level_Id)
	select businessSiteId,0,LevelId from businessSite where parentBusinessSiteId = ParentBusinessSite_Id  
    
	IF ROW_COUNT() > 0 THEN
	SET LevelId = LevelId + 1
	END IF
		
	WHILE (select count(1) from ChildBussinessSite where Is_Checked=0 > 0  ) DO
		
		SET ChildId = (SELECT Child_Id from ChildBussinessSite WHERE Is_Checked =0 LIMIT 1)
        
		
		insert into ChildBussinessSite (Child_Id, Is_Checked,Level_Id)
		select businessSiteId,0,LevelId from businessSite where parentBusinessSiteId = ChildId and isDeleted=0 
        
        IF ROW_COUNT() > 0 THEN
		SET LevelId = LevelId + 1
        END IF
        
		SET SQL_SAFE_UPDATES=0
		update ChildBussinessSite set Is_Checked =1 where Child_Id = ChildId
		SET SQL_SAFE_UPDATES=1
	END WHILE

	-- select group_concat(distinct Child_Id) as ChildBusinessSite  from ChildBussinessSite
	select Child_Id,Level_Id from ChildBussinessSite
	drop table ChildBussinessSite

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSiteUserDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSiteUserDetails`(
 IN businessSite_Id bigint(20)
,IN User_Name nvarchar(50)
,IN Role_Id bigint(20)
,IN language_id int
)
BEGIN

/*
 Author: Tijo
 Date  : 23/02/2015
 Description :  Business Site user list
 */


	select   u.userId
			,firstName 
			,middleName
			,lastName
            ,homePhone 
			,workPhone 
			,mobilePhone 
            ,addressLine1 
			,addressLine2 
            ,roleName
            ,ur.RoleId
            ,u.userUIId
            ,u.encryptionKey
	from scUser u 
	inner join userRole ur on u.userId = ur.userId
	inner join userRoleBusinessSite urbs on ur.userRoleId = urbs.userRoleId
    inner join roleInfoLocale srl on srl.roleId = ur.RoleId and languageId = language_id
    left join userContact uc on uc.userId = u.userId
    left join businessSite bs on bs.businessSiteId = urbs.businessSiteId
	where urbs.businessSiteId = businessSite_Id and ur.RoleId= coalesce(Role_Id,ur.RoleId)
	and ur.isDeleted =0 and urbs.isDeleted=0 and concat(coalesce(firstName,"") ," ",coalesce(middleName,"")," ",coalesce(lastName,"")) like concat("%",User_Name,"%")


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessSiteUsers` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessSiteUsers`(
 IN businessSite_Id bigint(20)
,IN User_Name nvarchar(50)
,IN Sort_by_Column nvarchar(50)
,IN Sort_Order nvarchar(10)
,in no_of_records int
,in start_record int
,IN language_Id	bigint(20)
,IN user_Id   bigint
 )
BEGIN

	/*
    
    Author: Tijo
	Date  : 24/11/2014
	Description : Get Business Site users 
    -- call GetBusinessSiteUsers(1, "", 'claimSetName', 'asc',10, 0,264)
    */

	set Sort_by_Column = concat(Sort_by_Column, "_", Sort_Order)
    
    select * ,FOUND_ROWS() as TotalRecords  from(
			 select  U.userid , firstName , middleName, lastName  ,cs.RoleId ,cs.RoleName ,bs.businessSiteId,bs.siteName,
			 U.emailId,
			 csbs.status  ,
			 csbs.userRoleId ,
			 userRoleBusinessSiteId as userRoleSiteId
               -- /*
             ,case when ucs.roleId = 3 then 
                (
					case when
					(
					select count(ur.userRoleId)
					from business b
					inner join businessSite bs1 on bs1.businessId = b.businessId
					inner join userRoleBusinessSite urbs on urbs.businessSiteId = bs1.businessSiteId
					inner join userRole ur on ur.userRoleId = urbs.userRoleId
					where b.isDeleted  = 0 and bs.isDeleted  = 0 and urbs.isDeleted  = 0 and ur.isDeleted  = 0 
					and bs1.businessSiteId = bs.businessSiteId and ur.roleId =3
					) > 1 then 1
					else 0 end
                )
				else 1 end as canChangeRoD
			   -- */
			from scUser U  
            inner join userRole ucs on U.userid=ucs.userID 
			inner join roleInfoLocale cs on ucs.RoleId=cs.RoleId and cs.languageId=language_Id and cs.isDeleted=0
			inner join userRoleBusinessSite csbs on ucs.userRoleId=csbs.userRoleId and csbs.isDeleted =0
			inner join businessSite bs on csbs.businessSiteId=bs.businessSiteId
            inner join (select distinct businessSiteId from userRoleBusinessSite urbs 
						inner join userRole ur on ur.userRoleId=urbs.userRoleId
						where ur.userId=user_Id and urbs.isDeleted=0 and ur.isDeleted=0 )bss
			on csbs.businessSiteId=bss.businessSiteId
			where bs.businessSiteId= coalesce(businessSite_Id,bs.businessSiteId)
		 	and concat(coalesce(U.firstName,"")," ",coalesce(U.LastName,"")) like concat("%",User_Name,"%") 
			and U.isDeleted=0 and bs.isDeleted=0 and csbs.isDeleted=0 and ucs.IsDeleted =0
            
      )a  order by case when Sort_by_Column="firstName_Asc" then firstName end asc , 
				  case when Sort_by_Column="firstName_Desc" then firstName end desc ,
                  case when Sort_by_Column="RoleName_Asc" then RoleName end asc , 
				  case when Sort_by_Column="RoleName_Desc" then RoleName end desc ,
                  case when Sort_by_Column="siteName_Asc" then siteName end asc , 
				  case when Sort_by_Column="siteName_Desc" then siteName end desc ,
                  case when Sort_by_Column="status_Asc" then status end asc , 
				  case when Sort_by_Column="status_Desc" then status end desc 
       Limit no_of_records offset start_record 
      

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessTimesheetsForWeek` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessTimesheetsForWeek`(
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20), 
IN language_Id BIGINT(20)
,IN weekStart_Date date
,IN weekEnd_Date	 date
)
BEGIN 
	DECLARE approve_Hours_Req BIT(1)
	 
	SELECT approveHoursReq INTO approve_Hours_Req FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
	
	SELECT DISTINCT so.candidateId,
	CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
	upi.imagePath,
	weekStart_Date,
	weekEnd_Date,
	bd.departmentName,
	jscl.jobSubClassification,
	etl.employmentType,
	ROUND(GetCandidateTotalHoursForSubClassification(so.candidateId,so.businessSiteId,so.departmentId,so.subClassificationId,weekStart_Date,weekEnd_Date),2) AS totalWeekHours,
	CASE WHEN ct.status=1 AND approve_Hours_Req=0 THEN 34 ELSE ct.status END AS timesheetStatus,
	jscl.jobSubClassificationId
	FROM candidateShiftOffer so
	INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId AND so.isDeleted=0
	INNER JOIN scUser scu ON so.candidateId=scu.userId 
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId AND upi.isDeleted=0
	INNER JOIN businessDepartment bd ON so.departmentId=bd.departmentId AND bd.isDeleted=0
	INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
	LEFT JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
	LEFT JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id
	WHERE so.businessSiteId=businessSite_Id AND so.departmentId=department_Id
		AND (date(so.shiftStartDateTime) <=date(weekEnd_Date))
		AND date(so.shiftEndDateTime) >= date(weekStart_Date) AND scu.isDeleted=0 AND so.isDeleted=0 AND so.status NOT IN (10,19,33,36,60,62)
	ORDER BY so.candidateId,so.subClassificationId
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBusinessWorkerCompensation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBusinessWorkerCompensation`( IN Business_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Business Worker Compensation
*/


	select   businessWorkerCompId   
			,policyProvider   
			,coverageAmt 
			,policyNo  
			,expiryDate
		from businessWorkerCompensation wc
		where businessId = Business_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetBussinessJobProfileAgreement` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetBussinessJobProfileAgreement`(
  IN	agreement_Name	varchar(200)
 ,IN	business_Id	bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Business Job profile agreement details
 call GetBussinessJobProfileAgreement(null, 1) 
*/


	select  businessjobProfileAgmntId,
			description
	from businessJobProfileAgreement 
    where  businessId =business_Id and description like coalesce(concat("%",agreement_Name,"%"),description) and isDeleted = 0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCalendarDetailsForCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCalendarDetailsForCandidate`(
IN candidate_Id bigint
,IN start_Date date
,IN end_Date date
)
BEGIN
/*
 Author: James
 Date  : 15/02/2016
 Description : Get calendar details & Unavailability details for candidates
*/

select c.*,coalesce(so.shiftOffer_Count,0) as shiftOffer_Count,coalesce(u.unavailable_Count,0)unavailable_Count ,coalesce(shiftRequest_Count,0) as shiftRequest_Count
from (
		select candidateId,calendarDate , sum(rosterShift_Count) as rosterShift_Count,sum(shiftChanges_Count) as shiftChanges_Count 
		from (
			select a.candidateId,calendarDate,so.status
				,case when so.status in (2,4,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,48,61) then 1 else 0 end as rosterShift_Count
				,case when so.status IN (23,30) then 1 else 0 end shiftChanges_Count
			from(
				select distinct candidateId,DATE(shiftStartDateTime) as calendarDate from candidateShiftOffer
				WHERE candidateId=candidate_Id and isDeleted=0
				and DATE(shiftStartDateTime) between start_Date and end_Date 
				union 
				select candidateId,unavailableDate from candidateUnavailability
				WHERE candidateId=candidate_Id AND unavailableDate between start_Date and end_Date  AND isDeleted=0
                union 
				select candidateUserId  , date(startDateTime) as calendarDate   from candidateWorkPreference
				where candidateUserId=candidate_Id and date(startDateTime) between start_Date and end_Date and isDeleted=0
			)a left join candidateShiftOffer so on a.candidateId=so.candidateId and DATE(so.shiftStartDateTime) =a.calendarDate  and so.isDeleted=0
		)b group by candidateId,calendarDate
)c left join ( -- shift Offer count
		 select candidateId,calendarDate,count(1) as shiftOffer_Count from(
				SELECT candidateId,DATE(shiftStartDateTime) as calendarDate,so.shiftOfferId
				FROM candidateShiftOffer so
				inner join businessSite	 bs on so.businessSiteId=bs.businessSiteId
				inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
				WHERE candidateId=candidate_Id AND DATE(shiftStartDateTime) between start_Date and end_Date 
                and DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)<so.shiftEndDateTime
				AND STATUS IN (1,14,18,39,41,40,46,63) AND so.isDeleted=0
				union
				SELECT cg.candidateId,DATE(shiftStartDateTime) as calendarDate,so.shiftOfferId
				FROM candidateGiveAwayRequests cg 
				INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId                
				inner join businessSite	 bs on so.businessSiteId=bs.businessSiteId
				inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
				WHERE cg.candidateId=candidate_Id AND cg.status IN (1,18,39,41,40,49,63) 
                and DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)<so.shiftEndDateTime
				AND DATE(shiftStartDateTime) between start_Date and end_Date AND so.isDeleted=0
		 )a group by candidateId, calendarDate
	)so on c.candidateId =so.candidateId and c.calendarDate=so.calendarDate 
   left join ( -- unavailable_Count
			SELECT candidateId,unavailableDate,COUNT(unavailabilityId) unavailable_Count 
			FROM candidateUnavailability 
			WHERE candidateId=candidate_Id AND unavailableDate between start_Date and end_Date AND isDeleted=0
			group by candidateId,unavailableDate
   )u on c.candidateId =u.candidateId and c.calendarDate=u.unavailableDate 
   left join ( -- shift Request Count
			select candidateUserId,date(startDateTime)as calendarDate,count(1)shiftRequest_Count from candidateWorkPreference
			where candidateUserId=candidate_Id and date(startDateTime) between start_Date and end_Date and isDeleted=0
			group by candidateUserId , date(startDateTime)
   )cw on c.candidateId =cw.candidateUserId and c.calendarDate=cw.calendarDate 
   where (coalesce(rosterShift_Count,0)<>0 or coalesce(shiftChanges_Count,0)<>0 or coalesce(so.shiftOffer_Count,0) <>0 or coalesce(u.unavailable_Count,0)<>0 or coalesce(shiftRequest_Count,0)<>0)
    ORDER BY c.candidateId,c.calendarDate
    
    
    	SELECT unavailabilityId,candidateId,unavailableDate,startTime,endTime,reason,
			CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 1
				ELSE 0 END AS isAllDay,'UNAVAILABLE' AS STATUS
		FROM candidateUnavailability
		WHERE candidateId=candidate_Id AND unavailableDate between start_Date and end_Date AND isDeleted=0
		UNION
		SELECT shiftOfferId,candidateId,DATE(shiftStartDateTime) AS unavailableDate,TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime,
		'' AS reason,0 AS isAllDay,'SHIFT' AS STATUS
		FROM candidateShiftOffer
		WHERE candidateId=candidate_Id AND STATUS NOT IN (3,10,19,33,36,38,60) AND DATE(shiftStartDateTime) between start_Date and end_Date AND isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCalendarDetailsForOfflineSync` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCalendarDetailsForOfflineSync`(
 IN candidate_Id bigint
,IN start_Date date
,IN end_Date date
)
BEGIN
/*
 Author: James
 Date  : 15/02/2016
 Description : Get calendar details & Unavailability details for candidates
*/

select c.*,coalesce(so.shiftOffer_Count,0) as shiftOffer_Count,coalesce(u.unavailable_Count,0)unavailable_Count ,coalesce(shiftRequest_Count,0) as shiftRequest_Count
from (
		select candidateId,calendarDate , sum(rosterShift_Count) as rosterShift_Count,sum(shiftChanges_Count) as shiftChanges_Count 
		from (
			select a.candidateId,calendarDate,so.status
				,case when so.status in (2,4,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,48,61) then 1 else 0 end as rosterShift_Count
				,case when so.status IN (23,30) then 1 else 0 end shiftChanges_Count
			from(
				select distinct candidateId,DATE(shiftStartDateTime) as calendarDate from candidateShiftOffer
				WHERE candidateId=candidate_Id and isDeleted=0
				and DATE(shiftStartDateTime) between start_Date and end_Date 
				union 
				select candidateId,unavailableDate from candidateUnavailability
				WHERE candidateId=candidate_Id AND unavailableDate between start_Date and end_Date  AND isDeleted=0
                union 
				select candidateUserId  , date(startDateTime) as calendarDate   from candidateWorkPreference
				where candidateUserId=candidate_Id and date(startDateTime) between start_Date and end_Date and isDeleted=0
			)a left join candidateShiftOffer so on a.candidateId=so.candidateId and DATE(so.shiftStartDateTime) =a.calendarDate  and so.isDeleted=0
		)b group by candidateId,calendarDate
)c left join ( -- shift Offer count
		 select candidateId,calendarDate,count(1) as shiftOffer_Count from(
				SELECT candidateId,DATE(shiftStartDateTime) as calendarDate,so.shiftOfferId
				FROM candidateShiftOffer so
				inner join businessSite	 bs on so.businessSiteId=bs.businessSiteId
				inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
				WHERE candidateId=candidate_Id AND DATE(shiftStartDateTime) between start_Date and end_Date 
                and DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)<so.shiftEndDateTime
				AND STATUS IN (1,14,18,39,41,40,46) AND so.isDeleted=0
				union
				SELECT cg.candidateId,DATE(shiftStartDateTime) as calendarDate,so.shiftOfferId
				FROM candidateGiveAwayRequests cg 
				INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId                
				inner join businessSite	 bs on so.businessSiteId=bs.businessSiteId
				inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
				WHERE cg.candidateId=candidate_Id AND cg.status IN (1,18,39,41,40,49) 
                and DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)<so.shiftEndDateTime
				AND DATE(shiftStartDateTime) between start_Date and end_Date AND so.isDeleted=0
		 )a group by candidateId, calendarDate
	)so on c.candidateId =so.candidateId and c.calendarDate=so.calendarDate 
   left join ( -- unavailable_Count
			SELECT candidateId,unavailableDate,COUNT(unavailabilityId) unavailable_Count 
			FROM candidateUnavailability 
			WHERE candidateId=candidate_Id AND unavailableDate between start_Date and end_Date AND isDeleted=0
			group by candidateId,unavailableDate
   )u on c.candidateId =u.candidateId and c.calendarDate=u.unavailableDate 
   left join ( -- shift Request Count
			select candidateUserId,date(startDateTime)as calendarDate,count(1)shiftRequest_Count from candidateWorkPreference
			where candidateUserId=candidate_Id and date(startDateTime) between start_Date and end_Date and isDeleted=0
			group by candidateUserId , date(startDateTime)
   )cw on c.candidateId =cw.candidateUserId and c.calendarDate=cw.calendarDate 
   where (coalesce(rosterShift_Count,0)<>0 or coalesce(shiftChanges_Count,0)<>0 or coalesce(so.shiftOffer_Count,0) <>0 or coalesce(u.unavailable_Count,0)<>0 or coalesce(shiftRequest_Count,0)<>0)
    ORDER BY c.candidateId,c.calendarDate
    
    
    	SELECT unavailabilityId,candidateId,unavailableDate,startTime,endTime,reason,
			CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 1
				ELSE 0 END AS isAllDay,'UNAVAILABLE' AS STATUS
		FROM candidateUnavailability
		WHERE candidateId=candidate_Id AND unavailableDate between start_Date and end_Date AND isDeleted=0
		UNION
		SELECT shiftOfferId,candidateId,DATE(shiftStartDateTime) AS unavailableDate,TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime,
		'' AS reason,0 AS isAllDay,'SHIFT' AS STATUS
		FROM candidateShiftOffer
		WHERE candidateId=candidate_Id AND STATUS NOT IN (3,10,19,33,36,38,60) AND DATE(shiftStartDateTime) between start_Date and end_Date AND isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCalibrationDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCalibrationDetail`(
  IN platform_Id tinyint(4)
  ,IN make_platform varchar(50)
  ,IN platform_model varchar(50)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 07/06/2016
 Description : GetCalibrationDetail
 call est_skillsconnect_dev.GetCalibrationDetail(1,'Samsung','S7')
 platform_Id : 1- Android, 2- Apple
 proximitySettings : 1 - Close, 2 - Medium
*/
	if not exists(select calibrationId from calibration where platform=platform_Id and make=make_platform and model=platform_model) then
		set platform_model='General'
        if not exists(select calibrationId from calibration where platform=platform_Id and make=make_platform and model=platform_model) then
			set make_platform = 'General'
		end if
	end if
	select platform,
		make,
        model,
        proximitySettings,
        FRSSITouchOnLimit,
        FRSSITouchOnClearHyst,
        FRSSIRangeLimit,
        FDelay,
        CRSSITouchOnLimit,
        CRSSITouchOnClearHyst,
        CRSSIRangeLimit,
        CDelay
	from calibration
        where platform=platform_Id 
        and make=make_platform 
        and model=platform_model
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateAvailability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateAvailability`(  
IN candidate_id bigint(20) 
,IN language_Id bigint(20)
)
BEGIN


/*
 Author: James
 Date  : 20/11/2014
 Description : Get candidate Employee availability
*/



	select cea.availableStartDate
		  , cea.periodId
          ,p.period
		  , cea.employmentTypeId
		  , et.employmentType
		  , cea.availableEndDate
         ,  cea.shiftJob
         ,	cewt.dayId
         ,  twel.weekEndDay
         ,	cewt.timeId
         ,	t.slotName
         ,	t.startTime
         ,	t.endTime
	from candidateEmpAvailability cea 
    left join periodLocale p 	on cea.periodId=p.periodId and p.languageId=language_Id
	left join employmentTypeLocale et 	on cea.employmentTypeId=et.employmentTypeId  and et.languageId=language_Id
    left join candidateEmpAvailWorkingTime cewt on cewt.candidateUserId=cea.candidateUserId 
    left join timeSheetweekEndLocale twel   on twel.weekEndDayId=cewt.dayId and twel.languageId=language_Id
    left join scTime t on t.timeId=cewt.timeId
	where cea.candidateUserId=candidate_id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateCareer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateCareer`(
in candidateUser_Id bigint
,in language_Id bigint
,in time_stamp datetime
)
BEGIN

/*
 Author: James
 Date  : 01-06-2015
 Description : Mobile data sync
 */

	-- profile
	select distinct cep.candidateEmpProfileId
			,cep.candidateUserId 
			,epl.employmentProfile
            ,epl.employmentProfileId
            ,cep.isDeleted
            ,cep.guid
	from candidateEmpProfile cep 
    left join candidateEmpProfileExperience cepe 	on cep.candidateEmpProfileId=cepe.candidateEmpProfileID 
    left join employmentProfileLocale epl on epl.employmentProfileId=cep.employmentProfileID and epl.languageId=language_Id
	where  cep.candidateUserId=candidateUser_Id  
    and coalesce(cep.updatedOn,cep.createdOn) - time_stamp >0 
     
   
   -- Experience
	select  cep.candidateEmpProfileId 
			,cepe.candidateEmpProfileExpId
			,cepe.companyName
			,cepe.commencementYear
			,"" as YearName 
			,cepe.employmentTypeId
			,etl.employmentType
			,pl.periodId
            ,pl.period 
            ,location
            ,cepe.startDate
            ,cepe.endDate
            ,cep.candidateEmpProfileId
            ,epl.employmentProfile
            ,cepe.isDeleted
            ,cepe.guid
	from candidateEmpProfile cep 
    inner join candidateEmpProfileExperience cepe on cep.candidateEmpProfileId=cepe.candidateEmpProfileID  
    left join employmentProfileLocale epl on epl.employmentProfileId=cep.employmentProfileID  and epl.languageId=language_Id 
    left join employmentTypeLocale etl on etl.employmentTypeId=cepe.employmentTypeId  and etl.languageId=language_Id
	left join periodLocale pl on cepe.periodId=pl.periodId  and pl.languageId=language_Id
	where   cep.candidateUserId=candidateUser_Id and  coalesce(cepe.updatedOn,cepe.createdOn) - time_stamp >0 

   
   -- Profile Document
	select  candidateEmpProfileDocId
		,	cpd.candidateEmpProfileId
		,	documentName
		,	documentPath
		,	documentMimeType
		,	eTag
		,	fileStatus
        ,	cpd.guid
        ,	cpd.isDeleted
    from candidateEmpProfileDocument cpd inner join candidateEmpProfile cp on cpd.candidateEmpProfileId=cp.candidateEmpProfileId
    where cp.candidateUserId=candidateUser_Id and  coalesce(cpd.updatedOn,cpd.createdOn) - time_stamp >0 
    
   
   -- skills
		select ceps.candidateEmpProfileExpId
				,ceps.candidateEmpProfileSkillId
				,ceps.skillId
				,s.skillName
				,ceps.isOther
				,ceps.OtherSkill
				,ceps.isDeleted
                ,ceps.guid
		from candidateEmpProfileExpSkill ceps 
		inner join candidateEmpProfileExperience cepe on ceps.candidateEmpProfileExpId=cepe.candidateEmpProfileExpId
		inner join candidateEmpProfile cep on cep.candidateEmpProfileId=cepe.candidateEmpProfileID
		left join skillLocale s on ceps.skillID=s.skillId  and s.languageId=language_Id
		where cep.candidateUserId=candidateUser_Id and  coalesce(ceps.updatedOn,ceps.createdOn) - time_stamp >0 
	   
   

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateContactDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateContactDetails`( IN candidate_id bigint(20) )
BEGIN
		
					select 
							-- nameSalutationId 
							firstName 
							,middleName 
							,lastName 
							,emailId 
							,secondaryEmail 
							,nationalityId 
							,pin 
							,'' as regCompletePercentage 
						    ,'' as isRegCompleted 
						    ,likePromotionalMails 
						    ,acceptTermsConditions 
							from scUser u 
							inner join candidateUser cu on u.userId = cu.userId
							where cu.userID = candidate_id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateCurrentEmployer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateCurrentEmployer`(
In candidateUser_Id bigint
)
BEGIN

/*
 Author: James
 Date  : 20/11/2014
 Description : View Candidate Employer
 call est_skillsconnect.GetCandidateCurrentEmployer(218)

*/

select hireRequestCandidateId
	  ,hrc.jobProfileHireRequestId
      ,hrc.candidateUserId 
from hireRequestCandidate hrc 
inner join hireRequestDetail hrd on hrc.jobProfileHireRequestId=hrd.jobProfileHireRequestId
where hrc.candidateUserId=candidateUser_Id and candidateHRStatus=11 and hrc.isDeleted=0
and utc_timestamp() between hrd.empStartDate and hrd.empEndDate
order by hireRequestCandidateId
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateDataForEncryption` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateDataForEncryption`()
BEGIN

/* Used for encrypting existing data present in the database. No runtime use.*/

	
set @start_Date='2016-02-09 12:58:08'  

select u.userId
		,dob
		,cd.streetAddressLine1
		,cd.streetAddressLine2
		,cd.zipCode
        ,emgncyContactPerson
		,emgncyContactReltn
		,emgncyContactPhone
		,pin as payrollPin
		,homePhone
		,workPhone
		,mobilePhone
        ,u.userUIId
        ,u.encryptionKey
from scUser u left join candidateDetail cd on u.userId=cd.candidateUserId
left join candidateEmergencyContact ec on u.userId=ec.candidateUserId
left join candidateUser cu on u.userId=cu.candidateUserId
left join userContact uc on u.userId=uc.userID
where coalesce(u.updatedOn,u.createdOn)>=@start_Date or coalesce(cd.updatedOn,cd.createdOn)>=@start_Date
or coalesce(ec.updatedOn,ec.createdOn)>=@start_Date or coalesce(uc.updatedOn,uc.createdOn)>=@start_Date
or coalesce(cu.updatedOn,cu.createdOn)>=@start_Date
order by u.userId 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateDocument`(
	  IN	candidate_User_Id	bigint(20)
	, IN	document_Type_Id	smallint(6)
    , IN    page_No	tinyInt
)
BEGIN

	/*
	 Author: James
	 Date  : 19/11/2014
	 Description : Get Candidate Document details
	*/

	select 
		candidateDocumentId	,
		candidateUserId	,
		documentTypeId	,
		documentPath	,
		documentName	,
		documentMimeType,
        eTag, fileStatus,description
	from candidateDocument
    where candidateUserId=candidate_User_Id 
	and DocumentTypeId=coalesce(Document_Type_Id,DocumentTypeId) and isDeleted=0 
    and 
    case when page_No =1 then DocumentTypeId in (1,2,3,6,8) 
		 when page_No=2 then  DocumentTypeId in (7,11)  else DocumentTypeId=DocumentTypeId END

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateEmpDefinedSkill` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateEmpDefinedSkill`(IN candidateUser_Id bigint(20))
BEGIN


/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Candidate Defined Skill

*/

	select candidateEmpDefinedSkillId
		  ,skillName 
	from candidateEmpDefinedSkill 
	where candidateUserId=candidateUser_Id and isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateEmpProfileDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateEmpProfileDocument`(
  IN	candidateEmpProfile_Id	varchar(100)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Candidate Employment profile document.

*/


	select  candidateEmpProfileDocId
		,	candidateEmpProfileId
		,	documentName
		,	documentPath
		,	documentMimeType
		,	eTag
		,	fileStatus
    from candidateEmpProfileDocument 
    where find_in_set(candidateEmpProfileId,candidateEmpProfile_Id) and isDeleted=0 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateEmpProfileExpSkill` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateEmpProfileExpSkill`(
	 in candidateEmpProfile_ExpId Bigint(20)
     ,in language_Id	bigint(20)
	)
BEGIN

/*
 Author: James
 Date  : 19/11/2014
 Description : Get Candidate skills
*/
	select ceps.candidateEmpProfileSkillId
			,ceps.skillId
			,s.skillName
			,ceps.isOther
			,ceps.OtherSkill 
	from candidateEmpProfileExpSkill ceps left join skillLocale s
		on ceps.skillID=s.skillId and s.languageId=language_Id
	where candidateEmpProfileExpId=candidateEmpProfile_ExpId
	and ceps.isDeleted=0


 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateEmpProfileExpSkillId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateEmpProfileExpSkillId`( in candidateEmpProfile_ExpId Bigint(20),in language_Id	bigint(20))
BEGIN

/*
 Author: James
 Date  : 19/11/2014
 Description : Get Candidate employee Profie
*/
    select ceps.candidateEmpProfileSkillId
	from candidateEmpProfileExpSkill ceps 
    left join skillLocale s on ceps.skillID=s.skillId and s.languageId= language_Id 
	where candidateEmpProfileExpId=candidateEmpProfile_ExpId
	and ceps.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateEmpProfilePreference` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateEmpProfilePreference`(
IN candidateUser_Id bigint(20)
,IN language_Id bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 24/11/2014
 Description : Get Candidate employee Profie Preference
*/
declare is_pref bit
set is_pref=1

	select  cepp.candidateEmpProfilePreferenceId	
			,cepp.employmentProfileID
			,epl.employmentProfile
			,cepp.expMinSalaryCurrencyId
			,cl.code as currencyCode
			,cepp.expectedMinSalary
			,considerForOtherJobProfile
			,cepp.isPrefered
			,cepp.salaryPerId
			,salaryPerName
			,cepp.candidateUserId

	from candidateEmpProfilePreference cepp  
	left join employmentProfileLocale epl on cepp.employmentProfileId=epl.employmentProfileId and epl.languageId=language_Id
	left join salaryPerLocale spl on spl.salaryPerId=cepp.salaryPerId and spl.languageId=language_Id
	left join currencyLocale cl on cepp.expMinSalaryCurrencyId=cl.currencyId and cl.languageId=language_Id
	left join candidateDetail cd on cepp.candidateUserId = cd.candidateUserId
	where cepp.candidateUserId=candidateUser_Id and cepp.isDeleted=0 
	 
	union all

	select 
			0 as candidateEmpProfilePreferenceId
			,epl.employmentProfileID
			,epl.employmentProfile 
			,null as expMinSalaryCurrencyId
			,null as currencyCode
			,null as expectedMinSalary
			,considerForOtherJobProfile
			,is_pref as isPrefered
			,null as salaryPerId
			,null as salaryPerName
			,cepp.candidateUserId
	from  candidateDetail cd 
    left join candidateEmpProfile cep on cep.candidateUserId = cd.candidateUserId and cep.isDeleted=0
	left join employmentProfileLocale epl on cep.employmentProfileID=epl.employmentProfileId and epl.languageId=language_Id and showInPreference=1
	left join candidateEmpProfilePreference cepp  on cepp.candidateUserId=cep.candidateUserId and cepp.employmentProfileID=cep.employmentProfileID and cepp.isDeleted=0
	where  cepp.candidateUserId is null  and cd.candidateUserId=candidateUser_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateEmpProfileSkill` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateEmpProfileSkill`(in candidateUser_Id Bigint(20),in employmentProfile_ID int(11))
BEGIN

/*
 Author: James
 Date  : 19/11/2014
 Description : Get Candidate employee Profie
*/
	select ceps.candidateEmpProfileSkillId
			,ceps.skillId
			,s.skillName
			,ceps.isOther
			,ceps.OtherSkill 
	from candidateEmpProfileSkill ceps left join skill s
		on ceps.skillID=s.skillId
	where candidateUserId=candidateUser_Id and ceps.employmentProfileID=employmentProfile_ID 
	and ceps.isDeleted=0


 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateEmpProfileSkillId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateEmpProfileSkillId`(in candidateUser_Id Bigint(20),in employmentProfile_ID int(11))
BEGIN

/*
 Author: James
 Date  : 19/11/2014
 Description : Get Candidate employee Profie
*/
	select ceps.candidateEmpProfileSkillId
	from candidateEmpProfileSkill ceps left join skill s
		on ceps.skillID=s.skillId
	where candidateUserId=candidateUser_Id and ceps.employmentProfileID=employmentProfile_ID 
	and ceps.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateJobOffer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateJobOffer`(
	IN candidateUser_Id BIGINT
,	IN search_Type Tinyint
,	IN language_Id int
,	IN start_record bigint(20)  
,	IN no_of_records int(11) 

)
BEGIN

/*
 Author: Tijo
 Date  : 9/03/2015
 Description : 
 search_Type -- 1 - Offer, 2 -- History
 call est_skillsconnect.GetCandidateJobOffer(218, 2, 264, 0, 10)
*/

	
    select * ,FOUND_ROWS() as TotalRecords  from(
		select  
		   hireRequestCandidateId
		 , siteName
		 , bs.addressLine1
		 , bs.addressLine2
		 , jobSubClassification
		 , employmentType
		 , timeSheetFormat
         , wageCurrencyId 
		 , wageMin  
		 , wageMax  
		 , wageTypeId
		 , salaryPerName as wagePer
		 , hr.jobProfileHireRequestId
		 , hrd.empStartDate
		 , hrd.empEndDate
         , candidateHRStatus
         , shiftType
         , bd.fileUrl
        ,(   select   group_concat( hireRequestCandidateId)  
			 from hireRequestCandidate  hrc 
			 inner join hireRequestDetail hrd on  hrc.jobProfileHireRequestId = hrd.jobProfileHireRequestId
			 where hrc.isDeleted =0 and candidateUserId=candidateUser_Id
			 and case when search_Type=1 then candidateHRStatus in(3,5,6,7,8,9,10,11)  and datediff(empStartDate,utc_timestamp())>=0
			 when search_Type=2 then ((candidateHRStatus between 3 and 11)  and    datediff(empStartDate,utc_timestamp())<0 ) end
             order by hireRequestCandidateId asc
		 ) as hireRequestCandidateIds
        , hrc.candidateUserId
		, jp.jobProfileId
		, bs.businessSiteId
		, bs.businessId
		, hrd.reportToPerson
        , currencyCode as wagecurrencyCode
		, hrd.estimatedMinHoursPerDay
		, hrd.estimatedMaxHoursPerDay
		, hrd.estimatedMinHoursPerWeek
		, hrd.estimatedMaxHoursPerWeek
        , b.businessName
        , cll.cityName
        , sl.stateName
        , cnl.countryName
        , hr.status as jobProfileHireRequestStatus
        , hrc.createdOn
        , hrc.updatedOn
		from hireRequestCandidate hrc
		inner join jobProfileHireRequest hr on hrc.jobProfileHireRequestId = hr.jobProfileHireRequestId
		inner join hireRequestDetail hrd on hr.jobProfileHireRequestId = hrd.jobProfileHireRequestId
		inner join jobProfileBusinessSite jbs on jbs.jobProfileBusinessSiteId = hr.jobProfileBusinessSiteId
		inner join jobProfile jp on jp.jobProfileId = jbs.jobProfileId
		inner join businessSite bs on bs.businessSiteId = jbs.businessSiteId
        left join business b on b.businessId = bs.businessId
        left join businessDocument bd on bs.businessId=bd.businessId and bd.documentTypeId =4 and bd.isDeleted=0
		left join jobSubClassificationLocale jsc on jsc.jobSubClassificationId = jp.jobSubClassificationId and jsc.languageId = language_Id
		left join employmentTypeLocale etl on etl.employmentTypeId = jp.employmentTypeId and etl.languageId = language_Id
		left join timeSheetFormatLocale tsl on tsl.timeSheetFormatId  = hrd.timeSheetFormatId and tsl.languageId = language_Id
		left join salaryPerLocale spl on spl.salaryPerId = jp.wagePerId and spl.languageId = language_Id
        left join currencyLocale cl on wageCurrencyId=cl.currencyId and cl.languageId = language_Id
        left join stateLocale sl on bs.stateId=sl.stateId and sl.languageId = language_Id
        left join cityLocale cll on cll.cityId=bs.cityId and cll.languageId = language_Id
        left join countryLocale cnl on cnl.countryId=bs.countryId and cnl.languageId = language_Id
		where hrc.isDeleted =0 and candidateUserId=candidateUser_Id
        and case when search_Type=1 then candidateHRStatus in(3,5,6,7,8,9,10,11)  and datediff(empStartDate,utc_timestamp())>=0
				  when search_Type=2 then ((candidateHRStatus between 3 and 11)  and    datediff(empStartDate,utc_timestamp())<0 ) end
	)a 
    order by hireRequestCandidateId desc
    LIMIT  no_of_records  OFFSET  start_record 
    
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateJobOfferDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateJobOfferDetail`(
	IN hireRequest_CandidateId bigint
   ,IN language_Id int
)
BEGIN

/*
 Author: James
 Date  : 9/03/2015
 Description : Candidate Job Offers
*/

	
    
    select  
	   hireRequestCandidateId
	 , hrc.jobProfileHireRequestId
	 , hrc.candidateUserId
     , jp.jobProfileId
     , bs.businessSiteId
     , bs.businessId
     , siteName
     , bs.addressLine1
     , bs.addressLine2
     , jobSubClassification
     , employmentType
     , timeSheetFormat
     , wageCurrencyId 
     , wageMin  
	 , wageMax  
     , wageTypeId
     , salaryPerName as wagePer
     , hrd.empStartDate
     , hrd.empEndDate
     , hrc.candidateHRStatus
     , hrd.reportToPerson
     , shiftType
	 , bd.fileUrl
     , currencyCode as wagecurrencyCode
	 , hrd.estimatedMinHoursPerDay
	 , hrd.estimatedMaxHoursPerDay
	 , hrd.estimatedMinHoursPerWeek
	 , hrd.estimatedMaxHoursPerWeek
     , b.businessName
	 , cll.cityName
	 , sl.stateName
	 , cnl.countryName
    ,hr.status as jobProfileHireRequestStatus
	from hireRequestCandidate hrc
    inner join jobProfileHireRequest hr on hrc.jobProfileHireRequestId = hr.jobProfileHireRequestId
    inner join hireRequestDetail hrd on hr.jobProfileHireRequestId = hrd.jobProfileHireRequestId
    inner join jobProfileBusinessSite jbs on jbs.jobProfileBusinessSiteId = hr.jobProfileBusinessSiteId
    inner join jobProfile jp on jp.jobProfileId = jbs.jobProfileId
    inner join businessSite bs on bs.businessSiteId = jbs.businessSiteId
    left join business b on bs.businessId = b.businessId
    left join businessDocument bd on bs.businessId=bd.businessId and bd.documentTypeId =4 and bd.isDeleted=0
    left join jobSubClassificationLocale jsc on jsc.jobSubClassificationId = jp.jobSubClassificationId and jsc.languageId = language_Id
    left join employmentTypeLocale etl on etl.employmentTypeId = jp.employmentTypeId and etl.languageId = language_Id
    left join timeSheetFormatLocale tsl on tsl.timeSheetFormatId  = hrd.timeSheetFormatId and tsl.languageId = language_Id
    left join salaryPerLocale spl on spl.salaryPerId = jp.wagePerId and spl.languageId = language_Id
    left join currencyLocale cl on wageCurrencyId=cl.currencyId and cl.languageId = language_Id
    left join stateLocale sl on bs.stateId=sl.stateId and sl.languageId = language_Id
	left join cityLocale cll on cll.cityId=bs.cityId and cll.languageId = language_Id
	left join countryLocale cnl on cnl.countryId=bs.countryId and cnl.languageId = language_Id
    where hrc.isDeleted =0 and hireRequestCandidateId=hireRequest_CandidateId
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateJobOfferIds` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateJobOfferIds`(
 IN candidateUser_Id BIGINT
,IN search_Type Tinyint
)
BEGIN

/*
 Author: Tijo
 Date  : 9/03/2015
 Description : Job Offer Ids for a particular candidate
 search_Type -- 1 - Offer, 2 -- History
 call GetCandidateJobOfferIds(218, 2)
*/

			 select  hireRequestCandidateId
			 from hireRequestCandidate  hrc 
			 inner join hireRequestDetail hrd on  hrc.jobProfileHireRequestId = hrd.jobProfileHireRequestId
			 where hrc.isDeleted =0 and candidateUserId=candidateUser_Id
			 and case when search_Type=1 then candidateHRStatus in(3,5,6,7,8,9,10,11)  and datediff(empStartDate,utc_timestamp())>=0
				  when search_Type=2 then ((candidateHRStatus between 3 and 11)  and    datediff(empStartDate,utc_timestamp())<0 ) end
                  order by coalesce(hrc.updatedOn,hrc.createdOn) desc

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateMoreInformation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateMoreInformation`(
IN  candidateUser_Id bigint(20)
)
BEGIN
/*
 Author: Tijo Joseph
 Date  : 9/03/2015
 Description : More Information about candidate
*/

	select candidateUserId,moreInformation from candidateDetail
	where candidateUserId=candidateUser_Id

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatePersonalDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatePersonalDetails`( 
IN candidate_id varchar(5000)
, IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Get candidate profile details
 call GetCandidatePersonalDetails(92)
*/


	select   su.firstName  
			,su.middleName  
			,su.lastName  
			,su.genderId  
			,gl.genderName
			,su.nationalityId
			,cL.countryName as nationalityName
			,cd.streetAddressLine1 
			,cd.streetAddressLine2 
			,cd.countryId 
			,c1l.countryName 
			,cd.stateId 
			,sl.stateName
			,cd.cityId 
			,cl.cityName
			,cd.zipCode 
			,cd.dob 
			,uc.homePhone   
			,uc.workPhone  
			,uc.mobilePhone
			,su.emailId
			,su.secondaryEmail
			,cec.canEmergencyContactId
			,cec.emgncyContactPerson  
			,cec.emgncyContactReltn 
			,cec.emgncyContactPhone 
			,pin
			,likePromotionalMails
		--  ,dlNo
		-- 	,ssnNo 
			,moreInformation 
			,su.userUIId
            ,su.encryptionKey
            ,su.userId
            ,c.countryISDCode
			from scUser su
			left join candidateUser cu on cu.candidateUserId = su.userId
			left join userContact uc on uc.userID = su.userID
			left join candidateDetail cd on su.userId = cd.candidateUserId                             
			left join candidateEmergencyContact cec on cec.candidateUserId = cu.candidateUserId
			left join genderLocale gl on gl.genderId=su.genderId and gl.languageId=language_Id
			left join countryLocale cL  on cL.countryId=su.nationalityId and cL.languageId=language_Id
            left join country c  on c.countryId=cd.countryId  
			left join countryLocale c1l on c1l.countryId=cd.countryId and c1l.languageId=language_Id
			left join stateLocale sl on sl.stateId=cd.stateId and sl.languageId=language_Id
			left join cityLocale cl	on cd.cityId=cl.cityId and cl.languageId=language_Id
			where find_in_set(su.userID , candidate_id) and  cu.isDeleted=0




END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatePrefCountryDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatePrefCountryDocument`(
IN	candidateUser_Id	bigint(20)
, IN language_Id  bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Candidate preffered country document path details
*/
	select  candidatePreferredCountryDocumentId as candidatePrefCountryDocId
			,cpcd.candidatePreferredCountryId as candidatePrefCountryId
			,c.countryName
			,cpcd.documentName,
			cpcd.documentPath
			,documentMimeType
			,eTag
            ,fileStatus
	 from candidatePreferredCountryDocument cpcd 
     left join candidatePreferredCountry  on cpcd.candidatePreferredCountryId=cpc.candidatePreferredCountryId
     left join countryLocale c  on cpc.countryId=c.countryId and c.languageId=language_Id
	where candidateUserId=candidateUser_Id and cpcd.isDeleted=0 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatePrefCountryDocumentDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatePrefCountryDocumentDetail`(
	IN	candidateUser_Id	bigint(20)
,   IN language_Id  bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Candidate preffered country details
*/
		select  
				cpa.candidatePreferredCountryId as candidatePrefCountryId
				, cpa.haveWorkEligibility
				,cpa.typeOfVisa
				, cpa.countryId
				,c.countryName 
				,cpa.stateId   
				,stateName
				,cpa.cityId
				,cityName
                ,cd.considerForOverseaWork
                ,cpa.isPrefered
                ,cpd.candidatePreferredCountryDocumentId as candidatePrefCountryDocId			 
				,cpd.documentName
				,cpd.documentPath
				,documentMimeType
				,eTag
				,fileStatus
		from   candidateDetail cd       
        left join candidatePreferredCountry cpa on cpa.candidateUserId=cd.candidateUserId  and cpa.isDeleted =0 
        left join candidatePreferredCountryDocument cpd on cpd.candidatePreferredCountryId=cpa.candidatePreferredCountryId and cpd.isDeleted=0
        left join countryLocale c on cpa.countryId = c.countryId and c.languageId=language_Id
		left join stateLocale s on cpa.stateId = s.stateId and  s.languageId=language_Id
		left join cityLocale ci on cpa.cityId = ci.cityId  and  ci.languageId=language_Id
		where cd.candidateUserId = candidateUser_Id 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatePreferredAgency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatePreferredAgency`( IN User_ID bigint(20) )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Candidate preffered agency
*/
		select   a.agencyID
				,a.name 
		from candidatePreferredAgency cpa
		inner join agency a on cpa.agencyId = a.agencyId
		where a.status =2 and candidateUserId = User_ID
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatePreferredCountry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatePreferredCountry`( 
IN candidate_id bigint(20) 
,IN language_Id bigint(20)
)
BEGIN
 
 /*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Candidate preffered country
*/
		

		select  
				cpa.candidatePreferredCountryId as candidatePrefCountryId
				, cpa.haveWorkEligibility
				,cpa.typeOfVisa
				, cpa.countryId
				,c.countryName 
				,cpa.stateId   
				,stateName
				,cpa.cityId
				,cityName
                ,cd.considerForOverseaWork
                ,cpa.isPrefered
		from   candidateDetail cd       
        left join candidatePreferredCountry cpa on cpa.candidateUserId=cd.candidateUserId  and cpa.isDeleted =0  
        left join countryLocale c on cpa.countryId = c.countryId and c.languageId=language_Id
		left join stateLocale s on cpa.stateId = s.stateId and  s.languageId=language_Id
		left join cityLocale ci on cpa.cityId = ci.cityId  and  ci.languageId=language_Id
		where cd.candidateUserId = candidate_id 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatePrevEmployment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatePrevEmployment`(
  in candidateEmpProfile_Id varchar(200)
, IN language_Id bigint(20)

)
BEGIN


/*
 Author: James
 Date  : 24/11/2014
 Description : Get Candidate Previous employment
*/
 

	select 
			cepe.candidateEmpProfileExpId
			,cepe.companyName
			,cepe.commencementYear
			,"" as YearName 
			,cepe.employmentTypeId
			,etl.employmentType
			,pl.periodId
            ,pl.period
       --     ,cl.cityId
            ,location
            ,cepe.startDate
            ,cepe.endDate
            ,cep.candidateEmpProfileId
            ,epl.employmentProfile
	from candidateEmpProfile cep 
    inner join candidateEmpProfileExperience cepe on cep.candidateEmpProfileId=cepe.candidateEmpProfileID and cepe.isDeleted=0
    left join employmentProfileLocale epl on epl.employmentProfileId=cep.employmentProfileID and epl.languageId=language_Id
    left join employmentTypeLocale etl on etl.employmentTypeId=cepe.employmentTypeId and etl.languageId=language_Id
	left join periodLocale pl on cepe.periodId=pl.periodId and pl.languageId=language_Id
	where   find_in_set(cep.candidateEmpProfileId, candidateEmpProfile_Id) and cep.isDeleted=0 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatePrevEmploymentProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatePrevEmploymentProfile`(
  in candidateUser_Id bigint(20)
, IN language_Id bigint(20)

)
BEGIN

/*
 Author: James
 Date  : 24/11/2014
 Description :  Candidate Previous employment profile
*/

	select distinct cep.candidateEmpProfileId
			,cep.candidateUserId 
			,epl.employmentProfile
            ,epl.employmentProfileId
	from candidateEmpProfile cep 
    left join candidateEmpProfileExperience cepe 	on cep.candidateEmpProfileId=cepe.candidateEmpProfileID 
    left join employmentProfileLocale epl on epl.employmentProfileId=cep.employmentProfileID and epl.languageId=language_Id
	where cep.candidateUserId=candidateUser_Id and cep.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateProfileSearch` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateProfileSearch`(
 IN sub_clasificationId bigint
,IN jobProfileHireRequest_Id  bigint
,IN minProximity bigint
,IN maxProximity bigint
,IN min_experience bigint
,IN max_experience bigint
,IN skills nvarchar(200)
,IN soft_skills nvarchar(200)
,IN business_id bigint
,IN sort_column nvarchar(50)
,IN language_id int
,IN is_WHB bit

,IN proximity_weightage float
,IN availability_weightage float
,IN skills_total_weightage float
,IN skills_ind_weightage float
,IN softskills_total_weightage float
,IN softskills_ind_weightage float

,IN emp_start_date date
,IN emp_end_date date
,IN search_type tinyint  -- 1 - all 2 - reg by business
,IN start_record bigint(20)  
,IN no_of_records int(11) 

)
BEGIN


/*
Author  	: Tijo Joseph
Date 		: 16-01-2015
Description : Candidate search for job profile

call est_skillsconnect.GetCandidateProfileSearch(1, 13, 0, 100000, null, null, 'null', 'null', 1, 'candidateName_desc', 264, null, 25, 25, 0, 0, 25, 6.4, '2015-04-10', '2015-07-10', 1, 0, 100)

candidateName_asc
candidateName_desc
experience_asc
experience_desc
radius_asc
radius_desc
availabilityStatus_asc
availabilityStatus_desc
matchPercent_asc
matchPercent_asc
matchPercent_desc
*/

declare total_weightage decimal(18,2)
declare hireRequestDays int
declare shift_type int
declare business_latitude decimal(18,8)
declare business_longitude decimal(18,8)
declare proximityCalculation_Value decimal(18,5)
declare proximityCalculated_In nvarchar(10)


set total_weightage = (proximity_weightage+availability_weightage+skills_total_weightage+softskills_total_weightage)
set hireRequestDays = (select count(distinct weekDayId) from hireRequestShiftDays  sd inner join hireRequestShift s on sd.hireRequestShiftId = s.hireRequestShiftId where jobProfileHireRequestId =jobProfileHireRequest_Id and sd.isDeleted =0 and s.isDeleted =0)
set shift_type = (select case when (select shiftType from hireRequestDetail where jobProfileHireRequestId=jobProfileHireRequest_Id limit 1) = 2 then 1 else 0 end)

select latitude,longitude,proximityCalculationValue,proximityCalculatedIn into business_latitude, business_longitude,proximityCalculation_Value,proximityCalculated_In
from hireRequestDetail hrd 
inner join businessSite bs on hrd.businessSiteId = bs.businessSiteId
inner join country c on c.countryId = bs.countryId
where jobProfileHireRequestId = jobProfileHireRequest_Id limit 1


    
    select   candidateUserId
			,firstName
            ,lastName
			,candidateName
			,latitude
			,longitude
			,workedHereBefore
			,availabilityStatus
			,minExperienceMonth
			,maxExperienceMonth
			,ROUND(radius,2) as radius
			,hireRequestCandidateId
			,CEILING(matchPercent) as matchPercent
            ,FOUND_ROWS() as TotalRecords
            ,candidateHRStatus
            ,paidStatus
            ,proximityCalculated_In
            
    from (
	 select *, (((coalesce(empSkillCount,0)* skills_ind_weightage) + (defSkillCount* softskills_ind_weightage) + (availabilityStatus* availability_weightage) + proximity_weightage)/total_weightage)*100 as matchPercent from 
		( -- e
			select d.candidateUserId,firstName,lastName,candidateName,latitude,longitude,empSkillCount,workedHereBefore,availabilityStatus,minExperienceMonth,maxExperienceMonth,radius,count(definedSkill) as defSkillCount , availableDayCount,hireRequestCandidateId,candidateHRStatus,paidStatus  from 
            ( -- d
				select c.candidateUserId, firstName,lastName,candidateName,latitude,longitude,cds.skillName as definedSkill,empSkillCount, workedHereBefore, availabilityStatus,minExperienceMonth,maxExperienceMonth,radius, availableDayCount,hireRequestCandidateId,candidateHRStatus,paidStatus from 
				( -- c
						select * from 
						( -- a
							select   firstName,lastName,a1.candidateUserId,candidateName,latitude,longitude,EmpskillName,workedHereBefore,availabilityStatus,minExperienceMonth,maxExperienceMonth,radius,availableDayCount,hireRequestCandidateId,candidateHRStatus,paidStatus,empSkillCount,csvUpload,csvBusinessId
                            from (
							select  distinct 
                             firstName
                            ,lastName
							,cu.candidateUserId
							,concat(firstName, " ", coalesce(middleName,'') , lastName) as candidateName
							,latitude  
							,longitude
                            ,cp.candidateEmpProfileID
                            ,(select case when businessName=cpe.companyName then 1 else 0 end from business where businessid =  business_id and isDeleted=0) as workedHereBefore
                            ,case when exists (select 1 from hireRequestCandidate hc inner join hireRequestDetail jphr on hc.jobProfileHireRequestId = jphr.jobProfileHireRequestId and hc.isDeleted=0 where candidateUserId=cu.candidateUserId and candidateHRStatus in (9,11) and ((empStartDate between emp_start_date and emp_end_date) or (empEndDate between emp_start_date and emp_end_date))) then 0 else 1 end as availabilityStatus
							,cast(sum(expMinMonth) as SIGNED) as minExperienceMonth
							,cast(sum(expMaxMonth) as SIGNED) as maxExperienceMonth
                            ,((SQRT(POWER(69.1 * ( latitude -  business_latitude),  2) + POWER(69.1 * (  business_longitude  - longitude )  * COS(latitude / 57.3), 2)) ) * proximityCalculation_Value)  as radius
                            ,(select count(distinct dayId) from candidateEmpAvailWorkingTime t inner join hireRequestShiftDays sd on t.dayId =sd.weekDayId inner join hireRequestShift s on sd.hireRequestShiftId = s.hireRequestShiftId where jobProfileHireRequestId =jobProfileHireRequest_Id  and t.candidateUserId = cu.candidateUserId) as availableDayCount
							,hireRequestCandidateId
                            ,candidateHRStatus
                            ,coalesce(hrc.paidStatus,0) as paidStatus
							,case when coalesce((select distinct candidateUserId from businessCandidate bcc where bcc.candidateUserId=u.userId),0)<>0 then 1 else 0 end csvUpload
							,coalesce(bc.businessId,0) as csvBusinessId
							from scUser u
							inner join candidateUser cu on u.userId = cu.candidateUserId
							inner join candidateDetail cd on cd.candidateUserId = cu.candidateUserId
							left join candidateEmpProfile cp on cp.candidateUserId = cd.candidateUserId and cp.isDeleted =0  
							left join candidateEmpProfileExperience cpe on cpe.candidateEmpProfileID = cp.candidateEmpProfileID and cpe.isDeleted =0  
							left join candidateEmpAvailability cea on cea.candidateUserId = cu.candidateUserId  -- and cea.isDeleted =0  
                            left join hireRequestCandidate hrc on cu.candidateUserId = hrc.candidateUserId   and jobProfileHireRequestId = jobProfileHireRequest_Id and hrc.isDeleted =0 --  and candidateHRStatus <>0
							left join businessCandidate bc on bc.candidateUserId=cu.candidateUserId and bc.businessId=business_id
                            where u.isDeleted= 0 
							and (emp_start_date between availableStartDate and coalesce(availableEndDate,emp_end_date)) and ( emp_end_date between availableStartDate and coalesce(availableEndDate,emp_end_date))
							and coalesce(cp.employmentProfileID,0) =  coalesce(sub_clasificationId,coalesce(cp.employmentProfileID,0))
                            and case when shift_type=1 then shiftJob =1 else 1=1 end
                            group by candidateUserId, candidateEmpProfileID
                            )a1
                            left join
                            (
                            select *, count(coalesce(EmpskillName,"Nil")) as empSkillCount from
								(
								select distinct cu.candidateUserId 
								,cp.candidateEmpProfileID
								,case when cps.isOther=0 then sl.skillName else otherSkill end  as EmpskillName
								from candidateUser cu
								left join candidateEmpProfile cp on cp.candidateUserId = cu.candidateUserId and cp.isDeleted =0  
								left join candidateEmpProfileExperience cpe on cpe.candidateEmpProfileID = cp.candidateEmpProfileID and cpe.isDeleted =0  
								left join candidateEmpProfileExpSkill cps on cps.candidateEmpProfileExpId = cpe.candidateEmpProfileExpId and cps.isDeleted =0
								left join skillLocale sl on sl.skillId = cps.skillId and languageId =  language_id	
								where isOther is not null 
								)a21 where find_in_set(EmpskillName, coalesce(skills,EmpskillName))
								group by candidateUserId
                            ) a2 on a1.candidateUserId = a2.candidateUserId and a1.candidateEmpProfileID = a2.candidateEmpProfileID 
							where (csvUpload=1 and csvBusinessId<>0 ) or csvUpload=0
                        )a   where  availableDayCount >= hireRequestDays  and (radius between minProximity and maxProximity) and workedHereBefore =  coalesce(is_WHB,workedHereBefore) 
						and case when (min_experience is not null and max_experience is not null) then ((coalesce(minExperienceMonth,0) >= coalesce(min_experience,coalesce(minExperienceMonth,0))) 
                         and ((coalesce(minExperienceMonth,0) <= coalesce(max_experience,coalesce(maxExperienceMonth,minExperienceMonth)))) )
						 when (min_experience is  null and max_experience is not null) then coalesce(maxExperienceMonth,minExperienceMonth)<=coalesce(max_experience,0)
					     else 1=1 end
				)c left join candidateEmpDefinedSkill cds on cds.candidateUserId = c.candidateUserId    and find_in_set(cds.skillName, coalesce(soft_skills,cds.skillName))   and cds.isDeleted=0
			 )d  group by d.candidateUserId	
		)e order by CASE WHEN  sort_column='candidateName_asc' THEN candidateName END ASC,
					CASE WHEN  sort_column='candidateName_desc' THEN candidateName END DESC,
                    CASE WHEN  sort_column='experience_asc' THEN minExperienceMonth END asc,
                    CASE WHEN  sort_column='experience_desc' THEN minExperienceMonth END DESC,
                    CASE WHEN  sort_column='radius_asc' THEN radius END asc,
                    CASE WHEN  sort_column='radius_desc' THEN radius END DESC,
                    CASE WHEN  sort_column='availabilityStatus_asc' THEN availabilityStatus END asc,
                    CASE WHEN  sort_column='availabilityStatus_desc' THEN availabilityStatus END DESC,
                    CASE WHEN  sort_column='matchPercent_asc' THEN matchPercent END asc,
                    CASE WHEN  sort_column='matchPercent_desc' THEN matchPercent END DESC,
                    CASE WHEN  sort_column='candidateHRStatus_asc' THEN candidateHRStatus END asc,
                    CASE WHEN  sort_column='candidateHRStatus_desc' THEN candidateHRStatus END DESC
                    
        )t where candidateUserId is not null
		LIMIT no_of_records OFFSET start_record           
                    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateProfileSearchTemp` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateProfileSearchTemp`(
 
 IN sub_clasificationId bigint
,IN jobProfileHireRequest_Id  bigint
,IN minProximity bigint
,IN maxProximity bigint
,IN min_experience bigint
,IN max_experience bigint
,IN skills nvarchar(200)
,IN soft_skills nvarchar(200)
,IN business_id bigint
,IN sort_column nvarchar(50)
,IN language_id int
,IN is_WHB bit

,IN proximity_weightage float
,IN availability_weightage float
,IN skills_total_weightage float
,IN skills_ind_weightage float
,IN softskills_total_weightage float
,IN softskills_ind_weightage float

,IN emp_start_date date
,IN emp_end_date date
,IN search_type tinyint  -- 1 - all 2 - reg by business
,IN start_record bigint(20)  
,IN no_of_records int(11) 

)
BEGIN


/*
call est_skillsconnect.GetCandidateProfileSearch(1, 13, 0, 100000, null, null, 'null', 'null', 1, 'candidateName_desc', 264, null, 25, 25, 0, 0, 25, 6.4, '2015-04-10', '2015-07-10', 1, 0, 100)

candidateName_asc
candidateName_desc
experience_asc
experience_desc
radius_asc
radius_desc
availabilityStatus_asc
availabilityStatus_desc
matchPercent_asc
matchPercent_asc
matchPercent_desc
*/

declare total_weightage decimal(18,2)
declare hireRequestDays int
declare shift_type int
declare business_latitude decimal(18,8)
declare business_longitude decimal(18,8)
declare proximityCalculation_Value decimal(18,5)
declare proximityCalculated_In nvarchar(10)

-- select lastMinuteHire, lastMinuteHireCand into lastMinuteHireCount, lastMinuteHireCandId

set total_weightage = (proximity_weightage+availability_weightage+skills_total_weightage+softskills_total_weightage)
set hireRequestDays = (select count(distinct weekDayId) from hireRequestShiftDays  sd inner join hireRequestShift s on sd.hireRequestShiftId = s.hireRequestShiftId where jobProfileHireRequestId =jobProfileHireRequest_Id and sd.isDeleted =0 and s.isDeleted =0)
set shift_type = (select case when (select shiftType from hireRequestDetail where jobProfileHireRequestId=jobProfileHireRequest_Id limit 1) = 2 then 1 else 0 end)

-- set business_latitude = (select latitude  from business where businessId =  business_id)
-- set business_longitude = (select longitude from business where businessId =  business_id)

select latitude,longitude,proximityCalculationValue,proximityCalculatedIn into business_latitude, business_longitude,proximityCalculation_Value,proximityCalculated_In
from hireRequestDetail hrd 
inner join businessSite bs on hrd.businessSiteId = bs.businessSiteId
inner join country c on c.countryId = bs.countryId
where jobProfileHireRequestId = jobProfileHireRequest_Id limit 1

-- select @hireRequestDays
	
    
    select   candidateUserId
			,firstName
            ,lastName
			,candidateName
			,latitude
			,longitude
			,workedHereBefore
			,availabilityStatus
			,minExperienceMonth
			,maxExperienceMonth
			,ROUND(radius,2) as radius
			,hireRequestCandidateId
			,CEILING(matchPercent) as matchPercent
            ,FOUND_ROWS() as TotalRecords
            ,candidateHRStatus
            ,paidStatus
            ,proximityCalculated_In
            
    from (
	 select *, (((coalesce(empSkillCount,0)* skills_ind_weightage) + (defSkillCount* softskills_ind_weightage) + (availabilityStatus* availability_weightage) + proximity_weightage)/total_weightage)*100 as matchPercent from 
		( -- e
			select d.candidateUserId,firstName,lastName,candidateName,latitude,longitude,empSkillCount,workedHereBefore,availabilityStatus,minExperienceMonth,maxExperienceMonth,radius,count(definedSkill) as defSkillCount , availableDayCount,hireRequestCandidateId,candidateHRStatus,paidStatus  from 
            ( -- d
				select c.candidateUserId, firstName,lastName,candidateName,latitude,longitude,cds.skillName as definedSkill,empSkillCount, workedHereBefore, availabilityStatus,minExperienceMonth,maxExperienceMonth,radius, availableDayCount,hireRequestCandidateId,candidateHRStatus,paidStatus from 
				( -- c
					-- select *-- , count(coalesce(EmpskillName,"Nil")) as empSkillCount 
                    -- from 
                    -- ( -- b
						select * from 
						( -- a
							select   firstName,lastName,a1.candidateUserId,candidateName,latitude,longitude,EmpskillName,workedHereBefore,availabilityStatus,minExperienceMonth,maxExperienceMonth,radius,availableDayCount,hireRequestCandidateId,candidateHRStatus,paidStatus,empSkillCount
                            from (
							select  distinct 
                             firstName
                            ,lastName
							,cu.candidateUserId
							,concat(firstName, " ", coalesce(middleName,'') , lastName) as candidateName
							,latitude  
							,longitude
                            ,cp.candidateEmpProfileID
                            ,(select case when businessName=cpe.companyName then 1 else 0 end from business where businessid =  business_id and isDeleted=0) as workedHereBefore
                            ,case when exists (select 1 from hireRequestCandidate hc inner join hireRequestDetail jphr on hc.jobProfileHireRequestId = jphr.jobProfileHireRequestId where candidateUserId=cu.candidateUserId and candidateHRStatus in (9,11) and ((empStartDate between emp_start_date and emp_end_date) or (empEndDate between emp_start_date and emp_end_date))) then 0 else 1 end as availabilityStatus
							,cast(sum(expMinMonth) as SIGNED) as minExperienceMonth
							,cast(sum(expMaxMonth) as SIGNED) as maxExperienceMonth
                            ,((SQRT(POWER(69.1 * ( latitude -  business_latitude),  2) + POWER(69.1 * (  business_longitude  - longitude )  * COS(latitude / 57.3), 2)) ) * proximityCalculation_Value)  as radius
                            ,(select count(distinct dayId) from candidateEmpAvailWorkingTime t inner join hireRequestShiftDays sd on t.dayId =sd.weekDayId inner join hireRequestShift s on sd.hireRequestShiftId = s.hireRequestShiftId where jobProfileHireRequestId =jobProfileHireRequest_Id  and t.candidateUserId = cu.candidateUserId) as availableDayCount
							,hireRequestCandidateId
                            ,candidateHRStatus
                            ,coalesce(hrc.paidStatus,0) as paidStatus
							from scUser u
							inner join candidateUser cu on u.userId = cu.candidateUserId
							inner join candidateDetail cd on cd.candidateUserId = cu.candidateUserId
							left join candidateEmpProfile cp on cp.candidateUserId = cd.candidateUserId and cp.isDeleted =0  
							left join candidateEmpProfileExperience cpe on cpe.candidateEmpProfileID = cp.candidateEmpProfileID and cpe.isDeleted =0  
							left join candidateEmpAvailability cea on cea.candidateUserId = cu.candidateUserId  -- and cea.isDeleted =0  
                            left join hireRequestCandidate hrc on cu.candidateUserId = hrc.candidateUserId   and jobProfileHireRequestId = jobProfileHireRequest_Id and hrc.isDeleted =0 --  and candidateHRStatus <>0
							where u.isDeleted= 0 
							and (emp_start_date between availableStartDate and coalesce(availableEndDate,emp_end_date)) and ( emp_end_date between availableStartDate and coalesce(availableEndDate,emp_end_date))
							and coalesce(cp.employmentProfileID,0) =  coalesce(sub_clasificationId,coalesce(cp.employmentProfileID,0))
                            and case when shift_type=1 then shiftJob =1 else 1=1 end
                            group by candidateUserId, candidateEmpProfileID
                            )a1
                            left join
                            (
                            select *, count(coalesce(EmpskillName,"Nil")) as empSkillCount from
								(
								select distinct cu.candidateUserId 
								,cp.candidateEmpProfileID
								,case when cps.isOther=0 then sl.skillName else otherSkill end  as EmpskillName
								from candidateUser cu
								left join candidateEmpProfile cp on cp.candidateUserId = cu.candidateUserId and cp.isDeleted =0  
								left join candidateEmpProfileExperience cpe on cpe.candidateEmpProfileID = cp.candidateEmpProfileID and cpe.isDeleted =0  
								left join candidateEmpProfileExpSkill cps on cps.candidateEmpProfileExpId = cpe.candidateEmpProfileExpId and cps.isDeleted =0
								left join skillLocale sl on sl.skillId = cps.skillId and languageId =  language_id	
								where isOther is not null 
								)a21 where find_in_set(EmpskillName, coalesce(skills,EmpskillName))
								group by candidateUserId
                            ) a2 on a1.candidateUserId = a2.candidateUserId and a1.candidateEmpProfileID = a2.candidateEmpProfileID 
						)a  where  availableDayCount >= hireRequestDays  and (radius between minProximity and maxProximity) and workedHereBefore =  coalesce(is_WHB,workedHereBefore) 
						and case when (min_experience is not null and max_experience is not null) then ((coalesce(minExperienceMonth,0) >= coalesce(min_experience,coalesce(minExperienceMonth,0))) and ((coalesce(minExperienceMonth,0) <= coalesce(max_experience,coalesce(maxExperienceMonth,minExperienceMonth)))))
								 else 1=1 end
				)c left join candidateEmpDefinedSkill cds on cds.candidateUserId = c.candidateUserId    and find_in_set(cds.skillName, coalesce(soft_skills,cds.skillName))   
			 )d  group by d.candidateUserId	
		)e order by CASE WHEN  sort_column='candidateName_asc' THEN candidateName END ASC,
					CASE WHEN  sort_column='candidateName_desc' THEN candidateName END DESC,
                    CASE WHEN  sort_column='experience_asc' THEN minExperienceMonth END asc,
                    CASE WHEN  sort_column='experience_desc' THEN minExperienceMonth END DESC,
                    CASE WHEN  sort_column='radius_asc' THEN radius END asc,
                    CASE WHEN  sort_column='radius_desc' THEN radius END DESC,
                    CASE WHEN  sort_column='availabilityStatus_asc' THEN availabilityStatus END asc,
                    CASE WHEN  sort_column='availabilityStatus_desc' THEN availabilityStatus END DESC,
                    CASE WHEN  sort_column='matchPercent_asc' THEN matchPercent END asc,
                    CASE WHEN  sort_column='matchPercent_desc' THEN matchPercent END DESC,
                    CASE WHEN  sort_column='candidateHRStatus_asc' THEN candidateHRStatus END asc,
                    CASE WHEN  sort_column='candidateHRStatus_desc' THEN candidateHRStatus END DESC
                    
        )t where candidateUserId is not null
		LIMIT no_of_records OFFSET start_record           
                    

				 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateQualification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateQualification`( 
IN candidate_id bigint(20)
,IN language_Id bigint(20) )
BEGIN



/*
 Author: James
 Date  : 20/11/2014
 Description : Get candidate Qualification
*/
	

	select   	cq.candidateQualificationId,
				cq.candidateUserId,
				cq.courseId,
				cl.courseName,
				cq.institutionName ,
				cq.yearOfCompletion 
	from candidateQualification cq  
    left join courseLocale cl on cq.courseId=cl.courseId and cl.languageId=language_Id  
    where candidateUserId = candidate_id and isDeleted=0 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateQualificationDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateQualificationDocument`(
IN	candidateUser_Id	bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Get candidate Qualification Document
*/
	select 	candidateQualificationDocumentId
		,	cqd.candidateQualificationId
		,	documentName
		,	documentPath
		,	documentMimeType
		,	eTag
        , 	fileStatus
	 from candidateQualificationDocument cqd inner join candidateQualification cq 
     on cqd.candidateQualificationId=cq.candidateQualificationId
     where cq.candidateUserId =candidateUser_Id 
     and cqd.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateQualificationDocumentDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateQualificationDocumentDetail`(
IN candidate_id bigint(20)
,IN language_Id bigint(20) )
BEGIN

/*
 Author: James
 Date  : 20/11/2014
 Description : Get candidate Qualification Document detail
*/

	select   	cq.candidateQualificationId
		,		cq.candidateUserId
		,		cq.courseId
		,		cl.courseName
		,		cq.institutionName 
		,		cq.yearOfCompletion 
		,	candidateQualificationDocumentId
		,	documentName
		,	documentPath
		,	documentMimeType
		,	eTag
        , 	fileStatus
	from candidateQualification cq  
    left join courseLocale cl on cq.courseId=cl.courseId  and cl.languageId=language_Id
	left join candidateQualificationDocument cqd on cqd.candidateQualificationId=cq.candidateQualificationId  and cqd.isDeleted=0
    where candidateUserId = candidate_id and cq.isDeleted=0 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateSearchExperience` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateSearchExperience`(
IN jobProfile_Id bigint
,IN language_Id bigint
)
BEGIN
 

/*
 Author: James
 Date  : 20/03/2015
 Description : Drop down data for experinece feild in candidate search page.
*/

select candidateSearchExp
	 ,minExpMonth
     ,maxExpMonth
     ,0 as  isJobProfile 
from candidateSearchExpLocale where languageId=language_Id

union all

select 
	case when jpl2.jobProfileExp is null then jpl.jobProfileExp 
	when jpl.jobProfileExpId is null and jpl2.jobProfileExpId is not null  then jpl2.jobProfileExp
	else concat(jpl.jobProfileExp," - ", jpl2.jobProfileExp) end  as candidateSearchExp
	,case when jpl2.jobProfileExpId is null then null else  jpl.minExpMnth end as  expMin 
    ,case when expMax is null then  jpl2.maxExpMnth else expMax end as expMax
    ,1 as  isJobProfile from jobProfile jp 
left join jobProfileExpLocale jpl on jpl.jobProfileExpId=jp.expMinId and jpl.languageId=language_Id
left join jobProfileExpLocale jpl2 on jpl2.jobProfileExpId=jp.expMaxId  and jpl2.languageId=language_Id
where jobProfileId= jobProfile_Id and isDeleted=0 



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatesForBusinessSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatesForBusinessSite`(
IN businessSite_Id BIGINT(20),
in timeDiff_InMinutes int(11))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get candidate for business site
*/
	
	SELECT scu.userId AS candidateId,
	CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
	CASE WHEN hrd.empStartDate<DATE(DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE))
		THEN DATE(DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE))
		ELSE hrd.empStartDate END AS startDate,
	CASE WHEN hrd.empEndDate>GetWeekEndDateByDate(hrd.empStartDate,hrd.empEndDate,timeDiff_InMinutes)
		THEN GetWeekEndDateByDate(hrd.empStartDate,hrd.empEndDate,timeDiff_InMinutes)
		ELSE hrd.empEndDate END AS endDate,
	hrc.jobProfileHireRequestId,
	jphr.jobProfileId,
	hrc.createdBy,
	scu1.emailId AS managerEmail
	FROM hireRequestCandidate hrc
	INNER JOIN jobProfileHireRequest jphr ON hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId
	INNER JOIN hireRequestDetail hrd ON jphr.jobProfileHireRequestId=hrd.jobProfileHireRequestId
	INNER JOIN scUser scu ON hrc.candidateUserId=scu.userId
	LEFT JOIN scUser scu1 ON hrc.createdBy=scu1.userId
	WHERE hrd.businessSiteId=businessSite_Id AND hrc.candidateHRStatus = 11 AND hrd.shiftType=1
		AND hrd.empStartDate<=DATE(DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)) 
		AND hrd.empEndDate>=DATE(DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)) 
		AND hrc.isDeleted=0 AND jphr.isDeleted=0 AND hrd.isDeleted=0 AND scu.isDeleted=0
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatesForRoster` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatesForRoster`(
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id BIGINT(20),
IN roster_date DATE,
IN language_Id BIGINT(20)
,IN manager_Id bigint
)
BEGIN
/*
 Author: James
 Date  : 18/06/2015
 Description : Get candidates for roster
*/ 
		declare moveRostered_Staff bit(1)

		set moveRostered_Staff=(SELECT  moveRosteredStaff FROM businessUserSetting where userId=manager_Id )

		set moveRostered_Staff= coalesce( moveRostered_Staff,1)
		set @totalAcceptedHours=0
		set @totalAssignedHours=0

SELECT DISTINCT crd.candidateId,
		 CONCAT(scu.firstName,' ',scu.lastName) AS candidateName
		,etl.employmentType
		,@totalAcceptedHours:=ROUND(GetCandidateTotalHoursForWeekByDate(crd.candidateId,roster_date,crd.businessSiteId,manager_Id),2) AS totalAcceptedHours
		,CheckCandidateOverTime(etl.employmentType,@totalAcceptedHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAcceptedHours
		,upi.imagePath
		,scu.firstName
		,scu.lastName
		,ROUND(GetCandidateTotalExperience(crd.candidateId),1) AS seniority
		,moveRostered_Staff as moveRostered_Staff    
		,@totalAssignedHours:=ROUND(GetCandidateTotalAssignedHoursForWeekByDate(crd.candidateId,roster_date,crd.businessSiteId,manager_Id),2) AS totalAssignedWorkHours
		,CheckCandidateOverTime(etl.employmentType,@totalAssignedHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAssignedHours
		,crd.empEndDate
		,emailId
		,uc.mobilePhone
		,scu.encryptionKey
        ,bs.businessId
        ,bcs.isEmergency as isEmergency
        ,crd.jobProfileHireRequestId
        ,jp.jobClassificationId
        ,jcl.jobClassification
        ,jp.awardId
		,al.awardName
		,jp.gradeLevelId
		,gl.gradeLevel 
		,hrc.agreedHours 
        ,cd.dob 
FROM vwCandidateRosterDetails crd
INNER JOIN scUser scu ON crd.candidateId=scu.userId AND scu.isDeleted=0
LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
left join userContact uc on uc.userId=scu.userId and uc.isDeleted=0
inner join businessSite bs on bs.businessSiteId=crd.businessSiteId and bs.isDeleted=0
INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId 
inner join hireRequestCandidate hrc on hrc.jobProfileHireRequestId=crd.jobProfileHireRequestId and hrc.candidateUserId=crd.candidateId and hrc.isDeleted=0
-- left join hireRequestCandidateAllowance hra on hra.hireRequestCandidateId=hrc.hireRequestCandidateId and hra.isDeleted=0
-- left join allowanceLocale awl on hra.allowanceId=awl.allowanceId and awl.languageId=language_Id
left join jobClassificationLocale jcl on jcl.jobClassificationId=jp.jobClassificationId and jcl.languageId=language_Id
LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id 
left join awardLocale al on jp.awardId=al.awardId and al.languageId =language_Id
left join gradeLevelLocale gl on jp.gradeLevelId=gl.gradeLevelId and gl.languageId=language_Id
left join businessSettings bss on bss.businessSiteId=crd.businessSiteId and bss.departmentId=crd.departmentId 
left join businessCandidateSettings bcs on bs.businessId=bcs.businessId and bcs.candidateUserId=crd.candidateId
left join candidateDetail cd on cd.candidateUserId=crd.candidateId 
WHERE crd.empEndDate>=roster_date AND crd.businessSiteId=businessSite_Id
	  AND crd.departmentId=department_Id AND crd.jobSubClassificationId=subClassification_Id
	   AND (crd.empStartDate <= roster_date)
	  
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatesForRosterByDateRange` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatesForRosterByDateRange`(
 IN businessSite_Id BIGINT(20)
,IN department_Id BIGINT(20)
,IN subClassification_Id BIGINT(20)
,IN start_Date date
,IN end_Date date
,IN language_Id BIGINT(20)
,IN manager_Id bigint
)
BEGIN

/*
 Author: James
 Date  : 29/04/2016
 Description : Get Available Candidates for Roster in Week view
*/ 

		declare moveRostered_Staff bit(1)

		set moveRostered_Staff=(SELECT  moveRosteredStaff FROM businessUserSetting where userId=manager_Id )

		set moveRostered_Staff= coalesce( moveRostered_Staff,1)
		set @totalAcceptedHours=0
		set @totalAssignedHours=0
        
	SELECT DISTINCT crd.candidateId 
			,scu.firstName
			,scu.lastName
            ,upi.imagePath
            ,emailId
			,uc.mobilePhone
			,scu.encryptionKey
			,bs.businessId
			,bcs.isEmergency as isEmergency 
            ,@totalAcceptedHours:=ROUND(GetCandidateTotalHoursForWeekByDate(crd.candidateId,start_Date,crd.businessSiteId,manager_Id),2) AS totalAcceptedHours
			,CheckCandidateOverTime(etl.employmentType,@totalAcceptedHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAcceptedHours
			,@totalAssignedHours:=ROUND(GetCandidateTotalAssignedHoursForWeekByDate(crd.candidateId,start_Date,crd.businessSiteId,manager_Id),2) AS totalAssignedWorkHours
			,CheckCandidateOverTime(etl.employmentType,@totalAssignedHours,crd.businessSiteId,crd.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAssignedHours
			,ROUND(GetCandidateTotalExperience(crd.candidateId),1) AS seniority
			,moveRostered_Staff as moveRosteredStaff    			
	FROM vwCandidateRosterDetails crd
	INNER JOIN scUser scu ON crd.candidateId=scu.userId AND scu.isDeleted=0
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	left join userContact uc on uc.userId=scu.userId and uc.isDeleted=0
	INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId 
	inner join businessSite bs on bs.businessSiteId=crd.businessSiteId and bs.isDeleted=0
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id  
	left join businessSettings bss on bss.businessSiteId=crd.businessSiteId and bss.departmentId=crd.departmentId 
	left join businessCandidateSettings bcs on bs.businessId=bcs.businessId and bcs.candidateUserId=crd.candidateId
	WHERE  crd.businessSiteId=businessSite_Id
		  AND crd.departmentId=department_Id AND crd.jobSubClassificationId=coalesce(subClassification_Id,crd.jobSubClassificationId)
		  AND ((crd.empStartDate <= start_Date and crd.empEndDate>=start_Date ) or (crd.empStartDate <= end_Date and crd.empEndDate>=end_Date ))
		  
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateShiftCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateShiftCount`(
 in candidate_UserId varchar(10000)
,in start_Date date
,in end_Date date
)
BEGIN
/*
 Author: James
 Date  : 10/06/2016
 Description : day wise shift total
 */



select candidateId,shiftDate,count(1)totalShift from (
	select distinct candidateId, date(shiftStartDateTime) shiftDate,shiftOfferId from candidateShiftOffer 
	where find_in_set(candidateId,candidate_UserId) and date(shiftStartDateTime) between start_Date and end_Date
	and  status IN (1,2,3,4,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,46,48,60,61,62,63)
	union
	select distinct cg.candidateId, date(shiftStartDateTime) shiftDate,so.shiftOfferId from candidateShiftOffer so 
	inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
	where find_in_set(cg.candidateId,candidate_UserId) and date(shiftStartDateTime) between start_Date and end_Date
	and cg.status in(1,48,49,39,11,60,61,62,63)
)a group by candidateId,shiftDate 
order by candidateId,shiftDate 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateShiftDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateShiftDetail`(
 in  candidate_UserId  varchar(10000)
,in shiftStart_DateTime  datetime
)
BEGIN

/*
Author			: James
Date  			: 17/06/2016
Description 	: Get shift details for wage calculation
call est_skillsconnect_dev.GetCandidateShiftDetail('2242,2243', '2016-06-17')

*/
set @candidate_Id=0
set @rown=0
set @nextCandidate_Id=0
set @nextRown=0

		select u.userId as candidateUserId
				,p.shiftStartDateTime as prevShiftStartDateTime
				,p.shiftEndDateTime as prevShiftEndDateTime
				,p.isFlexibleShiftTime as prevIsFlexibleShiftTime
				,p.shiftEndTimeType  as prevShiftEndTimeType
				,p.shiftEndTimeValue as prevShiftEndTimeValue
				,n.shiftStartDateTime as nextShiftStartDateTime
				,n.shiftEndDateTime as nextShiftEndDateTime
				,n.isFlexibleShiftTime as nextIsFlexibleShiftTime
				,n.shiftEndTimeType as nextShiftEndTimeType
				,n.shiftEndTimeValue as nextShiftEndTimeValue
		from scUser u 
		left join (
			select candidateId,shiftStartDateTime,shiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue  from (
				select *,@rown :=if(@candidate_Id =candidateId,@rown +1,1) as rownum ,@candidate_Id :=candidateId from (
						select candidateId,shiftStartDateTime,shiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue 
						from candidateShiftOffer 
						where find_in_set(candidateId ,candidate_UserId) and shiftStartDateTime<shiftStart_DateTime 
						and status NOT IN (3,10,19,33,36) and isDeleted=0
						union 
						select cg.candidateId,shiftStartDateTime,shiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue 
						from candidateShiftOffer so inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
						where find_in_set(cg.candidateId ,candidate_UserId) and shiftStartDateTime<shiftStart_DateTime 
						and  cg.status in (1,49,60,62,63)   and isDeleted=0
				)a order by candidateId,shiftStartDateTime desc
			)a where rownum=1
		)p on u.userId=p.candidateId
		left join (
			select candidateId,shiftStartDateTime,shiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue  from (
				select *,@nextRown :=if(@nextCandidate_Id =candidateId,@nextRown +1,1) as rownum ,@nextCandidate_Id :=candidateId from (
						select candidateId,shiftStartDateTime,shiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue 
						from candidateShiftOffer 
						where find_in_set(candidateId ,candidate_UserId) and shiftStartDateTime>shiftStart_DateTime 
						and status NOT IN (3,10,19,33,36) and isDeleted=0
						union 
						select cg.candidateId,shiftStartDateTime,shiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue 
						from candidateShiftOffer so inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
						where find_in_set(cg.candidateId ,candidate_UserId) and shiftStartDateTime>shiftStart_DateTime 
						and  cg.status in (1,49,60,62,63)   and isDeleted=0
				)a order by candidateId,shiftStartDateTime asc
			)a where rownum=1
		)n on u.userId=n.candidateId
		where find_in_set(u.userId,candidate_UserId) 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatesHireDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatesHireDetail`(
 in  businessSite_Id bigint(20)
,in  department_Id bigint(20)
,in  subClassification_Id bigint(20)
,in  language_Id bigint(20)
,in  start_Date date
,in  end_Date date
)
BEGIN
/*
 Author: James
 Date  : 18/06/2015
 Description : Get candidates for Hire Details for Roster
*/ 

SELECT DISTINCT crd.candidateId   
        ,jp.jobClassificationId
        ,jcl.jobClassification
        ,jp.jobSubClassificationId
        ,jsl.jobSubClassification
        ,jp.employmentTypeId
        ,etl.employmentType
        ,crd.empStartDate
        ,crd.empEndDate
        ,jp.awardId
		,al.awardName
		,jp.gradeLevelId
		,gl.gradeLevel 
		,hrc.agreedHours 
        ,cd.dob
        ,scu.encryptionKey
        ,ROUND(GetCandidateTotalExperience(crd.candidateId),1) AS seniority  
FROM vwCandidateRosterDetails crd
INNER JOIN scUser scu ON crd.candidateId=scu.userId AND scu.isDeleted=0 
INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId 
inner join businessSite bs on bs.businessSiteId=crd.businessSiteId and bs.isDeleted=0
inner join hireRequestCandidate hrc on hrc.jobProfileHireRequestId=crd.jobProfileHireRequestId and hrc.candidateUserId=crd.candidateId and hrc.isDeleted=0
-- left join hireRequestCandidateAllowance hra on hra.hireRequestCandidateId=hrc.hireRequestCandidateId and hra.isDeleted=0
-- left join allowanceLocale awl on hra.allowanceId=awl.allowanceId and awl.languageId=language_Id
left join jobClassificationLocale jcl on jcl.jobClassificationId=jp.jobClassificationId and jcl.languageId=language_Id 
left join jobSubClassificationLocale jsl on jsl.jobSubClassificationId=jp.jobSubClassificationId and jsl.languageId=language_Id
LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id 
left join awardLocale al on jp.awardId=al.awardId and al.languageId =language_Id
left join gradeLevelLocale gl on jp.gradeLevelId=gl.gradeLevelId and gl.languageId=language_Id
left join candidateDetail cd on cd.candidateUserId=crd.candidateId 
WHERE  crd.businessSiteId=businessSite_Id
	  AND crd.departmentId=department_Id  AND crd.jobSubClassificationId=coalesce(subClassification_Id,crd.jobSubClassificationId)
	  AND ((crd.empStartDate <= start_Date and crd.empEndDate>=start_Date ) or (crd.empStartDate <= end_Date and crd.empEndDate>=end_Date ))
      
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidatesHireDetailByShiftId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidatesHireDetailByShiftId`(
 in shiftOffer_Id varchar(10000)
,in  language_Id bigint(20)
,in  candidate_UserId bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 18/06/2015
 Description : Get candidates for Hire Details for Roster
*/ 

Declare currency_Id int
Declare currency_Code  varchar(20)
declare manager_Id bigint(20)

select distinct  cl.currencyId,cl.currencyCode,ur.userRoleId into currency_Id, currency_Code,manager_Id  from userRoleBusinessSite urbs 
inner join candidateShiftOffer so on urbs.businessSiteId=so.businessSiteId and find_in_set(so.shiftOfferId,shiftOffer_Id)
inner join userRole ur on urbs.userRoleId=ur.userRoleId  
inner join businessSite bs on bs.businessSiteId=urbs.businessSiteId and bs.isDeleted=0
inner join business b on bs.businessId=b.businessId
inner join currency c on c.countryId = b.countryId
inner join currencyLocale cl on c.currencyId = cl.currencyId and cl.languageId = language_Id
where ur.isDeleted=0 and urbs.isDeleted=0 and find_in_set(so.shiftOfferId,shiftOffer_Id)
limit 1  



	select DISTINCT so.shiftOfferId
			,crd.candidateId   
			,jp.jobClassificationId
			,jcl.jobClassification
			,jp.jobSubClassificationId
			,jsl.jobSubClassification
			,jp.employmentTypeId
			,etl.employmentType
			,crd.empStartDate
			,crd.empEndDate
			,jp.awardId
			,al.awardName
			,jp.gradeLevelId
			,gl.gradeLevel 
			,hrc.agreedHours 
			,cd.dob
			,scu.encryptionKey
			,ROUND(GetCandidateTotalExperience(crd.candidateId),1) AS seniority  
			,cl.countryName
			,sl.stateName
            ,currency_Id as businessCurrencyId
            ,currency_Code as businessCurrencyCode
            ,shiftStartDateTime
            ,shiftEndDateTime
            , GetWeekStartDate(shiftStartDateTime,manager_Id) as weekStartDate
            , DATE_ADD(GetWeekStartDate(shiftStartDateTime,manager_Id), INTERVAL 6 DAY) as weekEndDate
            ,ROUND(GetCandidateTotalAssignedHoursForWeekByDate(crd.candidateId,date(shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAssignedHours 
            ,ROUND(GetCandidateTotalHoursForWeekByDate(crd.candidateId,date(shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAcceptedHours
	from (
			select shiftOfferId,businessSiteId ,departmentId,subClassificationId,candidateId,date(shiftStartDateTime)as shiftStartDate,shiftStartDateTime,shiftEndDateTime
			from candidateShiftOffer 
			where find_in_set(shiftOfferId,shiftOffer_Id) and isDeleted=0 and status NOT IN (10,19,33,36) and candidateId=coalesce(candidate_UserId,candidateId) and candidateId<>0
			union 
			select so.shiftOfferId,businessSiteId ,departmentId,subClassificationId,cg.candidateId,date(shiftStartDateTime)as shiftStartDate,shiftStartDateTime,shiftEndDateTime
			from candidateShiftOffer so inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
			where find_in_set(so.shiftOfferId,shiftOffer_Id) and isDeleted=0 and so.status NOT IN (10,19,33,36) and cg.candidateId=coalesce(candidate_UserId,cg.candidateId)
	)so inner join vwCandidateRosterDetails crd on crd.businessSiteId=so.businessSiteId and crd.departmentId=so.departmentId and crd.jobSubClassificationId=so.subClassificationId and crd.candidateId=so.candidateId
	inner join businessSite bs on bs.businessSiteId=so.businessSiteId and bs.isDeleted=0
	inner join scUser scu on scu.userId=so.candidateId and scu.isDeleted=0
	inner join jobProfile jp on jp.jobProfileId=crd.jobProfileId and jp.isDeleted=0
	inner join hireRequestCandidate hrc on hrc.jobProfileHireRequestId=crd.jobProfileHireRequestId and hrc.candidateUserId=crd.candidateId and hrc.isDeleted=0
	-- left join hireRequestCandidateAllowance hra on hra.hireRequestCandidateId=hrc.hireRequestCandidateId and hra.isDeleted=0
	-- left join allowanceLocale awl on hra.allowanceId=awl.allowanceId and awl.languageId=language_Id
	left join jobClassificationLocale jcl on jcl.jobClassificationId=jp.jobClassificationId and jcl.languageId=language_Id 
	left join jobSubClassificationLocale jsl on jsl.jobSubClassificationId=jp.jobSubClassificationId and jsl.languageId=language_Id
	left join employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id 
	left join awardLocale al on jp.awardId=al.awardId and al.languageId =language_Id
	left join gradeLevelLocale gl on jp.gradeLevelId=gl.gradeLevelId and gl.languageId=language_Id
	left join candidateDetail cd on cd.candidateUserId=crd.candidateId 
	left join countryLocale cl on cl.countryId=bs.countryId and cl.languageId=language_Id
	left join stateLocale sl on sl.stateId=bs.stateId and sl.languageId=language_Id
	where so.shiftStartDate between crd.empStartDate and crd.empEndDate
    order by so.shiftOfferId ,so.candidateId
	 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateStep` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateStep`(
IN	candidate_UserId bigint
)
BEGIN

/*

 Author: James
 Date  : 26/12/2014
 Description : Get Candidate screeen completion status

step Status 0 -- Blank
			1 -- incomplete
            2 -- complete 
            
      call est_skillsconnect.GetCandidateStep(50)
      
*/

    
   select case when (select count(1) from candidateScreenSectionDetail sd1 where sd1.screenSectionId in (1, 2, 6) and sd1.candidateUserId=candidate_UserId) = 3 then 2
	        else case when count(sd.screenSectionId) >0 then 1 else 0 end 
            end as step1
	, case when (select count(1) from candidateScreenSectionDetail sd2 where sd2.screenSectionId in (7, 8, 9) and sd2.candidateUserId=candidate_UserId) > 0  then 2
	        else 0
            end as step2
	, case when (select count(1) from candidateScreenSectionDetail sd3 where sd3.screenSectionId in (10) and sd3.candidateUserId=candidate_UserId) > 0  then 2
	        else 0
            end as step3
	, case when (select count(1) from candidateScreenSectionDetail sd4 where sd4.screenSectionId in (11, 12) and sd4.candidateUserId=candidate_UserId) > 0  then 2
	        else 0
            end as step4
	, case when (select count(1) from candidateScreenSectionDetail sd5 where sd5.screenSectionId in (13) and sd5.candidateUserId=candidate_UserId) > 0  then 2
	        else 0
            end as step5
	,sum(weightage) as completed
 from candidateScreenSectionDetail sd
 left join screenSection ss on sd.screenSectionId=ss.screenSectionId
 where candidateUserId =candidate_UserId and isCompleted=1
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateTimesheetsForManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateTimesheetsForManager`(
IN manager_Id BIGINT(20)
,IN weekStart_Date date
,IN weekEnd_Date	 date
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get candidate timesheets for manager
*/
	 	
	SELECT manager_Id AS managerId,
	so.departmentId,
	0 AS weekNumber,
	year(so.shiftStartDateTime) AS forYear,
	CONVERT(weekStart_Date, DATETIME) AS weekStartDate,
	CONVERT(weekEnd_Date, DATETIME) AS weekEndDate,
	so.shiftofferId,
	ct.timesheetId,
	ct.candidateId AS employeeId,
	CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
	so.shiftStartDateTime,
	so.shiftEndDateTime,
	ct.candidateComment,
	ct.disputeComment,
	ct.status,
	ct.actionBy,
	ct.actionOn,
	upi.imagePath
    ,so.isFlexibleShiftTime
    ,so.shiftEndTimeType
	,so.shiftEndTimeValue
	FROM candidateTimesheet ct
	INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
	INNER JOIN scUser scu ON ct.candidateId=scu.userId
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE ucs.userId=manager_Id AND (date(so.shiftStartDateTime) >= date(weekStart_Date) 
		AND date(so.shiftStartDateTime) <= date(weekEnd_Date))
		AND so.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateTotalRecord` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateTotalRecord`(
	IN Id	 bigint(20)
   ,IN documentType_Id	smallint(6) 
   ,IN type_Id	tinyInt
)
BEGIN
	/*
	 Author: James
	 Date  : 12/12/2014
	 Description : Get Candidate Document count, used for checking count limitations
	
    Type_id 1-- candidate document
			2-- Candidate Qualification Document
            3-- candidate country document            
			4--	Experience skills
            5-- Soft skills
            6-- Candidate Experience
            7-- candidate Qualification
            8-- Candidate Preference
            9-- Career
            10-- Candidate Profile Document
            11-- DL , SSnNo & other
    */ 
 


select Total from (
			SELECT COUNT(1)Total, 1 as typeId  FROM candidateDocument
			WHERE candidateUserId=Id AND documentTypeId=documentType_Id AND isDeleted=0 AND fileStatus=1
				union all 
			SELECT COUNT(1)Total,2 as typeId  FROM candidateQualificationDocument
			WHERE candidateQualificationId=Id AND isDeleted=0 AND fileStatus=1
				union all 
			SELECT COUNT(1)Total,3 as typeId FROM candidatePreferredCountryDocument
			WHERE candidatePreferredCountryId=Id AND isDeleted=0 AND fileStatus=1 
				union all 
			SELECT COUNT(1)Total,4 as typeId FROM candidateEmpProfileExpSkill
			WHERE  candidateEmpProfileExpId=Id AND isDeleted=0
				union all 
			SELECT COUNT(1)Total,5 as typeId FROM candidateEmpDefinedSkill
			WHERE  candidateUserId=Id
				union all 
			SELECT COUNT(1)Total,6 as typeId FROM candidateEmpProfileExperience
			WHERE  candidateEmpProfileId=Id AND isDeleted=0
				union all 
			SELECT COUNT(1)Total,7 as typeId  FROM candidateQualification
			WHERE  candidateUserId=Id AND isDeleted=0
				union all 
			SELECT COUNT(1)Total,8 as typeId   FROM candidateEmpProfilePreference cpp  
			WHERE cpp.candidateUserId=Id AND cpp.isDeleted=0  AND isPrefered=1
				union all 
			SELECT COUNT(1) Total,9 as typeId  FROM candidateEmpProfile cep INNER JOIN 
					(SELECT DISTINCT candidateEmpProfileId FROM candidateEmpProfileExperience) cepe
			ON cep.candidateEmpProfileId=cepe.candidateEmpProfileID
			WHERE cep.candidateUserId=Id AND cep.isDeleted=0 
				union all 
			SELECT COUNT(1) Total,10 as typeId  FROM   candidateEmpProfileDocument
			WHERE candidateEmpProfileId=Id AND isDeleted=0 AND fileStatus=1 
				union all
			SELECT COUNT(1)Total,11 as typeId  FROM candidateDocument
			WHERE candidateUserId=Id AND documentTypeId  IN(2,3,8) AND isDeleted=0 AND fileStatus=1
   )a where   typeId=type_Id  
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateUserId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateUserId`(
IN candidateEmpProfile_Id bigint
)
BEGIN


select candidateUserId from candidateEmpProfile
where candidateEmpProfileId=candidateEmpProfile_Id 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateWfInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateWfInstance`(
	IN	businessSite_Id	bigint(20)
,	IN	jobProfileHireRequest_Id	bigint(20)
,	in candidate_userId	bigint
)
BEGIN
	/*
	 Author: James
	 Date  : 26/02/2015
	 Description : Get candidate workflow instance
          call est_skillsconnect.GetCandidateWfInstance(null, 22, 1)
           
	*/
	    


select 	wfi.workflowInstanceId
	,	workFlowId
	,	currentStateId
	,	parentWorkflowInstanceId
	,	businessSiteId
	,	jobProfileHireRequestId
    ,	cwf.candidateUserId
from workFlowInstance wfi inner join candidateWfInstance cwf 
on wfi.workflowInstanceId=cwf.workflowInstanceId
where  jobProfileHireRequestId =coalesce(jobProfileHireRequest_Id,jobProfileHireRequestId) 
and coalesce(businessSiteId,0)=coalesce(businessSite_Id,coalesce(businessSiteId,0)) 
and cwf.candidateUserId=coalesce(candidate_userId,cwf.candidateUserId)
order by candidateWfInstanceId desc limit 1



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCandidateWorkPreference` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCandidateWorkPreference`(
  in  candidate_UserId      bigint(20)
, in  start_Date      date
, in  end_Date      date
, in time_Stamp timestamp
)
BEGIN
/*
 Author: James
 Date  : 05/04/2016
 Description : Get candidate work preference
*/
select 
		candidateWorkPreferenceId
	,	candidateUserId
	,	startDateTime
	,	endDateTime
	,	isDeleted
from candidateWorkPreference
where candidateUserId=candidate_UserId -- and isDeleted=0
and date(startDateTime) between start_Date and end_Date  
and coalesce(updatedOn,createdOn)>=time_Stamp



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCantWorkShiftList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCantWorkShiftList`(
IN manager_Id bigint
,IN week_StartDate date
,IN week_EndDate date
,IN language_Id bigint
,IN search_Type tinyint
)
BEGIN
/*
 Author: James
 Date  : 21/12/2015
 Description : Get cant work shift list
search_Type =1 -- Outstanding
			 2-- History 
*/ 

		set @totalAcceptedHours=0.0
        set @totalAssignedHours=0.0        
		set @prevCandTotalAcceptedHours=0.0
        set @prevCandTotalAssignedHours=0.0
        set  @rown=0 
		SELECT DISTINCT 
			manager_Id AS managerId
            ,so.businessSiteId
            ,bs.siteName
			,so.subClassificationId
			,jscl.jobSubClassification 
			,so.departmentId 
            ,bd.departmentName
			-- ,week_StartDate AS weekStartDate
			-- ,week_EndDate  AS weekEndDate
			,so.shiftOfferId
			,so.candidateId 
			,scu.firstName 
			,scu.lastName   
			,so.shiftStartDateTime
			,so.shiftEndDateTime 
			,so.status
			,sl.statusName
			,upi.imagePath                                  
			,@totalAcceptedHours:=ROUND(GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAcceptedHours
			,CheckCandidateOverTime(etl.employmentType,@totalAcceptedHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS IsOverTimeForAcceptedHour
            ,@totalAssignedHours:=ROUND(GetCandidateTotalAssignedHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAssignedHours
            ,CheckCandidateOverTime(etl.employmentType,@totalAssignedHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS IsOverTimeForAssignedHour
            ,uc.mobilePhone
			,scu.encryptionKey
			,(select shiftStartDateTime from candidateShiftOffer s1
				where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
				and s1.status NOT IN (3,10,19,33,36,60) order by s1.shiftStartDateTime limit 1) as nextShiftStartDateTime
			,(select shiftEndDateTime from candidateShiftOffer s1
				where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
				and s1.status NOT IN (3,10,19,33,36,60) order by s1.shiftStartDateTime limit 1) as nextShiftEndDateTime
			,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId ) as TotalOffered
			,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId and candidateStatus=3 ) as TotalDeclined
            ,hist.candidateUserId as prevCandidateId
			,hist.firstName as prevCandidateFirstName
			,hist.lastName  as prevCandidateLastName
			,hist.status   as prevShiftStatus
			,hist.statusName as prevShiftStatusName
			,hist.imagePath  as prevCandidateImagePath                              
			,@prevCandTotalAcceptedHours:=ROUND(GetCandidateTotalHoursForWeekByDate(hist.candidateUserId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS prevCandidateTotalAcceptedHours
			,CheckCandidateOverTime(hist.employmentType,@prevCandTotalAcceptedHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS prevCandidateIsOverTimeForAcceptedHour
            ,@prevCandTotalAssignedHours:=ROUND(GetCandidateTotalAssignedHoursForWeekByDate(hist.candidateUserId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS prevCandidateTotalAssignedHours
            ,CheckCandidateOverTime(hist.employmentType,@prevCandTotalAssignedHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS prevCandidateIsOverTimeForAssignedHour
            ,hist.mobilePhone as prevCandidateMobilePhone
			,hist.encryptionKey as prevCandidateEncryptionKey 	
            ,-- case when so.status in (46,47,48) then 
				(select lastMinuteHireId from lastMinuteHire lmh where lmh.shiftOfferId=so.shiftOfferId and lmh.isDeleted=0 order by lmh.lastMinuteHireId desc limit 1 ) AS lastMinuteHireId
               --  else 0 end 
			,GetCountBusinessShiftSick(manager_Id,2,null,null) as CantWorkOutstanding
			,GetCountBusinessShiftSick(manager_Id,3,week_StartDate,week_EndDate) as CantWorkHistory 
			,tz.timeDiffInMinutes as timeZoneOffset
             ,-- case when so.status in (46,47,48) then 
				(select status from lastMinuteHire lmh where lmh.shiftOfferId=so.shiftOfferId and lmh.isDeleted=0 order by lmh.lastMinuteHireId desc limit 1 )  AS LMHStatus
				-- else 0 end as 
			,so.isFlexibleShiftTime
            ,so.shiftEndTimeType
			,so.shiftEndTimeValue
            ,(select isFlexibleShiftTime from candidateShiftOffer s1
				where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
				and s1.status NOT IN (3,10,19,33,36,60) order by s1.shiftStartDateTime limit 1) as nextShiftFlexibleShiftTime
			,(select shiftEndTimeType from candidateShiftOffer s1
				where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
				and s1.status NOT IN (3,10,19,33,36,60) order by s1.shiftStartDateTime limit 1) as nextShiftEndTimeType
			,(select shiftEndTimeValue from candidateShiftOffer s1
				where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
				and s1.status NOT IN (3,10,19,33,36,60) order by s1.shiftStartDateTime limit 1) as nextShiftEndTimeValue
        FROM candidateShiftOffer so
		left JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
		left JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
		left JOIN scUser scu ON so.candidateId=scu.userId
        left join userContact uc on uc.userID=scu.userId and uc.isDeleted=0
		LEFT JOIN userProfileImage upi ON scu.userId=upi.userId 
		left JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
		LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id
        left join businessDepartment bd on bd.departmentId=so.departmentId
		INNER JOIN statusLookup sl ON so.status=sl.statusId
		INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
		INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
		left join (        
			select shiftOfferId,candidateShiftOfferHistoryId,candidateUserId,firstName,lastName,status,statusName,imagePath,mobilePhone,encryptionKey,employmentType from (
				select * ,@rown :=if(@shiftOfferId =shiftOfferId,@rown +1,1) as rownum ,@shiftOfferId :=shiftOfferId from (				
					select distinct so.shiftOfferId,soh.candidateShiftOfferHistoryId,soh.candidateUserId,scu.firstName,scu.lastName,soh.status,sl.statusName,upi.imagePath,so.shiftStartDateTime,uc.mobilePhone,scu.encryptionKey,etl.employmentType
					FROM candidateShiftOffer so
					left JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
					left JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
					inner join candidateShiftOfferHistory soh on soh.shiftOfferId=so.shiftOfferId and soh.isDeleted=0
                    INNER JOIN scUser scu ON soh.candidateUserId=scu.userId					
					left join userContact uc on uc.userID=scu.userId and uc.isDeleted=0
					LEFT JOIN userProfileImage upi ON scu.userId=upi.userId 
					left JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
					LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId AND etl.languageId=language_Id
					left join businessDepartment bd on bd.departmentId=so.departmentId
					INNER JOIN statusLookup sl ON soh.status=sl.statusId
					INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
					INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
					INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
					INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
					INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
					WHERE ucs.userId=manager_Id AND (so.status IN (10,12,38,36) or isCantWork=1)
                    and case when search_Type=1 then so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
						 when search_Type=2 then date(so.shiftEndDateTime) between week_StartDate and week_EndDate
						 else 1=2 end
					order by so.shiftOfferId,soh.candidateShiftOfferHistoryId desc
			)a )a where rownum=1  ) hist on hist.shiftOfferId=so.shiftOfferId  
        WHERE ucs.userId=manager_Id AND (so.status IN (10,12,38,36) or isCantWork=1)AND so.isDeleted=0
		AND case when search_Type=1 then so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
				 when search_Type=2 then date(so.shiftEndDateTime) between week_StartDate and week_EndDate 
						and so.shiftEndDateTime<DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
                 else 1=2 end  
         order by   so.shiftStartDateTime    desc   
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetChildAgencySite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetChildAgencySite`( IN ParentAgencySite_Id bigint(20) )
BEGIN
	
	declare ChildId bigint
	CREATE TEMPORARY TABLE  ChildAgencySite
	(
	  Child_Id bigint,
	  Is_Checked bit
	)

	insert into ChildAgencySite (Child_Id, Is_Checked)
	select AgencySiteId,0 from Agencysite where parentAgencySiteId = ParentAgencySite_Id  
		
	WHILE ((select count(1) from ChildAgencySite where Is_Checked =0) >0 ) DO
		SET ChildId = (SELECT Child_Id from ChildAgencySite WHERE Is_Checked =0 LIMIT 1)
		
		insert into ChildAgencySite (Child_Id, Is_Checked)
		select AgencySiteId,0 from Agencysite where parentAgencySiteId = ChildId  

		SET SQL_SAFE_UPDATES=0
		update ChildAgencySite set Is_Checked =1 where Child_Id = ChildId
		SET SQL_SAFE_UPDATES=1
	END WHILE

	select group_concat(distinct Child_Id) as ChildAgencySite  from ChildAgencySite
	drop table ChildAgencySite
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetChildBusinessSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetChildBusinessSite`( IN ParentBusinessSite_Id bigint(20) )
BEGIN
	
	declare ChildId bigint
	CREATE TEMPORARY TABLE  ChildBussinessSite
	(
	  Child_Id bigint,
	  Is_Checked bit
	)

	insert into ChildBussinessSite (Child_Id, Is_Checked)
	select businessSiteId,0 from businessSite where parentBusinessSiteId = ParentBusinessSite_Id  
		
	WHILE (select count(1) from ChildBussinessSite where Is_Checked=0 > 0 ) DO
		SET ChildId = (SELECT Child_Id from ChildBussinessSite WHERE Is_Checked =0 LIMIT 1)
		
		insert into ChildBussinessSite (Child_Id, Is_Checked)
		select businessSiteId,0 from businessSite where parentBusinessSiteId = ChildId  

		SET SQL_SAFE_UPDATES=0
		update ChildBussinessSite set Is_Checked =1 where Child_Id = ChildId
		SET SQL_SAFE_UPDATES=1
	END WHILE

	select group_concat(distinct Child_Id) as ChildBusinessSite  from ChildBussinessSite
	drop table ChildBussinessSite
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCity` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCity`( IN State_ID bigint(20) , IN language_Id bigint(20) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Master SP for city
*/
			
	select distinct c.cityId,   cityName
    from stateCity c 
    inner join cityLocale cl on c.cityId=cl.cityId
	where stateId= State_ID and languageId =language_Id 
    order by rtrim(ltrim(cityName))
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetClaim`(
 IN RoleCategory_Id tinyint
,in SiteId bigint
,in role_Id bigint
,in business_Id bigint
)
BEGIN

/*
 Author: Tijo
 Date  : 17/12/2014
 Description : 
*/

	if (RoleCategory_Id =3) then
			select claimId 
            from businessSiteRoleClaim brc 
			where brc.roleId=role_Id and businessSiteId= coalesce(SiteId,(select businessSiteId from businessSite where businessId=business_Id and parentBusinessSiteId is null)) 
          
    else if (RoleCategory_Id =4) then
			select claimId 
			from agencySiteRoleClaim arc 
			where arc.roleId=role_Id and agencySiteId= coalesce(SiteId,(select agencySiteId from agencySite where agencyId=1 and parentAgencySiteId is null ))
    end if
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetClaimName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetClaimName`(
 IN RoleCategory_Id tinyint
,in SiteId bigint
,in role_Id bigint
,in business_Id bigint
,IN language_id int
)
BEGIN

/*
 Author: Tijo
 Date  : 
 Description : 
*/

	if (RoleCategory_Id =3) then
			select brc.claimId , scl.claimName, sc.parentClaimId, sc.isHeader
            from businessSiteRoleClaim brc 
            inner join scClaim sc on brc.claimId = sc.claimId
            inner join scClaimLocale scl on sc.claimId = scl.claimId and languageid = language_id
			where brc.roleId=role_Id 
            and businessSiteId= coalesce(SiteId,(select businessSiteId from businessSite where businessId=business_Id and parentBusinessSiteId is null))
            
            union
			select sc.claimId , scl.claimName, sc.parentClaimId, sc.isHeader from scClaim sc inner join scClaimLocale scl 
			on sc.claimId =scl.claimId  and languageid = language_id 
			/*inner join ( 
				select distinct  sc.parentClaimId 
				from businessSiteRoleClaim brc 
				inner join scClaim sc on brc.claimId = sc.claimId
				inner join scClaimLocale scl on sc.claimId = scl.claimId and languageid = 264
				where brc.roleId=role_Id  and businessSiteId= coalesce(SiteId,(select businessSiteId from businessSite where businessId=business_Id and parentBusinessSiteId is null))
                )b
			on sc.claimId=b.parentClaimId */
			and sc.isHeader=1
            
          
          
    else if (RoleCategory_Id =4) then
			select claimId , scl.claimName, sc.parentClaimId, sc.isHeader
			from agencySiteRoleClaim arc 
            inner join scClaim sc on arc.claimId = sc.claimId
            inner join scClaimLocale scl on sc.claimId = scl.claimId and languageid = language_id
			where arc.roleId=role_Id 
            and agencySiteId= coalesce(SiteId,(select agencySiteId from agencySite where agencyId=business_Id and parentAgencySiteId is null ))
            
             union
			select sc.claimId , scl.claimName, sc.parentClaimId, sc.isHeader from scClaim sc inner join scClaimLocale scl 
			on sc.claimId =scl.claimId  and languageid = language_id 
			/*inner join ( 
					select distinct  sc.parentClaimId 
					from agencySiteRoleClaim arc 
					inner join scClaim sc on arc.claimId = sc.claimId
					inner join scClaimLocale scl on sc.claimId = scl.claimId and languageid = language_id
					where arc.roleId=role_Id 
					and agencySiteId= coalesce(SiteId,(select agencySiteId from agencySite where agencyId=business_Id and parentAgencySiteId is null ))
			 )b
			on sc.claimId=b.parentClaimId */
			and sc.isHeader=1
            
    end if
    end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetClaimSet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetClaimSet`(
	IN Site_Id bigint
, IN RoleCategory_Id tinyint 
, IN language_Id	bigint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Get Agency or Business Claim set Information
 
 
*/

	if (RoleCategory_Id =3) then
		select   cs.RoleId  as claimSetId   
				,cs.RoleName  as claimSetName 
				from  businessSiteRole bcs 
                left join  scRole r on r.roleId = bcs.roleId
				left join scRoleLocale cs on cs.RoleId = bcs.RoleId  and cs.languageId=language_Id
				where ( bcs.businessSiteId in (select GetBusinessAncestry (businessSiteId) from businessSite where businessSiteId = Site_Id)  or businessSiteId = Site_Id)
				and RoleCategoryId =RoleCategory_Id
   
	else if (RoleCategory_Id =4) then
		select   cs.RoleId  as claimSetId   
				,cs.RoleName  as claimSetName 
				from  agencySiteRole bcs  
                left join  scRole r on r.roleId = bcs.roleId
				left join scRoleLocale cs on cs.RoleId = bcs.RoleId  and cs.languageId=language_Id
				where ( bcs.agencySiteId in (select GetAgencyAncestry (agencySiteId) from agencySite where agencySiteId = Site_Id)  or agencySiteId = Site_Id)
				and RoleCategoryId =RoleCategory_Id
    end if
    end if
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetClaimSetDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetClaimSetDetails`( IN Site_Id bigint, IN RoleCategory_Id tinyint , IN ClaimSet_Name nvarchar(100), IN start_record bigint(20) , IN no_of_records int(11))
BEGIN


    
    if (RoleCategory_Id =3) then
	select *,FOUND_ROWS() as TotalRecords  
    from (
      select cs.claimSetId   
			,cs.claimSetName 
			,cs.isSystemClaim
    from  businessSiteClaimSet bcs   
	left join scClaimSet cs on cs.claimSetId = bcs.claimSetId  and  cs.RoleCategoryId =  RoleCategory_Id
    where ( bcs.businessSiteId in (select GetBusinessAncestry (businessSiteId) from businessSite where businessSiteId = Site_Id)  or businessSiteId = Site_Id)
	and  cs.RoleCategoryId =  RoleCategory_Id
    and  claimSetName like concat( "%", coalesce(ClaimSet_Name,claimSetName) , "%") and cs.isDeleted =0
    
	-- order by order_by 
     ) a
    LIMIT no_of_records OFFSET start_record

    else if (RoleCategory_Id =4) then
	select *,FOUND_ROWS() as TotalRecords  
    from (
     select cs.claimSetId   
			,cs.claimSetName 
			,cs.isSystemClaim
    from  agencySiteClaimSet bcs   
	left join scClaimSet cs on cs.claimSetId = bcs.claimSetId  and  cs.RoleCategoryId =  RoleCategory_Id
    where ( bcs.agencySiteId in (select GetAgencyAncestry (agencySiteId) from businessSite where agencySiteId = Site_Id)  or agencySiteId = Site_Id)
	and  cs.RoleCategoryId =  RoleCategory_Id
    and  claimSetName like concat( "%", coalesce(ClaimSet_Name,claimSetName) , "%") and cs.isDeleted =0
    
	-- order by order_by
     ) a
    LIMIT no_of_records OFFSET start_record
    end if
	end if
    

    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetContactDetailsForUserIds` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetContactDetailsForUserIds`(IN user_Ids varchar(1000))
BEGIN
	SELECT 
		u.userId
		,u.firstName
        ,u.lastName
		,uc.mobilePhone
		,u.emailId
        ,u.encryptionKey
	FROM scUser u
	LEFT JOIN userContact uc on u.userId=uc.userID
    WHERE find_in_set(u.userId,user_Ids)
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetContactType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetContactType`( IN language_Id bigint(20) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Master SP for contact type
 call GetDocumentMimeType(264)
*/
			
	select  contactTypeId 
			,contactType 
		from contactTypeLocale where languageId =language_Id order by contactType
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCountry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCountry`( IN language_Id bigint(20) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Master SP for country
*/
			
	      select c.countryId 
			,countryName 
		from country c left join countryLocale cl 
        on c.countryId=cl.countryId
        where languageId =language_Id order by countryName
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCountryStateCity` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCountryStateCity`(
	in address_1	varchar(500)
,	in address_2	varchar(500)
,	in city_Id	  bigint(20)
,	in zip_code 	varchar(20)
,	in language_Id	bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Master SP for getting city data 
*/
	

SELECT B.*,A.* FROM 
(
	select distinct cl.cityName,sl.stateName,col.countryName 
    from city c 
	inner join cityLocale cl on c.cityId=cl.cityId and cl.languageId=language_Id -- and c.cityId=city_Id
    inner join stateCity sc on sc.cityId = cl.cityId
	inner join state s on s.stateId=sc.stateId 
	inner join stateLocale sl on sl.stateId=s.stateId and sl.languageId=language_Id
	inner join countryLocale col on col.countryId=s.countryId and col.languageId=language_Id
    inner join zipCode z on z.stateId = sl.stateId
	WHERE cl.cityId=city_Id and zCode = zip_code
) A -- AND cl.cityId=city_Id  
RIGHT JOIN
(
	SELECT address_1,address_2,zip_code
)B
ON 1 = 1   

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCountsForDashBoard` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCountsForDashBoard`(
IN candidate_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get counts for dashboard
*/
	
    DECLARE lastMinuteHireCandId NVARCHAR(2000)
	
    SELECT GROUP_CONCAT(lastMinuteHireCandidateId) INTO lastMinuteHireCandId 
				FROM lastMinuteHireCandidate lmhc
                INNER JOIN lastMinuteHire lmh ON lmhc.lastMinuteHireId = lmh.lastMinuteHireId
				INNER JOIN candidateShiftOffer cso ON cso.shiftOfferId = lmh.shiftOfferId
				INNER JOIN businessSite bs ON bs.businessSiteId = cso.businessSiteId
				INNER JOIN timeZone tz ON tz.timeZoneId = bs.timeZoneId
				WHERE candidateUserId = candidate_Id AND lmhc.IsIgnored = 0 AND lmhc.candidatestatus=2 
				AND cso.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
	
    
    
	SELECT GetCountCandidateShiftOffer(candidate_Id) AS shiftOffersCount
    ,GetCountCandidateJobMatches(candidate_Id) AS jobMatchesCount
    ,GetCountCandidateTimeSheet(candidate_Id) AS timeSheetCount
    ,GetCountCandidateLastMinuteHire(candidate_Id)  AS lastMinuteHireCount 
    ,lastMinuteHireCandId
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCourseName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCourseName`(IN language_Id bigint(20))
BEGIN


/*
 Author: James
 Date  : 20/11/2014
 Description : Get Course Name
*/

	select c.courseId,courseName from course c 
    inner join courseLocale cl on c.courseId=cl.courseId
	where languageId=language_Id
    order by courseName
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetCurrency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetCurrency`( IN Country_Id bigint(20) , IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Master service for currency
 call GetcontactType(264)
*/

	select 	 cl.currencyId  
			,currencyName 
			,code as currencyCode 
	from currencyLocale cl inner join currency c on cl.currencyId=c.currencyId
    where  countryId = COALESCE(Country_Id,countryId) and 
    languageId =language_Id  
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetDashboard` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetDashboard`(
IN user_Id BIGINT
,IN week_StartDate date
,IN week_EndDate date
)
BEGIN

/*
 Author: Tijo Joseph, Ecanarys
 Date  : 11/11/2014
 Description : Combined SP used to the counts for different parameters in the dashboard for business user.
*/

		select 
		 GetCountBusinessNewHireRequest(User_Id) as NewHireRequest
		,GetCountBusinessJobMatch(User_Id) as JobMatch
		,GetCountBusinessNewHires(User_Id) as NewHires
		,GetCountBusinessJobProfileExpiring(User_Id) as JobProfileExpiring
		,GetCountBusinessShiftChanges(User_Id) as ShiftChanges
		,GetCountBusinessCriticalShiftChanges(User_Id) as CriticalShiftChanges
		,GetCountBusinessOutstandingApprovals(User_Id) as OutstandingApprovals
		,GetCountBusinessDisputedTimesheets(User_Id) as DisputedTimesheets
		,GetCountBusinessLastMinuteHireCount(User_Id) as LastMinuteHireCount
        
        
        ,GetCountBusinessShiftGiveAway(User_Id,0) as GiveAwayCount
        ,GetCountBusinessShiftGiveAway(User_Id,1) as GiveAwayWithinHRCount
        
        ,GetCountBusinessShiftSick(User_Id,0,null,null) as SickCount
        ,GetCountBusinessShiftSick(User_Id,1,null,null) as SickWithinHRCount
        
        ,GetCountBusinessShiftSwap(User_Id,0)  as SwapCount
        ,GetCountBusinessShiftSwap(User_Id,1)  as SwapWithinHRCount  
        
        ,GetCountBusinessShiftSick(User_Id,2,null,null) as CantWorkOutstanding
        ,GetCountBusinessShiftSick(User_Id,3,week_StartDate,week_EndDate) as CantWorkHistory 
        
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetDepartmentGroupName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetDepartmentGroupName`(IN language_Id bigint(20))
BEGIN

/*
 Author: Gomtesh Kognole
 Date  : 09/02/2016
 Description : Get Department Group Name Master
 call GetDepartmentGroupName(264)
 */
 
 
 select departmentGroupNameId, departmentGroupName from departmentGroupNameLocale where languageId =language_Id
 order by departmentGroupName
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetDeviceDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetDeviceDetails`( IN User_ID bigint(20) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : User mobile device details
*/
		
		  select 
				 userID
				,deviceTypeID
				,deviceToken
				from userDevice where userID = User_ID
			

			


		
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetDocumentMimeType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetDocumentMimeType`( IN language_Id bigint(20) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Document mime type
*/
			
	 select   documentMimeTypeId 
			 ,documentMimeType
		from documentMimeTypeLocale where languageId =language_Id
        order by documentMimeType
        
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetDocumentType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetDocumentType`( IN language_Id bigint(20) )
BEGIN 


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : 
 call GetdocumentType(264)
*/

			
	 select  documentTypeId 
			,documentTypeName
		from documentTypeLocale where languageId =language_Id 
      --  order by documentTypeName
        
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetEmployerPositionForCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetEmployerPositionForCandidate`(
  in candidate_Id BIGINT(20),
  in language_Id BIGINT(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get list of employers with candidate's position
*/
	SELECT b.businessId,b.businessName,jscl.jobSubClassificationId,jscl.jobSubClassification FROM vwCandidateRosterDetails crd
	INNER JOIN businessSite bs ON crd.businessSiteId=bs.businessSiteId
	INNER JOIN business b ON bs.businessId=b.businessId
	INNER JOIN jobSubClassificationLocale jscl ON crd.jobSubClassificationId=jscl.jobSubClassificationId
	WHERE crd.candidateId=candidate_Id AND jscl.languageId=language_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetEmploymentProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetEmploymentProfile`( IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo
 Date  : 17/12/2014
 Description : Master service for employment profile.
*/

	select ep.employmentProfileId,employmentprofile from employmentProfile ep
    left join employmentProfileLocale epl on ep.employmentProfileId=epl.employmentProfileId
    where languageId =language_Id
    order by employmentprofile

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetEmploymentType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetEmploymentType`( IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo
 Date  : 17/12/2014
 Description : Master service for employment type.
 call GetEmploymentType (264)
*/


	SELECT employmentTypeId,employmenttype 
	from employmentTypeLocale 
    where languageId =language_Id 
    order by employmenttype
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetEstimatedDurationType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetEstimatedDurationType`( In language_id int)
BEGIN

/*
 Author: Tijo
 Date  : 17/12/2014
 Description : Master service for estimated duration type.
*/

		select estDurationTypeId
		  ,estDurationType 
		  from estimatedDurationTypeLocale where languageId = language_id

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetFeature` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetFeature`(IN language_Id bigint(20))
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Feature
 call GetFeature(264)
*/
	

select fn.featureId,fn.featureName, f.Amount ,fn.description
from featureLocale fn
inner join feature f on fn.featureId = f.featureId
where languageId =language_Id
order by fn.featureName


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetFileUpload` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetFileUpload`(
IN file_Id bigint
, IN action_type tinyint
,in document_TypeId smallint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : File upload details
 call GetFileUpload (1,2)
*/

	if (action_type = 1) then
		select fileId, fileName ,roleCategoryId ,businessId ,siteId ,createdBy ,fileStatus,documentTypeId
		from fileUpload 
		where fileId = file_Id and documentTypeId=coalesce(document_TypeId,documentTypeId) 
	else -- last completed file details
		select fileId, fileName ,f.roleCategoryId ,businessId ,siteId ,f.createdBy ,fileStatus ,emailId,documentTypeId
		from fileUpload f
        inner join scUser u on u.userId = f.createdBy
        where fileStatus =1  and documentTypeId=coalesce(document_TypeId,documentTypeId) 
        order by fileId
        limit 1
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetFixedShiftCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetFixedShiftCandidate`(
IN jobProfile_HireRequestId bigint(20)
)
BEGIN



select distinct  jphr.jobProfileHireRequestId
		,hrd.empStartDate
        ,hrd.empEndDate
        ,hrc.candidateUserId
        ,jp.jobProfileId
        ,jp.jobSubClassificationId
        ,jp.departmentId 
/*,(select shiftEndDateTime from candidateShiftOffer so  
where so.departmentId=jp.departmentId and so.businessSiteId=jpbs.businessSiteId and so.subClassificationId=jp.jobSubClassificationId  and candidateId=hrc.candidateUserId and isDeleted=0 and sourceModule='FIXED'
order by shiftEndDateTime desc limit 1)shiftEndDateTime*/
,null as shiftEndDateTime
,jpbs.businessSiteId
from jobProfileHireRequest jphr 
inner join  hireRequestDetail hrd on jphr.jobProfileHireRequestId=hrd.jobProfileHireRequestId and jphr.isDeleted=0  and hrd.isDeleted=0 and hrd.shiftType=1
inner join hireRequestCandidate hrc on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId and hrc.isDeleted=0  and hrc.candidateHRStatus=11
inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId=jphr.jobProfileBusinessSiteId
inner join jobProfile jp on jp.jobProfileId=jpbs.jobProfileId
inner join scUser u   on  u.userId=hrc.candidateUserId and u.isDeleted=0
where hrd.empEndDate>=date(utc_timestamp()) and jphr.jobProfileHireRequestId=coalesce(jobProfile_HireRequestId,jphr.jobProfileHireRequestId)
order by hrc.candidateUserId

 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetGiveAwayNotificationLogs` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetGiveAwayNotificationLogs`(
IN shiftoffer_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get giveaway requests for notification
*/
	SELECT cg.shiftOfferId,cg.candidateId,so.shiftStartDateTime,so.shiftEndDateTime,cg.status FROM candidateGiveAwayRequests cg
	INNER JOIN candidateShiftOffer so
	WHERE cg.shiftOfferId=shiftoffer_Id AND STATUS=1
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetGroupName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetGroupName`(IN language_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 14/11/2014
 Description : Get Group Name Master
 call GetGroupName(264)
 */
 
 
 select groupNameId, groupName from groupNameLocale where languageId =language_Id
 order by groupName
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestAllCandidateWfInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestAllCandidateWfInstance`(
IN jobProfileHire_RequestId bigint
)
BEGIN
/*
 Author: James
 Date  : 14/03/2015
 Description : For a particular job profile, all candidate workflow state.
 */

set @rown=0 
set @candidateUserId=0 

select 			workflowInstanceId
			,	workFlowId
			,	currentStateId
			,	parentWorkflowInstanceId
			,	businessSiteId
			,	jobProfileHireRequestId
			,	candidateUserId
		from (
			select * ,@rown :=if(@candidateUserId =candidateUserId,@rown +1,1) as rownum ,@candidateUserId :=candidateUserId from (
				select 	wfi.workflowInstanceId
					,	workFlowId
					,	currentStateId
					,	parentWorkflowInstanceId
					,	businessSiteId
					,	jobProfileHireRequestId
					,	cwf.candidateUserId
				from workFlowInstance wfi inner join candidateWfInstance cwf 
				on wfi.workflowInstanceId=cwf.workflowInstanceId
				 where  jobProfileHireRequestId =jobProfileHire_RequestId 
               --  and find_in_set(currentStateId,current_StateId)
				order by cwf.candidateUserId,candidateWfInstanceId desc  
	)a )a where rownum=1  

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestAllowanceOncost` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestAllowanceOncost`(
	IN jobProfileHireRequest_Id bigint
   ,IN language_Id	bigint
)
BEGIN
/*
 Author: James
 Date  : 20/02/2015
 Description :  Get hire Request Allowance oncost
 call est_skillsconnect.GetHireRequestAllowanceOncost(3, 264)

*/


select jp.jobProfileId
		,jphr.jobProfileHireRequestId
        ,jpa.allowanceId
		,ba.allowanceName
        ,jpa.allowanceCurrencyId
        ,jpa.allowancePaidTypeId       
        ,alpl.allowancePaidType
        ,jpa.allowanceAmt        
		,hra.hireRequestAllowanceId
		,hra.allowanceOnCost
		,hra.allowOnCostCurrencyId         
        ,hra.agencySiteId
        from jobProfile jp 
left join jobProfileBusinessSite jpbs on jp.jobProfileId=jpbs.jobProfileId and jpbs.isDeleted=0 and jp.isDeleted=0
left join jobProfileAllowance jpa on jpa.jobProfileId=jp.jobProfileId 
left join jobProfileHireRequest jphr on jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId and jphr.isDeleted=0
left join businessAllowance ba  on ba.allowanceId=jpa.allowanceId
left join hireRequestAllowanceOncost hra on hra.jobProfileHireRequestId=jphr.jobProfileHireRequestId and hra.allowanceId=jpa.allowanceId and hra.isDeleted=0
left join allowancePaidTypeLocale alpl on alpl.allowancePaidTypeId=jpa.allowancePaidTypeId and alpl.languageId=language_Id
where jphr.jobProfileHireRequestId=jobProfileHireRequest_Id 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestCandidate`(
 IN jobProfileHireRequest_Id bigint(20) 
,IN candidate_HRStatus varchar(50)
,IN business_id 	bigint 
,IN sort_column		varchar(50)
,IN start_record	bigint
,IN no_of_records	bigint
,IN language_id		bigint
,IN search_Type		tinyint
)
BEGIN

/*
 Author			: James
 Date  			: 05/03/2015
 call est_skillsconnect.GetHireRequestCandidate(13, null, 10, 'candidateName_Desc', 0, 10, 264,1)
 search_Type -- 1 -- All, 2 -- To Action, 3-- Offered, 4-- Declined, 5-- Completed
					
 candidateName_asc
 candidateName_desc
 experience_asc
 experience_desc
 radius_asc
 radius_desc
 availabilityStatus_asc
 availabilityStatus_desc
*/
declare emp_start_date date
declare emp_end_date date
declare sub_clasificationId int
declare proximityCalculated_In nvarchar(10)

set @business_latitude = (select latitude  from business where businessId =  business_id)
set @business_longitude = (select longitude from business where businessId =  business_id)

select empStartDate,empEndDate into emp_start_date,emp_end_date from hireRequestDetail
where jobProfileHireRequestId=jobProfileHireRequest_Id  and isDeleted=0

	select jp.jobSubClassificationId into sub_clasificationId from   jobProfileHireRequest jphr inner join jobProfile jp 
	on jphr.jobProfileId=jp.jobProfileId and jp.isDeleted=0 and jphr.isDeleted=0
	where jphr.jobProfileHireRequestId=jobProfileHireRequest_Id  
    
	select  proximityCalculatedIn into proximityCalculated_In
	from hireRequestDetail hrd 
	inner join businessSite bs on hrd.businessSiteId = bs.businessSiteId
	inner join country c on c.countryId = bs.countryId
	where jobProfileHireRequestId = jobProfileHireRequest_Id limit 1

    
					select *,FOUND_ROWS() as TotalRecords,proximityCalculated_In from 			
						( -- a
							select  distinct
							hireRequestCandidateId
							,cu.candidateUserId
							,concat(firstName, " ", lastName) as candidateName
                            ,firstName                            
                            ,lastName
							,latitude  
							,longitude 
                            ,(select case when businessName=cpe.companyName then 1 else 0 end from business where businessid =  business_id and isDeleted=0) as workedHereBefore
                            ,case when exists (select 1 from hireRequestCandidate hc inner join hireRequestDetail jphr on hc.jobProfileHireRequestId = jphr.jobProfileHireRequestId and hc.jobProfileHireRequestId <> jobProfileHireRequest_Id and hc.isDeleted=0 where candidateUserId=cu.candidateUserId and candidateHRStatus in (9,11) and ((empStartDate between emp_start_date and emp_end_date) or (empEndDate between emp_start_date and emp_end_date))) then 0 else 1 end as availabilityStatus
                            ,(select  cast(sum(expMinMonth) as SIGNED) from candidateEmpProfile cmp inner join candidateEmpProfileExperience cmpe on cmp.candidateEmpProfileId = cmpe.candidateEmpProfileID where cmp.candidateUserId = cu.candidateUserId and  coalesce(cmp.employmentProfileID,0) =  coalesce(sub_clasificationId,cmp.employmentProfileID) ) as minExperienceMonth
                             ,(select  cast(sum(expMaxMonth) as  SIGNED) from candidateEmpProfile cmp inner join candidateEmpProfileExperience cmpe on cmp.candidateEmpProfileId = cmpe.candidateEmpProfileID where cmp.candidateUserId = cu.candidateUserId and  coalesce(cmp.employmentProfileID,0) =  coalesce(sub_clasificationId,cmp.employmentProfileID) ) as maxExperienceMonth
                            ,((SQRT(POWER(69.1 * ( latitude -  @business_latitude),  2) + POWER(69.1 * (  @business_longitude  - longitude )  * COS(latitude / 57.3), 2)) ) * 1.60934)  as radius
                    		,candidateHRStatus
                            ,coalesce(hrc.paidStatus,0) as paidStatus
                            ,sendToBA
                            ,etl.employmentType
                            ,emp_start_date as empStartDate
                            ,emp_end_date as empEndDate
                            ,u.emailId
                            ,uc.mobilePhone
                            ,u.encryptionKey
							from scUser u
							left join candidateUser cu on u.userId = cu.candidateUserId
							left join candidateDetail cd on cd.candidateUserId = cu.candidateUserId
							left join candidateEmpProfile cp on cp.candidateUserId = cd.candidateUserId and cp.isDeleted =0  and coalesce(cp.employmentProfileID,0) =  coalesce(sub_clasificationId,coalesce(cp.employmentProfileID,0))
							left join candidateEmpProfileExperience cpe on cpe.candidateEmpProfileID = cp.candidateEmpProfileID and cpe.isDeleted =0   							
							left join candidateEmpAvailability cea on cea.candidateUserId = cu.candidateUserId   -- and cea.isDeleted =0  
                            inner join hireRequestCandidate hrc on cu.candidateUserId = hrc.candidateUserId  and jobProfileHireRequestId = jobProfileHireRequest_Id and hrc.isDeleted =0 
                            inner join jobProfileHireRequest jphr on jphr.jobProfileHireRequestId=hrc.jobProfileHireRequestId and jphr.isDeleted=0
							inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId=jphr.jobProfileBusinessSiteId
							inner join jobProfile jp on jp.jobProfileId=jpbs.jobProfileId
							inner join employmentTypeLocale etl on etl.employmentTypeId=jp.employmentTypeId and etl.languageId=language_id
							left join userContact uc on uc.userID=u.userId and uc.isDeleted=0
                            where case when search_Type=1 then candidateHRStatus in(3,4,5,6,7,8,9,10,11)
									 when search_Type=2 then candidateHRStatus in(5,9)
                                     when search_Type=3 then candidateHRStatus in(3,7)
                                     when search_Type=4 then candidateHRStatus in(4,8,10)
                                     when search_Type=5 then candidateHRStatus in(11)
                                     else find_in_set(candidateHRStatus,candidate_HRStatus) end
							and u.isDeleted= 0 
                     	 	
						)a  order by CASE WHEN  sort_column='candidateName_asc' THEN candidateName END ASC,
									CASE WHEN  sort_column='candidateName_desc' THEN candidateName END DESC,
									CASE WHEN  sort_column='experience_asc' THEN minExperienceMonth END asc,
									CASE WHEN  sort_column='experience_desc' THEN minExperienceMonth END DESC,
									CASE WHEN  sort_column='radius_asc' THEN radius END asc,
									CASE WHEN  sort_column='radius_desc' THEN radius END DESC,
									CASE WHEN  sort_column='availabilityStatus_asc' THEN availabilityStatus END asc,
									CASE WHEN  sort_column='availabilityStatus_desc' THEN availabilityStatus END DESC,
									CASE WHEN  sort_column='candidateHRStatus_asc' THEN candidateHRStatus END asc,
									CASE WHEN  sort_column='candidateHRStatus_desc' THEN candidateHRStatus END DESC
                         LIMIT no_of_records OFFSET start_record   
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestCandidateAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestCandidateAllowance`(
in  hireRequest_CandidateId  varchar(5000)
,in language_Id bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 23/05/2016
 Description :  Get hire Request candidate Allowance  
 call est_skillsconnect_dev.GetHireRequestCandidateAllowance('2966', 264)

*/ 
select   hrca.hireRequestCandidateId
		,hrca.allowanceId
		,al.allowanceName 
from hireRequestCandidateAllowance hrca
left join allowanceLocale al on al.allowanceId=hrca.allowanceId and al.languageId=language_Id
where find_in_set(hireRequestCandidateId,hireRequest_CandidateId)



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestCandidateByManagerId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestCandidateByManagerId`(
 in manager_Id bigint(20)
,in language_Id bigint(20)
)
BEGIN
/*
Author			: James
Date  			: 20/05/2016
Description     : Get Employee details for demo site
*/
 
select  u.userId
       ,u.firstName
       ,u.lastName
       ,cd.dob
       ,u.encryptionKey
       ,cd.studentTypeId
       ,stl.studentType
       ,jp.jobProfileId
       ,jp.jobProfileNo
       ,jp.jobProfileName
       ,jp.jobTitle
	   ,jp.jobClassificationId
       ,jcl.jobClassification
       ,jp.jobSubClassificationId
       ,jscl.jobSubClassification
	   ,jp.departmentId
       ,bd.departmentName
       ,jp.employmentTypeId
       ,etl.employmentType
       ,jp.awardId
       ,al.awardName
       ,jp.gradeLevelId
       ,gl.gradeLevel
       ,jphr.jobProfileHireRequestId
       ,hrd.empStartDate
       ,hrd.empEndDate
       ,hrc.hireRequestCandidateId
       ,hrc.agreedHours
 from userRole ur 
inner join userRoleBusinessSite urbs on ur.userRoleId=urbs.userRoleId and ur.userId=manager_Id and ur.isDeleted=0 and urbs.isDeleted=0 
inner join jobProfileBusinessSite jpbs on jpbs.businessSiteId=urbs.businessSiteId and jpbs.isDeleted=0
inner join jobProfile jp on jpbs.jobProfileId=jp.jobProfileId and jp.isDeleted=0
inner join jobProfileHireRequest jphr on jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId and jphr.isDeleted=0
inner join hireRequestDetail hrd on hrd.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
inner join hireRequestCandidate hrc on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId and hrc.isDeleted=0
inner join scUser u on u.userId=hrc.candidateUserId and u.isDeleted=0
inner join candidateDetail cd on cd.candidateUserId=u.userId 
left join jobClassificationLocale jcl on jcl.jobClassificationId=jp.jobClassificationId and jcl.languageId=language_Id
left join jobSubClassificationLocale jscl on jscl.jobSubClassificationId=jp.jobSubClassificationId and jscl.languageId=language_Id
left join businessDepartment bd on bd.departmentId=jp.departmentId
left join employmentTypeLocale etl on jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id 
left join awardLocale al on al.awardId=jp.awardId and al.languageId=language_Id 
left join gradeLevelLocale gl on gl.gradeLevelId=jp.gradeLevelId and gl.languageId=language_Id 
left join studentTypeLocale stl on cd.studentTypeId=stl.studentTypeId and stl.languageId=language_Id 
where ur.userId=manager_Id 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestCandidatePaymentStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestCandidatePaymentStatus`(

IN candidateUser_Id bigint ,
IN jobProfileHireRequest_Id bigint(20) 
)
BEGIN


/*
 Author			: James
 Date  			: 05/03/2015
 Description 	: Candidate payment status for a particular hire request.
*/

declare is_excelUpload int
set is_excelUpload  = (select 1 from hireRequestFileUpload where jobProfileHireRequestId = jobProfileHireRequest_Id limit 1) 


select  candidateUserId
,coalesce(case when is_excelUpload =1 then cast(1 as signed int) else cast(paidStatus as signed int) end ,0) as paidStatus  
from hireRequestCandidate 
where jobProfileHireRequestId=jobProfileHireRequest_Id 
and candidateUserId= coalesce( candidateUser_Id ,candidateUserId) 








END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestEmpCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestEmpCount`(
	IN	jobProfileHireRequest_Id	bigint(20)
)
BEGIN


/*
 Author: James
 Date  : 20/02/2015
 Description :  Get estimated staff count for a given hire request
 call est_skillsconnect.GetHireRequestEmpCount(1)

*/
	select 	 estimatedStaffId
			,jobProfileHireRequestId
            ,estimatedStaff
            ,estimatedStaffComments 
    from hireRequestEstimatedStaff 
	where jobProfileHireRequestId=jobProfileHireRequest_Id and isDeleted=0
    order by estimatedStaffId desc limit 1
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestHeader` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestHeader`(
IN jobProfileHireRequest_Id bigint
,IN language_Id bigint
)
BEGIN
/*
 Author: James
 Date  : 3/03/2015
 Description : Basic details of a hire request to be shown in the page header.

*/
select 	distinct
		hireRequestNo
		,jp.jobProfileId
		,jp.jobTitle
		,jp.employmentTypeId 
		,etl.employmentType 
		,jp.gradeId
		,bg.gradeName
		,jp.wageTypeId
		,jp.wagePerId
		,sl.salaryPerName as wagePer
		,jp.wageCurrencyId 
		,jp.wageMin 
		,jp.wageMax
		,concat(firstName," ",lastName) as createdBy
		,hr.createdOn
		,coalesce(jp.jobClassificationId ,0)  as jobClassificationId
		,jcl.jobClassification
		,coalesce(jp.jobSubClassificationId,0)  as jobSubClassificationId
		,jscl.jobSubClassification
		,hrd.empStartDate
		,hrd.empEndDate
        ,coalesce((select estimatedStaff from hireRequestEstimatedStaff 
			where jobProfileHireRequestId=jobProfileHireRequest_Id and isDeleted=0 limit 1 ),0) as estimatedStaff
		,bs.longitude
        ,bs.latitude
        ,needbusinessApproval
        ,needInterview
        ,defineOnCost
        ,isCsvUpload
        ,jpbs.businessSiteId
        ,coalesce(count(hireRequestCandidateId),0) as selectedCandidate
        ,proximityCalculatedIn
from jobProfileHireRequest hr 
left join jobProfileBusinessSite jpbs on hr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId and jpbs.isDeleted=0
left join businessSite bs on jpbs.businessSiteId=bs.businessSiteId 
left join jobProfile jp on jp.jobProfileId=hr.jobProfileId and jp.isDeleted=0
left join hireRequestDetail hrd on hrd.jobProfileHireRequestId=hr.jobProfileHireRequestId 
left join employmentTypeLocale etl on jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
left join businessGrade bg on jp.gradeId=bg.gradeId
left join jobClassificationLocale jcl on jcl.jobClassificationId=jp.jobClassificationId and jcl.languageId=language_Id
left join jobSubClassificationLocale jscl on jscl.jobSubClassificationId=jp.jobSubClassificationId and jscl.languageId=language_Id
left join salaryPerLocale sl on sl.salaryPerId=jp.wagePerId and sl.languageId=language_Id
left join scUser u on u.userId=hr.createdBy
left join hireRequestCandidate hrc  on hrc.jobProfileHireRequestId = hr.jobProfileHireRequestId
inner join country c on bs.countryId = c.countryId
where hr.jobProfileHireRequestId=jobProfileHireRequest_Id and hr.isDeleted=0
group by hrc.jobProfileHireRequestId


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestInterviewOnCost` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestInterviewOnCost`(
IN	jobProfileHireRequest_Id	bigint(20)

)
BEGIN
/*
 Author: James
 Date  : 08/01/2015
 Description :   Oncost details for a particular hire request
*/

select   needInterview
		,needbusinessApproval
        ,defineOnCost 
from hireRequestDetail 
where jobProfileHireRequestId=jobProfileHireRequest_Id and isDeleted=0 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestPayment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestPayment`(
IN jobProfileHireRequest_Id bigint(20) 
)
BEGIN
/*
 Author: James
 Date  : 08/01/2015
 Description :   Hire request payment status
*/

select p.currencyId,cl.currencyCode,sum(amount) as totalAmountPaid,
	(select count(1)  from hireRequestCandidate where jobProfileHireRequestId=jobProfileHireRequest_Id and isDeleted=0 and paidStatus=1 ) as TotalCandidatePaid
 from  payment p left join currencyLocale cl on p.currencyId=cl.currencyId
 where jobProfileHireRequestId=jobProfileHireRequest_Id 
group by p.currencyId,cl.currencyCode


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestRole`(

  IN businessSite_Id bigint
, IN language_Id	bigint

)
BEGIN


/*
 Author			: Tijo
 Date  			: 21/02/2015
 Description 	: Data for role drop down in hire request page.
*/

		
			select distinct ur.roleId 
				   ,srl.roleName 
            from userRoleBusinessSite ubs
            inner join userRole ur on ur.userRoleId = ubs.userRoleId
            inner join roleInfoLocale srl on srl.roleId = ur.roleId
            inner join (
					select bs.businessSiteId from businessSite bs inner join (
						select distinct businessId from businessSite where businessSiteId=businessSite_Id ) bs2
					on bs.businessId=bs2.businessId and parentBusinessSiteId is null )bs1
			on bs1.businessSiteId=ubs.businessSiteId 
            and ubs.isDeleted = 0 and ur.isDeleted=0 and ur.isDeleted=0	
             

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestShift`(

IN jobProfileHireRequest_Id varchar(100)

)
BEGIN
/*
 Author: Tijo
 Date  : 21/02/2015
 Description : Hire request shift details
 call GetHireRequestShift(1)
 1- fixed, 2 flexible
*/
declare shift_type tinyint 

set shift_type =(select shiftType from hireRequestDetail where jobProfileHireRequestId=jobProfileHireRequest_Id)

if shift_type=1 then
	select  shiftType,
			hrs.hireRequestShiftId ,
			hrs.jobProfileOrderId  , 
			hrs.shiftName ,
			hireRequestShiftDayId,
			group_concat(weekDayId) as weekDayIds  ,
			shiftStartTime ,
			shiftEndTime ,
            hrd.jobProfileHireRequestId
	from hireRequestDetail hrd 
	left join hireRequestShift hrs on hrd.jobProfileHireRequestId = hrs.jobProfileHireRequestId
	left join hireRequestShiftDays hrsd on hrsd.hireRequestShiftId = hrs.hireRequestShiftId
	where hrd.isDeleted =0 and hrs.isDeleted =0 and hrsd.isDeleted =0
	and find_in_set(hrd.jobProfileHireRequestId ,jobProfileHireRequest_Id)
    group by hireRequestShiftId 
    order by hireRequestShiftId
    
else 
	select  shiftType,
			hrs.hireRequestShiftId ,
			hrs.jobProfileOrderId  , 
			hrs.shiftName ,
			hireRequestShiftDayId,
			weekDayId   ,
			shiftStartTime ,
			shiftEndTime ,
            hrd.jobProfileHireRequestId
	from hireRequestDetail hrd 
	left join hireRequestShift hrs on hrd.jobProfileHireRequestId = hrs.jobProfileHireRequestId
	left join hireRequestShiftDays hrsd on hrsd.hireRequestShiftId = hrs.hireRequestShiftId
	where hrd.isDeleted =0 and hrs.isDeleted =0 and hrsd.isDeleted =0
	and find_in_set(hrd.jobProfileHireRequestId ,jobProfileHireRequest_Id)
    order by hireRequestShiftId
end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestStatus`(
IN jobProfileHire_RequestId		bigint
)
BEGIN

/*
 Author: Tijo
 Date  : 21/02/2015
 Description : Hire request status
*/

select status from jobProfileHireRequest
where jobProfileHireRequestId=jobProfileHire_RequestId 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHireRequestWageOnCost` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHireRequestWageOnCost`(

IN jobProfileHireRequest_Id bigint(20),
IN language_Id int
)
BEGIN

/*
 Author: Tijo
 Date  : 23/02/2015
 Description : Hire Request WageOnCost details
 */

select
		 hrwc.hireRequestWageOnCostId
		,hrwc.agencySiteId 
		,hrwc.wageOnCost 
		,hrwc.wageOnCostCurrencyId 
		,wageTypeId 
		,wagePerId 
		,salaryPerName as wagePerName
		,wageCurrencyId 
		,wageMin 
		,wageMax 
from  jobProfile jp 
inner join jobProfileHireRequest hr on  jp.jobProfileId = hr.jobProfileId 
left join hireRequestWageOnCost hrwc on hrwc.jobProfileHireRequestId = hr.jobProfileHireRequestId and hrwc.isDeleted =0
left join salaryPerLocale spl on jp.wagePerId = spl.salaryPerId and languageId = language_Id 
where hr.isDeleted =0 and hr.jobProfileHireRequestId = jobProfileHireRequest_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetHRCandidateBusinessApproval` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetHRCandidateBusinessApproval`(
 IN jobProfileHireRequest_Id bigint(20) 
,IN candidate_HRStatus varchar(100)
,IN business_id 	bigint 
,IN sort_column		varchar(50)
,IN start_record	bigint
,IN no_of_records	bigint
,IN language_id		bigint

)
BEGIN

/*
 Author			: Tijo
 Date  			: 21/02/2015
 Description 	: List of selected candidates for a hire request with respect to hire request status.
*/


declare emp_start_date date
declare emp_end_date date
declare sub_clasificationId int
declare proximityCalculation_Value decimal(18,5)
declare proximityCalculated_In nvarchar(10)
set @business_latitude = (select latitude  from business where businessId =  business_id)
set @business_longitude = (select longitude from business where businessId =  business_id)

	 select empStartDate,empEndDate into emp_start_date,emp_end_date 
     from hireRequestDetail
	 where jobProfileHireRequestId=jobProfileHireRequest_Id  and isDeleted=0

	 select jp.jobSubClassificationId into sub_clasificationId 
	 from  jobProfileHireRequest jphr inner join jobProfile jp 
	 on jphr.jobProfileId=jp.jobProfileId and jp.isDeleted=0 and jphr.isDeleted=0
	 where jphr.jobProfileHireRequestId=jobProfileHireRequest_Id  

	select proximityCalculationValue,proximityCalculatedIn into proximityCalculation_Value,proximityCalculated_In
	from hireRequestDetail hrd 
	inner join businessSite bs on hrd.businessSiteId = bs.businessSiteId
	inner join country c on c.countryId = bs.countryId
	where jobProfileHireRequestId = jobProfileHireRequest_Id limit 1

    
					select *,FOUND_ROWS() as TotalRecords,proximityCalculated_In from 			
						( -- a
							select  distinct
                            hireRequestCandidateId
							 ,cu.candidateUserId
							,concat(firstName, " ", lastName) as candidateName
                            ,firstName
                            , lastName
							,latitude  
							,longitude 
                            ,(select case when businessName=cpe.companyName then 1 else 0 end from business where businessid =  business_id and isDeleted=0) as workedHereBefore
							,case when exists (select 1 from hireRequestCandidate hc inner join jobProfileHireRequest jphr on hc.jobProfileHireRequestId = jphr.jobProfileHireRequestId where candidateUserId=cu.candidateUserId and candidateHRStatus=9 and ((hiringStartDate between emp_start_date and emp_end_date) or (hiringEndDate between emp_start_date and emp_end_date))) then 0 else 1 end as availabilityStatus
                            ,(select  cast(sum(expMinMonth) as SIGNED) from candidateEmpProfile cmp inner join candidateEmpProfileExperience cmpe on cmp.candidateEmpProfileId = cmpe.candidateEmpProfileID where cmp.candidateUserId = cu.candidateUserId   and  coalesce(cmp.employmentProfileID,0) =  coalesce(sub_clasificationId,cmp.employmentProfileID)  ) as minExperienceMonth
							,(select  cast(sum(expMaxMonth) as  SIGNED) from candidateEmpProfile cmp inner join candidateEmpProfileExperience cmpe on cmp.candidateEmpProfileId = cmpe.candidateEmpProfileID where cmp.candidateUserId = cu.candidateUserId  and  coalesce(cmp.employmentProfileID,0) =  coalesce(sub_clasificationId,cmp.employmentProfileID) ) as maxExperienceMonth
                            ,((SQRT(POWER(69.1 * ( latitude -  @business_latitude),  2) + POWER(69.1 * (  @business_longitude  - longitude )  * COS(latitude / 57.3), 2)) ) * proximityCalculation_Value)  as radius 
                    		,candidateHRStatus
                            ,coalesce(hrc.paidStatus,0) as paidStatus
                            ,sendToBA
							from scUser u
							inner join candidateUser cu on u.userId = cu.candidateUserId
							inner join candidateDetail cd on cd.candidateUserId = cu.candidateUserId
							left join candidateEmpProfile cp on cp.candidateUserId = cd.candidateUserId and cp.isDeleted =0  
							left join candidateEmpProfileExperience cpe on cpe.candidateEmpProfileID = cp.candidateEmpProfileID and cpe.isDeleted =0   							
							left join candidateEmpAvailability cea on cea.candidateUserId = cu.candidateUserId   -- and cea.isDeleted =0  
                            inner join hireRequestCandidate hrc on cu.candidateUserId = hrc.candidateUserId   and hrc.isDeleted =0 
							where u.isDeleted= 0 and  hrc.jobProfileHireRequestId = jobProfileHireRequest_Id and sendToBA = 1
                            and find_in_set(candidateHRStatus,candidate_HRStatus)
							and coalesce(cp.employmentProfileID,0) =  coalesce(sub_clasificationId,coalesce(cp.employmentProfileID,0))
						)a  order by CASE WHEN  sort_column='candidateName_asc' THEN candidateName END ASC,
									CASE WHEN  sort_column='candidateName_desc' THEN candidateName END DESC,
									CASE WHEN  sort_column='experience_asc' THEN minExperienceMonth END asc,
									CASE WHEN  sort_column='experience_desc' THEN minExperienceMonth END DESC,
									CASE WHEN  sort_column='radius_asc' THEN radius END asc,
									CASE WHEN  sort_column='radius_desc' THEN radius END DESC,
									CASE WHEN  sort_column='availabilityStatus_asc' THEN availabilityStatus END asc,
									CASE WHEN  sort_column='availabilityStatus_desc' THEN availabilityStatus END DESC
						  LIMIT no_of_records OFFSET start_record   


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetIndustry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetIndustry`( IN language_Id bigint(20) )
BEGIN 

/*
 Author			: Tijo
 Date  			: 21/02/2015
 Description 	: Master industry list
*/
			
	 select  industryID  
			,industryName  
			,description 
		from industryLocale  where languageId =language_Id
        order by industryName
        
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobClassification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobClassification`( IN parentJobClassId int 
, IN language_Id bigint
, in is_Demo bit(1))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : 
 call GetJobClassification(null, 264)
*/



/*
	 select jc.jobClassificationId
           ,jobClassification
		   from jobClassification jc
           inner join jobClassificationLocale jcl on jc.jobClassificationId = jcl.jobClassificationId 
		   where languageId = language_Id and 
           case when parentJobClassId is null then parentJobClassificationId is null else parentJobClassificationId = parentJobClassId end
		   
*/

if parentJobClassId is null then 
	select jcl.jobClassificationId,jobClassification from jobClassificationLocale jcl 
    inner join  jobClassification jc on jc.jobClassificationId=jcl.jobClassificationId
	where languageId=language_Id and case when is_Demo=1 then isDemo=1 else 1=1 end
    order by jobClassification
    

else 
		select jsl.jobSubClassificationId as jobClassificationId, jsl.jobSubClassification as jobClassification 
		from jobClassificationSubClassification jcs 
		inner join jobSubClassificationLocale jsl on jcs.jobSubClassificationId=jsl.jobSubClassificationId and jsl.languageId=language_Id
		and jcs.jobClassificationId=parentJobClassId
        order by jsl.jobSubClassification
        
end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfile`(
 IN businessSite_Id varchar(5000) , 
 IN start_record bigint(20) , 
 IN no_of_records int(11) ,
 IN language_Id int ,
 IN Sort_by_Column  varchar(100),
 IN Sort_Order  varchar(5),
 IN search_Text1 varchar(50), -- JobProfile_No
 IN search_Text2 varchar(50), -- Employment_Type
 IN search_Text3 varchar(50), -- Department_Name
 IN search_Text4 varchar(50), -- JP_Title
 IN search_Type tinyint,
 IN expiry_Type tinyint,
 IN jobProfileStatus tinyint
 
)
BEGIN
	

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Job Profile details
 
	set @JobProfile_No = ""
    set @Employment_TypeId = "null"
    set @Department_Id = "null"
    set @JP_Title = ""
    
    1 - JobProfile_No
    2 - Employment_Type
    3 - Department_Name
    4 - JP_Title
    5 - All
    
	Sort Order
    jobTitle
	employmentType
	departmentName
	wageMin
	status
	haveAllowance
	gradeName
    
    expiry_type  1 -- expiring job profile
				 2 -- expired job profile
                 null -- all
*/
 

	set Sort_by_Column = concat(Sort_by_Column, "_", lower(Sort_Order))
    
	if search_Type in( 1,2,3,4) then	 
	select * ,FOUND_ROWS() as TotalRecords  from( 
					select   jp.jobProfileId 
							,jbs.businessSiteId
							,jp.jobTitle 
							,jp.businessId 
							,jp.departmentId
                            ,departmentName
							,jp.employmentTypeId
                            ,employmentType
							,jp.gradeId 
                            ,gradeName
                            ,jp.wageTypeId 
                            ,wagePerId 
							,salaryPerName as wagePer
							,wageCurrencyId 
                            ,wageMin 
							,wageMax
							,jp.parentJobProfileId 
							,jp.revisionNo 
							,jp.referralJobProfileId   
							,jp.isProvisional 
                            ,jbs.createdby
                            ,u.firstName
                            ,u.middleName
                            ,u.lastName
                            ,jbs.createdOn
                            ,case when jbs.status=2 then 2 when (jp.isProvisional =0 and jbs.status=1) then 1 when (jp.isProvisional =1 and jbs.status=1) then 3 end as status
                            ,jobProfileNo
                            ,case when (select count(1) from jobProfileAllowance jpa where jpa.jobProfileId = jp.jobProfileId)>0 then 1 else 0 end as haveAllowance
                            ,jp.expiryDate
                           ,case when jbs.status=2 then 'Active' when (jp.isProvisional =0 and jbs.status=1) then 'In Active' when (jp.isProvisional =1 and jbs.status=1) then 'Provisional' end as statusText
                           ,coalesce(jp.updatedOn,jp.createdOn) as jobProfileCreatedOn                
                           ,concat(jobTitle,jobProfileNo,revisionNo) as jobTitleSort
                           ,cll.currencyCode as wageCurrencyCode
				from jobProfileBusinessSite jbs 
				left join jobProfile jp on jp.jobProfileId = jbs.jobProfileId and jp.isDeleted =0  and jbs.isDeleted =0 
                inner join businessSite bs on bs.businessSiteId = jbs.businessSiteId and jbs.status =  coalesce(jobProfileStatus,jbs.status)
                inner join scUser u on jbs.createdby = u.userId
				left join employmentTypeLocale pl on pl.employmentTypeId =  jp.employmentTypeId and pl.languageId = language_Id
                left join businessGrade g on g.gradeId =  jp.gradeId 
                left join businessDepartment d on d.departmentId = jp.departmentId  
				left join salaryPerLocale sp on sp.salaryPerId = jp.wagePerId and sp.languageId =language_Id
                left join timeZone tz on bs.timeZoneId=tz.timeZoneId 
                left join currencyLocale cll on cll.currencyId=jp.wageCurrencyId and cll.languageId =language_Id
				where FIND_IN_SET(bs.businessSiteId ,businessSite_Id )    and jp.isDeleted =0  and jbs.isDeleted =0  
               --  and  jbs.status=2 
                and case when expiry_Type=1 then   datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))<=28 and datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))>=0 -- and jbs.status=2
						 when expiry_Type=2 then  datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))<0 
							else (datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))>=0 or expiryDate is null) end 
				and (case when search_Type=1 then 
							jp.jobProfileNo like  concat( "%" , coalesce( search_Text1 ,jp.jobProfileNo) ,"%")
                        when search_Type=2 then 
							employmentType like  concat( "%" , coalesce(search_Text1  ,employmentType) ,"%")
						when search_Type=3 then 
							departmentName like  concat( "%" , coalesce(search_Text1  ,departmentName) ,"%")
                        when search_Type=4 then 
							jp.jobTitle like  concat( "%" , coalesce(search_Text1 ,jp.jobTitle) ,"%")
                        end
					)
                
                ) a
                order by  					                 
                    case when Sort_by_Column =  'employmentType_asc' then   employmentType end asc,
                    case when Sort_by_Column =  'employmentType_desc' then   employmentType end desc,	
                    case when Sort_by_Column =  'departmentName_asc' then   employmentType end asc,
                    case when Sort_by_Column =  'departmentName_desc' then   employmentType end desc,	                    
                    case when Sort_by_Column =  'wageMin_asc' then   wageMin end asc,
                    case when Sort_by_Column =  'wageMin_desc' then   wageMin end desc,                    
                    case when Sort_by_Column =  'statusText_asc' then   statusText end asc,
                    case when Sort_by_Column =  'statusText_desc' then   statusText end desc,                    
                    case when Sort_by_Column =  'haveAllowance_asc' then   haveAllowance end asc,
                    case when Sort_by_Column =  'haveAllowance_desc' then   haveAllowance end desc,
                    case when Sort_by_Column =  'gradeName_asc' then   gradeName end asc,
                    case when Sort_by_Column =  'gradeName_desc' then   gradeName end desc,                    
                    case when Sort_by_Column =  'expiryDate_asc' then   expiryDate end asc,
                    case when Sort_by_Column =  'expiryDate_desc' then   expiryDate end desc,                    
                    case when Sort_by_Column =  'jobProfileCreatedOn_asc' then   jobProfileCreatedOn end asc,
                    case when Sort_by_Column =  'jobProfileCreatedOn_desc' then   jobProfileCreatedOn end desc ,                     
                    case when Sort_by_Column =  'jobTitleSort_asc' then   jobTitleSort end asc ,
					case when Sort_by_Column =  'jobTitleSort_desc' then   jobTitleSort end desc
                LIMIT  no_of_records  OFFSET  start_record 
 	            
	 elseif (search_Type = 5) then
			set search_text1 =coalesce(search_text1,'')
			set search_text2 =coalesce(search_text2,search_text1)
			set search_text3 =coalesce(search_text3,search_text1)
			set search_text4 =coalesce(search_text4,search_text1)

     
		select * ,FOUND_ROWS() as TotalRecords  from( 
					select   jp.jobProfileId 
							,jbs.businessSiteId
							,jp.jobTitle 
							,jp.businessId 
							,jp.departmentId
                            ,departmentName
							,jp.employmentTypeId
                            ,employmentType
							,jp.gradeId 
                            ,gradeName
                            ,jp.wageTypeId 
                            ,wagePerId 
							,salaryPerName as wagePer
							,wageCurrencyId 
                            ,wageMin 
							,wageMax
							,jp.parentJobProfileId 
							,jp.revisionNo 
							,jp.referralJobProfileId   
							,jp.isProvisional 
                            ,jbs.createdby
                            ,u.firstName
                            ,u.middleName
                            ,u.lastName
                            ,jbs.createdOn
                            ,case when jbs.status=2 then 2 when (jp.isProvisional =0 and jbs.status=1) then 1 when (jp.isProvisional =1 and jbs.status=1) then 3 end as status
                            ,jobProfileNo
                            ,case when (select count(1) from jobProfileAllowance jpa where jpa.jobProfileId = jp.jobProfileId)>0 then 1 else 0 end as haveAllowance
                            ,jp.expiryDate
                           ,case when jbs.status=2 then 'Active' when (jp.isProvisional =0 and jbs.status=1) then 'In Active' when (jp.isProvisional =1 and jbs.status=1) then 'Provisional' end as statusText
                           ,coalesce(jp.updatedOn,jp.createdOn) as jobProfileCreatedOn                
                           ,concat(jobTitle,jobProfileNo,revisionNo) as jobTitleSort
                           ,cll.currencyCode as wageCurrencyCode
				from jobProfileBusinessSite jbs 
				left join jobProfile jp on jp.jobProfileId = jbs.jobProfileId and jp.isDeleted =0  and jbs.isDeleted =0 
                inner join businessSite bs on bs.businessSiteId = jbs.businessSiteId and jbs.status =  coalesce(jobProfileStatus,jbs.status)
                inner join scUser u on jbs.createdby = u.userId
				left join employmentTypeLocale pl on pl.employmentTypeId =  jp.employmentTypeId and pl.languageId = language_Id
                left join businessGrade g on g.gradeId =  jp.gradeId 
                left join businessDepartment d on d.departmentId = jp.departmentId  
				left join salaryPerLocale sp on sp.salaryPerId = jp.wagePerId and sp.languageId =language_Id
                left join timeZone tz on bs.timeZoneId=tz.timeZoneId 
                left join currencyLocale cll on cll.currencyId=jp.wageCurrencyId and cll.languageId =language_Id
				where FIND_IN_SET(bs.businessSiteId ,businessSite_Id )     and jp.isDeleted =0  and jbs.isDeleted =0 
               --  and  jbs.status=2 
                and case when expiry_Type=1 then   datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))<=28 and datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))>=0 -- and jbs.status=2
						 when expiry_Type=2 then  datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))<0 
							else (datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))>=0 or expiryDate is null) end 
	            				and (
						(
						jp.jobProfileNo like  concat( "%" , search_Text1 ,"%")
						or 
						jp.jobProfileNo like  concat( "%" , search_Text2 ,"%")
						or
						jp.jobProfileNo like  concat( "%" , search_Text3 ,"%")
						or
						jp.jobProfileNo like   concat( "%" , search_Text4 ,"%")
						)
					or (
						employmentType like   concat( "%" , search_Text1 ,"%")
						or
						employmentType like   concat( "%" , search_Text2 ,"%")
						or
						employmentType like   concat( "%" , search_Text3 ,"%")
						or
						employmentType like   concat( "%" , search_Text4 ,"%")
						)
					or (
						departmentName like   concat( "%" , search_Text1 ,"%")
						or
						departmentName like   concat( "%" , search_Text2 ,"%")
						or
						departmentName like   concat( "%" , search_Text3 ,"%")
						or
						departmentName like   concat( "%" , search_Text4 ,"%")
						)
					or (
						jp.jobTitle like   concat( "%" , search_Text1 ,"%")
						or
						jp.jobTitle like   concat( "%" , search_Text2 ,"%")
						or
						jp.jobTitle like   concat( "%" , search_Text3 ,"%")
						or
						jp.jobTitle like   concat( "%" , search_Text4 ,"%")
						)
					)
                ) a
				order by  					                 
                    case when Sort_by_Column =  'employmentType_asc' then   employmentType end asc,
                    case when Sort_by_Column =  'employmentType_desc' then   employmentType end desc,
					
					case when Sort_by_Column =  'departmentName_asc' then   employmentType end asc,
                    case when Sort_by_Column =  'departmentName_desc' then   employmentType end desc,      case when Sort_by_Column =  'wageMin_asc' then   wageMin end asc,
                    case when Sort_by_Column =  'wageMin_desc' then   wageMin end desc,                    
                    case when Sort_by_Column =  'statusText_asc' then   statusText end asc,
                    case when Sort_by_Column =  'statusText_desc' then   statusText end desc,                    
                    case when Sort_by_Column =  'haveAllowance_asc' then   haveAllowance end asc,
                    case when Sort_by_Column =  'haveAllowance_desc' then   haveAllowance end desc,
                    case when Sort_by_Column =  'gradeName_asc' then   gradeName end asc,
                    case when Sort_by_Column =  'gradeName_desc' then   gradeName end desc,                    
                    case when Sort_by_Column =  'expiryDate_asc' then   expiryDate end asc,
                    case when Sort_by_Column =  'expiryDate_desc' then   expiryDate end desc,                    
                    case when Sort_by_Column =  'jobProfileCreatedOn_asc' then   jobProfileCreatedOn end asc,
                    case when Sort_by_Column =  'jobProfileCreatedOn_desc' then   jobProfileCreatedOn end desc ,                     
                    case when Sort_by_Column =  'jobTitleSort_asc' then   jobTitleSort end asc ,
					case when Sort_by_Column =  'jobTitleSort_desc' then   jobTitleSort end desc
                LIMIT  no_of_records  OFFSET  start_record 
                 
	end if
     
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileAllowance`( 
IN jobProfile_Id bigint(20)
,IN language_Id bigint )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Job Profile allowance
*/

		select   ja.jobProfileAllowanceId  
				,ja.jobProfileId   
				,ja.allowanceId   
				,ba.allowanceName
				,ja.allowanceAmt   
				,ja.allowanceCurrencyId  
				,c.code as currencyCode
				,ja.allowancePaidTypeId 
				,ap.allowancePaidType 
				from jobProfileAllowance ja
				left join businessAllowance ba on ja.allowanceId = ba.allowanceId
				left join currencyLocale c on c.currencyId = ja.allowanceCurrencyId and c.languageId=language_Id
				left join allowancePaidTypeLocale ap on ap.allowancePaidTypeId = ja.allowancePaidTypeId and ap.languageId=language_Id
				where ja.jobProfileId = jobProfile_Id and isDeleted = 0
				
	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileAttachment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileAttachment`(
	 IN	jobProfile_Id	bigint(20)
   , IN	file_Name	varchar(1000)
)
BEGIN
/*
 Author: James
 Date  : 17/12/2014
 Description : Get Job profile Document
 call est_skillsconnect.GetJobProfileAttachment(1, null)
*/
select 
		jobProfileAttachmentId
	,	documentTypeId
	,	fileName
	,	fileMimeType
	,	fileETag
	,	fileUrl 
    ,  fileStatus
from jobProfileAttachment
where jobProfileId=jobProfile_Id 
and  fileName like concat("%",coalesce(file_Name,fileName),"%") 
and isDeleted=0  

	


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileBussinessQualification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileBussinessQualification`(
IN bussiness_Id bigint,
IN classification_Id int,
IN qualification_Name nvarchar(100),
IN language_Id int,
IN subClassification_Id int


)
BEGIN

/*
 Author: Tijo
 Date  : 20/11/2014
 Description :  Job profile business qualification
 call GetJobProfileBussinessQualification(1,null,"B.Tech",264)
*/

	select * from 
    (
	SELECT q.qualificationId, ql.qualificationName 
	FROM qualification q 
	inner join qualificationLocale ql on q.qualificationId = ql.qualificationId 
    and languageId = language_Id  and isSystemDefined =1

	union 

	SELECT q.qualificationId, ql.qualificationName 
	FROM qualification q 
	inner join qualificationLocale ql on q.qualificationId = ql.qualificationId and languageId = language_Id 
	where q.classificationId = coalesce(classification_Id, q.classificationId)
    and q.subClassificationId=coalesce(subClassification_Id,q.subClassificationId)
    and q.bussinessId = bussiness_Id
    ) a where a.qualificationName like concat("%" , coalesce(qualification_Name, a.qualificationName) ,"%")
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileDetails`( IN jobProfile_Id bigint(20), IN lang_Id bigint, IN businessSite_Id bigint )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Job profile deatils
 call GetJobProfileDetails (1,264)
*/

			select distinct
				 jobProfileName 
				,coalesce(jc.jobClassificationId ,0 ) as jobClassificationId
                ,jc.jobClassification as jobClassification
				,coalesce(jp.jobSubClassificationId,0 ) as jobSubClassificationId
                ,jsc.jobSubClassification as jobSubClassification
				,jobTitle 
				,jp.departmentId 
                ,departmentName
				,jp.employmentTypeId 
                ,employmentType
				,jp.gradeId
                ,gradeName
				,jp.licenseId 
                ,licenseName
				,needMedical 
				,additionalRequirement 
				,expMin
				,expMax 
				,expDescription 
				,kpi 
				,parentJobProfileId 
				,revisionNo 
				,referralJobProfileId 
				,isProvisional 
				,activeDate  
				,expiryDate  
				,workflowId 
				,wageTypeId 
				,wagePerId 
                ,salaryPerName as wagePer
				,wageCurrencyId 
				,wageMin 
				,wageMax
                ,expMinId
                ,expMaxId
                ,jp.businessjobProfileAgmntId
                ,ba.description as businessAgreement
                ,case when jbs.status=2 then 2 when (jp.isProvisional =0 and jbs.status=1) then 1 when (jp.isProvisional =1 and jbs.status=1) then 3 end as status
				,jp.createdby
                ,u.firstName
				,u.middleName
                ,u.lastName
                ,jp.createdOn
                ,jobProfileNo
                ,case when (select count(1) from jobProfileBusinessSite  jpbs inner join  jobProfileHireRequest jphr
						on jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId  and jphr.isDeleted=0 and jpbs.isDeleted=0
						where jpbs.jobProfileId =jobProfile_Id )>0 then 1 else 0 end haveHireRequest
				,c.code as currencyCode
			from jobProfile jp
			left join jobProfileBusinessSite jbs on jp.jobProfileId = jbs.jobProfileId 
			left join jobClassificationLocale jc on jc.jobClassificationId = jp.jobClassificationId and jc.languageId = lang_Id
			left join jobSubClassificationLocale jsc on jsc.jobSubClassificationId = jp.jobSubClassificationId and jsc.languageId = lang_Id
			left join businessDepartment d on d.departmentId = jp.departmentId  
			left join employmentTypeLocale pl on pl.employmentTypeId =  jp.employmentTypeId and pl.languageId = lang_Id
			left join businessGrade g on g.gradeId =  jp.gradeId 
			left join businessLicense l on l.licenseId = jp.licenseId 
			left join salaryPerLocale sp on sp.salaryPerId = jp.wagePerId and sp.languageId = lang_Id
			left join businessJobProfileAgreement ba on ba.businessjobProfileAgmntId = jp.businessjobProfileAgmntId
			inner join scUser u on jp.createdby = u.userId
			left join currencyLocale c on c.currencyId = jp.wageCurrencyId
			where jp.isDeleted =0 and jp.jobProfileId = jobProfile_Id and jbs.businessSiteId = coalesce(businessSite_Id,jbs.businessSiteId)

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileExperience` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileExperience`(IN exp_Type tinyint, IN language_Id int)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Master data for experinece in job profile
 call GetJobProfileExperience(1, 264)
*/



	SELECT l.jobProfileExpId
		, l.jobProfileExp 
        , minExpMnth
        , maxExpMnth
    FROM jobProfileExpLocale l
    inner join jobProfileExp e on l.jobProfileExpId = e.jobProfileExpId and languageId = language_Id and expType = exp_Type

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileFlexibleShiftTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileFlexibleShiftTime`(


 IN job_Title nvarchar(1000)
,IN businessSite_Id  bigint
,IN employmentType_Id int
,IN grade_Id int


)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 26/02/2015
 Description :  Job profile flexible shift
 call GetJobProfileFlexibleShiftTime("Commity Development",16,3,2)
*/

	select distinct 
    weekDayId ,
	shiftStartTime , 
	shiftEndTime,
    hireRequestShiftId
    from hireRequestShiftDays where hireRequestShiftId =
   (
	select hrs.hireRequestShiftId
	from  jobProfile jp
    inner join jobProfileBusinessSite jpbs on jp.jobProfileId = jpbs.jobProfileId
    inner join jobProfileHireRequest jphr on jpbs.jobProfileBusinessSiteId = jphr.jobProfileBusinessSiteId 
    inner join hireRequestDetail hrd on hrd.jobProfileHireRequestId = jphr.jobProfileHireRequestId and shiftType =2
    inner join hireRequestShift hrs on hrs.jobProfileHireRequestId = jphr.jobProfileHireRequestId 
	where jpbs.businessSiteId = businessSite_Id
	and rtrim(ltrim(jobTitle)) = coalesce(rtrim(ltrim(job_Title)), jobTitle)
	and employmentTypeId = coalesce(employmentType_Id, employmentTypeId)
	and coalesce(gradeId,0) = coalesce(grade_Id,coalesce(gradeId,0)) 
    order by hireRequestShiftId desc
    limit 1
    )
    
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileHireRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileHireRequest`(
IN	jobProfileHireRequest_Id	bigint(20)
,IN  language_Id bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 08/01/2015
 Description :  
 call est_skillsconnect.GetJobProfileHireRequest(4)

*/

	select 	jphr.jobProfileHireRequestId 
		,	jphr.jobProfileBusinessSiteId
		,	jphr.jobProfileId 
		,	jphr.parentHireRequestId 
		,	jphr.refferalHireRequestId 
		,	jphr.hireRequestNo 
		,	jphr.respondBy 
		,	jphr.hiringStartDate  
		,	jphr.hiringEndDate  
		,	jphr.startTime  
		,	jphr.additionalComments 
		,	jphr.workflowId
		, 	jphr.createdBy
		,	hrd.hireRequestDetailId 
		,	hrd.needInterview 
		,	hrd.needbusinessApproval 
		,	hrd.reportToAddress 
		, 	jpbs.businessSiteId
		,	hrd.phoneNo 
		,	hrd.mobileNo 
		,	hrd.costCentreId 
		,	hrd.empStartDate  
		,	hrd.empEndDate  
		,	hrd.shiftType 
		,	hrd.isTSRequired 
		,	hrd.timeSheetFormatId 
		,	hrd.uniformRequirements 
		,	hrd.additionalNotes 
		,	hrd.defineOnCost 
		,	hrd.estimatedMinHoursPerDay 
		,	hrd.estimatedMaxHoursPerDay  
		,	hrd.estimatedMinHoursPerWeek 
		,	hrd.estimatedMaxHoursPerWeek 
        ,	hres.estimatedStaffId  
		,	hres.estimatedStaff   
		,	hres.estimatedStaffComments 
        ,	sc.firstName
        ,	sc.middleName
        ,	sc.lastName
		,	jp.jobTitle
        ,	bg.gradeName       
		,	etl.employmentType   
        ,	jphr.workflowId as hireRequestWorkflowId
        ,	wagePerId
        ,	spl.salaryPerName as wagePer
		,	jp.wageCurrencyId
        ,	cl.currencyCode
        ,	cl.currencyName
        ,	jp.wageMin
        ,	jp.wageMax 
        ,   jphr.status as hireRequestStatus
        
        , 	siteName
        ,	hrd.reportToPerson
        ,	hrd.reportToPersonRoleId
        
	from jobProfileHireRequest jphr
    left join hireRequestDetail hrd on jphr.jobProfileHireRequestId = hrd.jobProfileHireRequestId
    left join hireRequestEstimatedStaff hres on jphr.jobProfileHireRequestId = hres.jobProfileHireRequestId
    left join jobProfileBusinessSite jpbs on jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId and jpbs.isDeleted=0
	left join jobProfile jp on jp.jobProfileId=jpbs.jobProfileId
	left join employmentTypeLocale etl on jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id 
	left join businessGrade bg on bg.gradeId=jp.gradeId  
	left join scUser sc on jphr.createdBy=sc.userId
    left join salaryPerLocale spl on jp.wagePerId=spl.salaryPerId and spl.languageId=language_Id
	left join currencyLocale cl on cl.currencyId=jp.wageCurrencyId and cl.languageId=language_Id
    left join businessSite bs on jpbs.businessSiteId = bs.businessSiteId
	where jphr.jobProfileHireRequestId=jobProfileHireRequest_Id and jphr.isDeleted=0
    order by hres.estimatedStaffId   desc
	limit 1
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileHireRequestSummary` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileHireRequestSummary`(
	IN business_Id bigint(20)
,	IN start_record bigint(20)  
,	IN no_of_records int(11) 
,	IN language_Id  bigint(20)
,	IN search_Type  tinyint
,	IN search_text_1	varchar(100)
,	IN search_text_2	varchar(100)
,	IN search_text_3	varchar(100)
,	IN search_text_4	varchar(100)
,	IN businessSite_Id	bigint(20)
,	IN sort_by_Column varchar(50)
,	IN sort_Order	varchar(20)
,	IN hireRequest_status tinyint
)
BEGIN


/*
 Author: James
 Date  : 08/01/2014
 Description : Hire request summary
 call est_skillsconnect.GetJobProfileHireRequestSummary(99, 0, 10, 264, 1, '', '', '', '', null, 'candidateName', 'desc', 2)

	search_Type  - 1 -- Job Profile No
                   2 --	Employment type
                   3 -- Department
                   4 -- Hire request no
                   5 -- All
	hireRequest_status 1-- inprogress, 2-- History
*/

-- /*
set search_text_1 =coalesce(search_text_1,'')
set search_text_2 =coalesce(search_text_2,search_text_1)
set search_text_3 =coalesce(search_text_3,search_text_1)
set search_text_4 =coalesce(search_text_4,search_text_1)
-- */ 
set Sort_by_Column = concat(Sort_by_Column, "_", lower(Sort_Order))

 
	
	
	select * ,FOUND_ROWS() as TotalRecords  from(
	select jphr.jobProfileHireRequestId
			,jphr.hireRequestNo
			,jphr.createdOn as hireRequestDate
			,jp.jobProfileId
			,jp.jobProfileName
			,jp.jobProfileNo
			,jp.revisionNo
			,bd.departmentId
			,bd.departmentName
			,etl.employmentTypeId
			,etl.employmentType
			-- ,hres.estimatedStaff
            ,(select estimatedStaff from hireRequestEstimatedStaff hres where jphr.jobProfileHireRequestId=hres.jobProfileHireRequestId limit 1 ) as estimatedStaff
			,jp.jobSubClassificationId
			,jsl.jobSubClassification as jobSubClassification
			,jp.jobTitle
			,bg.gradeName
			,jphr.createdBy
			,sc.firstName
			,sc.middleName
			,sc.lastName 
			,jphr.status as hireRequestStatus
			,case when jpbs.status=2 then 2 when (jp.isProvisional =0 and jpbs.status=1) then 1 when (jp.isProvisional =1 and jpbs.status=1) then 3 end as jobProfileStatus
			,jphr.parentHireRequestId
			,jphr.refferalHireRequestId
			,jp.wageTypeId
			,jp.wagePerId 
			,salaryPerName as wagePer
			,jp.wageCurrencyId 
			,jp.wageMin 
			,jp.wageMax
            ,jphr.workflowId
            ,case when (select count(1) from jobProfileBusinessSite  jpbs inner join  jobProfileHireRequest jphr
						on jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId  and jphr.isDeleted=0 and jpbs.isDeleted=0
						where jpbs.jobProfileId =jp.jobProfileId limit 1 )>0 then 1 else 0 end as haveHireRequest
            ,jp.expiryDate as jobProfileExpiryDate
			,coalesce(jphr.updatedOn,jphr.createdOn) as lastUpdatedDate
			,cll.currencyCode as wageCurrencyCode
	 from jobProfileHireRequest jphr 
	inner join hireRequestDetail hrd  on jphr.jobProfileHireRequestId=hrd.jobProfileHireRequestId and jphr.isDeleted=0 	
	inner join jobProfileBusinessSite jpbs on jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId and jpbs.isDeleted=0
    inner join businessSite bs on jpbs.businessSiteId=bs.businessSiteId and bs.businessId=business_Id and bs.isDeleted=0
	inner join jobProfile jp on jp.jobProfileId=jpbs.jobProfileId
	inner join businessDepartment bd on bd.departmentId=jp.departmentId
	left join employmentTypeLocale etl on jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
	left join jobSubClassificationLocale jsl on jp.jobSubClassificationId=jsl.jobSubClassificationId and jsl.languageId=language_Id
	left join businessGrade bg on bg.gradeId=jp.gradeId 
	left join scUser sc on jphr.createdBy=sc.userId  
	left join salaryPerLocale sp on sp.salaryPerId = jp.wagePerId  and sp.languageId=language_Id
    left join currencyLocale cll on cll.currencyId=jp.wageCurrencyId and cll.languageId =language_Id
	where bs.businessId=business_Id and jphr.isDeleted=0 	
	and (case when search_Type=1 then jp.jobProfileNo like concat("%", search_text_1 ,"%" )
			when search_Type=2 then etl.employmentType like concat("%", search_text_1 ,"%") 
			when search_Type=3 then bd.departmentName like concat("%", search_text_1 ,"%")
			when search_Type=4 then jphr.hireRequestNo like concat("%", search_text_1 ,"%")
			when search_Type=5 then  
            ((jp.jobProfileNo like concat( "%" , search_Text_1  ,"%") or jp.jobProfileNo like concat( "%" , search_Text_2 ,"%") or jp.jobProfileNo like concat( "%" , search_Text_3 ,"%") or jp.jobProfileNo like concat( "%" , search_Text_4 ,"%") ) 
            or
			(etl.employmentType like concat( "%" , search_Text_1 ,"%") or etl.employmentType like concat( "%" , search_Text_2 ,"%") or etl.employmentType like concat( "%" , search_Text_3  ,"%") or etl.employmentType like concat( "%" , search_Text_4 ,"%") ) 
            or
			(bd.departmentName like concat( "%" , search_Text_1 ,"%") or bd.departmentName like concat( "%" , search_Text_2 ,"%") or bd.departmentName like concat( "%" , search_Text_3 ,"%") or bd.departmentName like concat( "%" , search_Text_4 ,"%") ) 
            or
			(jphr.hireRequestNo like concat( "%" , search_Text_1 ,"%") or jphr.hireRequestNo like concat("%" , search_Text_2  ,"%") or jphr.hireRequestNo like concat( "%" , search_Text_3 ,"%") or jphr.hireRequestNo like concat( "%" , search_Text_4 ,"%") ) 
			) else 1=1 
            end
            )  
	 and  jpbs.businessSiteId=coalesce( businessSite_Id ,jpbs.businessSiteId) 
	and case when hireRequest_status = 1 then 
			(jphr.status not in(6,7,10)  or  (jphr.status in(6,10) and timediff(hireRequestClosingDate,utc_timestamp())>=cast('-24:00:00' as time)))
		else
		    (jphr.status   in(7)  or  (jphr.status in(6,10) and timediff(hireRequestClosingDate,utc_timestamp())<cast('-24:00:00' as time)))
		end 
     )a 
    order by  
		case when Sort_by_Column ='jobProfileHireRequestId_asc' then jobProfileHireRequestId end asc,
        case when Sort_by_Column ='jobProfileHireRequestId_desc' then jobProfileHireRequestId end desc,        
        case when Sort_by_Column ='hireRequestDate_asc' then hireRequestDate end asc,
        case when Sort_by_Column ='hireRequestDate_desc' then hireRequestDate end desc,
        case when Sort_by_Column ='jobTitle_asc' then jobTitle end asc,
        case when Sort_by_Column ='jobTitle_desc' then jobTitle end desc,
        case when Sort_by_Column ='departmentName_asc' then departmentName end asc,
        case when Sort_by_Column ='departmentName_desc' then departmentName end desc,        
        case when Sort_by_Column ='employmentType_asc' then employmentType end asc,
        case when Sort_by_Column ='employmentType_desc' then employmentType end desc,
        case when Sort_by_Column ='estimatedStaff_asc' then estimatedStaff end asc,
        case when Sort_by_Column ='estimatedStaff_desc' then estimatedStaff end desc,
        case when Sort_by_Column ='hireRequestStatus_asc' then hireRequestStatus end asc,
        case when Sort_by_Column ='hireRequestStatus_desc' then hireRequestStatus end desc,        
        case when Sort_by_Column ='lastUpdatedDate_asc' then lastUpdatedDate end asc,
        case when Sort_by_Column ='lastUpdatedDate_desc' then lastUpdatedDate end desc
        
    LIMIT   no_of_records  OFFSET   start_record 
		 
  
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileList`(
 in  businessSite_Id bigint(20)
,in department_Id  bigint(20)
,in subClassification_Id bigint(20)
,in language_Id  bigint(20)
)
BEGIN

/*
Author			: James
Date  			: 17/03/2016
Description     : Get Job profile details
*/


select jp.jobProfileId
	,jobProfileBusinessSiteId
	,jp.jobProfileNo
	,jp.jobProfileName
	,jp.jobSubClassificationId
	,jcl.jobSubClassification
	,jp.employmentTypeId
	,etl.employmentType
	,bg.gradeName
	,jp.expiryDate 
    ,bs.addressLine1
    ,bs.addressLine2
    ,jp.jobClassificationId
    ,jl.jobClassification
from jobProfile jp 
inner join jobProfileBusinessSite jpbs on jp.jobProfileId=jpbs.jobProfileId and jp.isDeleted=0 and jpbs.isDeleted=0
inner join businessSite bs on bs.businessSiteId=jpbs.businessSiteId and bs.isDeleted=0
inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
left join jobClassificationLocale jl on jl.jobClassificationId=jp.jobClassificationId and jl.languageId=language_Id
left join jobSubClassificationLocale jcl on jcl.jobSubClassificationId=jp.jobSubClassificationId and jcl.languageId=language_Id
left join businessDepartment bd on bd.departmentId=jp.departmentId
left join employmentTypeLocale etl on etl.employmentTypeId=jp.employmentTypeId and etl.languageId=language_Id
left join businessGrade bg on bg.gradeId=jp.gradeId
where jpbs.businessSiteId=businessSite_Id and jp.departmentId=department_Id and jp.jobSubClassificationId=subClassification_Id
and (datediff(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))>=0 or expiryDate is null)
and jpbs.status=2
order by jp.jobProfileId desc

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileQualification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileQualification`(
  IN	jobProfile_Id	bigint(20)
 ,IN    Qualification_Name	varchar(100)
 ,IN 	language_Id bigint
)
BEGIN
/*
 Author: James
 Date  : 17/12/2014
 Description : Get Job profile qualification
 call est_skillsconnect.GetJobProfileQualification(1, null)
 */


select 
	jpq.qualificationId
	,ql.qualificationName 
    ,jpq.jobProfileQualificationId
from jobProfileQualification jpq 
inner join qualificationLocale ql on jpq.qualificationId=ql.qualificationId
where jpq.jobProfileId=jobProfile_Id and 
case when Qualification_Name is null then ql.qualificationName =ql.qualificationName else ql.qualificationName like concat("%",Qualification_Name,"%") end
and languageId = language_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileSite`( 
  IN JobProfile_Id bigint
)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Job profile site summary
 call GetJobProfileSite (1, null, 264)
*/

	
	select jpb.businessSiteId 
		  ,jobProfileBusinessSiteId
    from jobProfileBusinessSite jpb 
    where JobProfileId = JobProfile_Id 
    and jpb.isDeleted=0
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileSiteSearch` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileSiteSearch`(
  IN business_Id bigint
, IN searchtext nvarchar(100)
, IN language_Id int
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Site search in job profile
*/


	select bs.businessSiteId 
    from businessSite bs 
    left join stateLocale sl on bs.stateId = sl.stateId and sl.languageId = language_Id
    left join cityLocale cl on bs.cityId = cl.cityId and cl.languageId = language_Id
    where 
    (
		   siteName like concat("%",coalesce(searchtext,siteName),"%") 
		or cityName like concat("%",coalesce(searchtext,cityName),"%") 
		or stateName like concat("%",coalesce(searchtext,stateName),"%")
	) 
	and bs.isDeleted=0 and businessId=business_Id 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileSiteSummary` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileSiteSummary`(IN JobProfile_Id bigint, IN business_Id bigint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : To get the selected job profiles site summary.
 call GetJobProfileSiteSummary (1,1)
*/
 
 
 
select * from 	(   
   	select bs.businessSiteId , siteName, 1 as siteCount, bs.businessSiteId as siteIds , 0 as totalsiteCount
    from businessSite bs
    inner join jobProfileBusinessSite jbs on bs.businessSiteId = jbs.businessSiteId and jbs.jobProfileId = JobProfile_Id and parentBusinessSiteId is null and jbs.isDeleted=0
    union all
		select businessSiteId
			  ,siteName
			  ,(
			  select count(1) from jobProfileBusinessSite jpb 
			  where isDeleted=0 
			  and jobProfileId = JobProfile_Id 
			  and ( 
				find_in_set(jpb.businessSiteId, (select childHierarchy from businessSite bs2 where bs2.businessSiteId = bs1.businessSiteId)) or jpb.businessSiteId = bs1.businessSiteId )
				)as siteCount
			  ,(select GROUP_CONCAT(distinct businessSiteId) from jobProfileBusinessSite jpb where isDeleted=0 and jobProfileId = JobProfile_Id and ( find_in_set(jpb.businessSiteId, (select childHierarchy from businessSite bs2 where bs2.businessSiteId = bs1.businessSiteId) ))  or jpb.businessSiteId = bs1.businessSiteId 
              ) as siteIds
			  ,(select count(1) from businessSite bs3 where isDeleted=0  and ( find_in_set(bs3.businessSiteId, (select childHierarchy from businessSite bs2 where bs2.businessSiteId = bs1.businessSiteId) ))  or bs3.businessSiteId = bs1.businessSiteId )as totalsiteCount
		from businessSite bs1
		where parentBusinessSiteId = (select businessSiteId from businessSite where businessId = business_Id and parentBusinessSiteId is null)  
 ) a  where siteCount >0
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileStatus`(
	in 	jobProfile_Id bigint(20)
    ,in	businessSite_Id bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 03/02/2015
 Description : Job profile status for a site.
 call est_skillsconnect.GetJobProfileStatus(1, 69)
*/


select case when jpbs.status=2 then 2 when (jp.isProvisional =0 and jpbs.status=1) then 1 when (jp.isProvisional =1 and jpbs.status=1) then 3 end as jobProfileStatus 
from jobProfile jp inner join jobProfileBusinessSite jpbs 
on jp.jobProfileId=jpbs.jobProfileId and jpbs.isDeleted=0
where jp.jobProfileId=jobProfile_Id and jpbs.businessSiteId=businessSite_Id
and jp.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobProfileWage` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobProfileWage`(
  IN	jobProfile_Id	bigint(20)
, IN 	language_Id 		bigint(20)

)
BEGIN
/*
 Author: James
 Date  : 22/12/2014
 Description : Get job profile allowance
*/


select   jobProfileWageId
		,jpw.wageTypeId 
		,wtl.wageType
		,jpw.wagePerId
		,salaryPerName
		,jpw.wageCurrencyId
		,cl.currencyName
		,wageMin
		,wageMax
from jobProfileWage jpw 
left join wageTypeLocale wtl on jpw.wageTypeId=wtl.wageTypeId and wtl.languageId=language_Id
left join salaryPerLocale spl on jpw.wagePerId=spl.salaryPerId and spl.languageId=language_Id
left join currencyLocale cl on jpw.wageCurrencyId=cl.currencyId and cl.languageId=language_Id
where jobProfileId=jobProfile_Id and isDeleted=0
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetJobType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetJobType`( IN language_Id bigint(20) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Job type
 call GetJobType(264)
*/

			
	 select jobTypeId
			 ,jobType
		from jobTypeLocale where languageId =language_Id
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLanguage` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLanguage`(   )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Language
*/
			
	 select languageId 
			 ,language
		from language
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLastMinuteHire` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLastMinuteHire`(
	IN shiftOffer_Id  bigint
,	IN search_Type	tinyint
,	IN sort_Column nvarchar(100)
,	IN start_record bigint
,	IN no_of_records bigint
,	IN language_Id	 bigint
,   IN business_siteId bigint

)
BEGIN

/*
Author: Tijo Joseph
Date  : 11/01/2015
Description : Get LastMinuteHire
 
call est_skillsconnect.GetLastMinuteHire(null, 2, 'shiftStartDateTime_asc', 0, 10, 264)
search_type 1-- in progress 2-- History 3-- shiftOffer_Id

sort column -- 
shiftStartDateTime_asc
shiftStartDateTime_desc  
jobSubClassification_asc 
jobSubClassification_desc
siteName_asc     
siteName_desc  
departmentName_asc   
departmentName_desc   
dateOfOrdered_asc 
dateOfOrdered_desc   
status_asc   
status_desc   

*/

  

select *,FOUND_ROWS() as TotalRecords from (
	select lastMinuteHireId 
			,shiftOfferId
            ,shiftStartDateTime
            ,shiftEndDateTime
            ,subClassificationId
            ,jobSubClassification
            ,siteName 
            ,departmentName
            ,dateOfOrdered 
            ,jobProfileId
            ,b.status
            ,case when b.status=3 then concat(coalesce(u.firstName,""), " " ,coalesce(u.middleName,""), case when length(coalesce(u.middleName,""))> 0 then " " else "" end , coalesce(u.lastName,"")) 
									else '' end as candidateName
			,isFlexibleShiftTime
			,shiftEndTimeType
			,shiftEndTimeValue
            from (
	select lastMinuteHireId
			,cso.shiftOfferId
            ,cso.shiftStartDateTime
            ,cso.shiftEndDateTime
            ,cso.subClassificationId
            ,jscl.jobSubClassification
            ,bs.siteName 
            ,bd.departmentName
			, DATE_ADD(lm.createdOn,INTERVAL coalesce(tz.timeDiffInMinutes,0) minute) as dateOfOrdered
            ,cso.jobProfileId
            ,lm.status
			, cso.candidateId
            ,cso.isFlexibleShiftTime
			,cso.shiftEndTimeType
			,cso.shiftEndTimeValue
	from lastMinuteHire lm 
	inner join candidateShiftOffer cso on lm.shiftOfferId=cso.shiftOfferId 
	left join jobSubClassificationLocale jscl on jscl.jobSubClassificationId=cso.subClassificationId and jscl.languageId=language_Id
	left join businessSite bs on bs.businessSiteId=cso.businessSiteId
	left join businessDepartment bd on bd.departmentId=cso.departmentId
    left join timeZone tz on bs.timeZoneId=tz.timeZoneId 
    where case when search_Type=1 then timediff(cso.shiftEndDateTime,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))>=0
			   when search_Type=2 then timediff(cso.shiftEndDateTime,DATE_ADD(utc_timestamp(),INTERVAL coalesce(tz.timeDiffInMinutes,0) minute))<0
               when search_Type=3 then cso.shiftOfferId=shiftOffer_Id end
	and cso.businessSiteId = coalesce(business_siteId,cso.businessSiteId) and lm.isDeleted=0
   )b
   left join scUser u on u.userId = b.candidateId
   ) a
	   order by case when sort_Column='shiftStartDateTime_asc'	  	   then shiftStartDateTime			end asc,
				case when sort_Column='shiftStartDateTime_desc'  	   then shiftStartDateTime			end desc,
				case when sort_Column='jobSubClassification_asc' then jobSubClassification	end asc,
				case when sort_Column='jobSubClassification_desc'then jobSubClassification	end desc,
				case when sort_Column='siteName_asc'     then siteName		end asc,
				case when sort_Column='siteName_desc'    then siteName		end desc,
                case when sort_Column='departmentName_asc'     then departmentName		end asc,
				case when sort_Column='departmentName_desc'    then departmentName		end desc,                 
                case when sort_Column='dateOfOrdered_asc'     then dateOfOrdered		end asc,
				case when sort_Column='dateOfOrdered_desc'    then dateOfOrdered		end desc,
                case when sort_Column='status_asc'     then status		end asc,
				case when sort_Column='status_desc'    then status		end desc
		LIMIT no_of_records OFFSET start_record               
	 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLastMinuteHireCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLastMinuteHireCandidate`(
 IN candidate_Name nvarchar(100)
,IN businessSite_Id bigint
)
BEGIN

/*
Author: Tijo Joseph
Date  : 11/01/2015
Description : Get LastMinuteHire Candidate
*/
	select * from (
				select distinct hrc.candidateUserId
				,concat(coalesce(u.firstName,""), " " , coalesce(u.lastName,"")) as candidateName
				from hireRequestCandidate hrc
				inner join jobProfileHireRequest jphr on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
				inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId = jphr.jobProfileBusinessSiteId
				left join scUser u on hrc.candidateUserId = u.userId
				where businessSiteId = businessSite_Id and hrc.candidateHRStatus = 11
    )a where  rtrim(ltrim(candidateName)) like concat("%",candidate_Name,"%")  

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLastMinuteHireJobSubClassification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLastMinuteHireJobSubClassification`(
 IN businessSite_Id bigint
,IN langugae_Id int
)
BEGIN

/*
Author			: Tijo
Date  			: 07/04/2015
Description 	: Last minute hire job classification
call GetLastMinuteHireJobSubClassification(80,264)
*/

	select distinct jp.jobSubClassificationId, jobSubClassification 
    from jobProfileBusinessSite jpbs 
    inner join jobProfile jp on jpbs.jobProfileId  = jp.jobProfileId
    inner join jobSubClassificationLocale jscl on jp.jobSubClassificationId = jscl.jobSubClassificationId and languageId = langugae_Id
    where businessSiteId = businessSite_Id
    order by jobSubClassification

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLastMinuteHireNotification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLastMinuteHireNotification`(
IN shiftOffer_Id bigint
,IN language_Id	bigint
)
BEGIN

/*
Author			: Tijo
Date  			: 07/04/2015
Description 	: Last minute hire Notification
*/


select   candidateUserId
		,candidateStatus
        ,cso.shiftStartDateTime
        ,cso.shiftEndDateTime 
        ,jscl.jobSubClassification
        ,bs.siteName 
        ,bd.departmentName
 from lastMinuteHireCandidate lmhc 
inner join lastMinuteHire lm on lmhc.lastMinuteHireId=lm.lastMinuteHireId and lm.isDeleted=0 and lmhc.isDeleted=0
inner join candidateShiftOffer cso on cso.shiftOfferId=lm.shiftOfferId
inner join jobSubClassificationLocale jscl on jscl.jobSubClassificationId=cso.subClassificationId and jscl.languageId=language_Id
left join businessSite bs on bs.businessSiteId=cso.businessSiteId
left join businessDepartment bd on bd.departmentId=cso.departmentId
where lm.shiftOfferId=shiftOffer_Id  and lmhc.candidateStatus<>3

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLastMinuteHireStaffList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLastMinuteHireStaffList`(
 IN shift_offerId bigint
,IN businessSite_Id bigint
,IN sort_Column nvarchar(100)
,IN start_record bigint
,IN no_of_records bigint
,IN language_id bigint 
,IN candidate_Name nvarchar(100)
,IN sub_classificationId bigint
,IN have_experience bit
,IN department_name nvarchar(1000)
,IN select_type tinyint
,IN lastMinuteHire_Id bigint -- 20
,IN manager_Id bigint
)
BEGIN


/*
Author			: Tijo
Date  			: 07/04/2015
Description 	: Last minute hire staff list
call GetLastMinuteHireStaffList(1,1,"candidateName_asc",0,100,264)

sorting column names
	candidateName_asc	  	  
	candidateName_desc 	  
	jobSubClassification_asc
	jobSubClassification_desc
	isWorkedClassification_asc
	isWorkedClassification_desc
	departmentName_asc  	  
	departmentName_desc 	  
	shiftStartDateTime_asc   
	shiftStartDateTime_desc  
    lastMinuteHireCandidateId_asc
    lastMinuteHireCandidateId_asc
    LMHstatus_asc
    LMHstatus_desc
    select_type -  1 all candidate , 2 - selected candidate
*/

select shiftStartDateTime,shiftEndDateTime,subClassificationId into @shiftStartTime,@shiftEndTime,@sub_Classification_Id from candidateShiftOffer where shiftOfferId = shift_offerId

		select *,FOUND_ROWS() as TotalRecords from (
			select * from  (
				select distinct hrc.candidateUserId
						 , concat(coalesce(u.firstName,""), " " , coalesce(u.lastName,"")) as candidateName
						 , case when exists(select 1 from candidateShiftOffer so inner join candidateTimesheet ts on so.shiftOfferId = ts.shiftOfferId
											where subClassificationId = @sub_Classification_Id and ts.status =2 and so.candidateId =hrc.candidateUserId limit 1 ) 
							   then 1
							   else 0 end as isWorkedClassification 
						 , (select shiftStartDateTime as shiftStartDateTime from candidateShiftOffer s1 where hrc.candidateUserId = s1.candidateId and s1.isDeleted=0 and s1.shiftStartDateTime > @shiftStartTime and s1.status NOT IN (3,10,19,33,36)  order by shiftStartDateTime limit 1) as shiftStartDateTime
                         , (select shiftEndDateTime as shiftEndDateTime from candidateShiftOffer s1 where hrc.candidateUserId = s1.candidateId and s1.isDeleted=0 and s1.shiftStartDateTime > @shiftStartTime  and s1.status NOT IN (3,10,19,33,36) order by shiftStartDateTime limit 1) as shiftEndDateTime
						 , uc.mobilePhone
						 , imageName 
						 , imagePath 
						 , imageMimeType 
						 , eTag 
						 , round(GetCandidateTotalHoursForWeekByDate(hrc.candidateUserId,date(@shiftStartTime),bs.businessSiteId,manager_Id),2) as number_of_hrs_allocated
						 , candidateStatus as LMHstatus
						 , lc.lastMinuteHireCandidateId
						 , lc.lastMinuteHireId
						 , lh.shiftOfferId
						 , bs.siteName
						 , u.userUIId
						 , u.encryptionKey
                         , (select isFlexibleShiftTime from candidateShiftOffer s1 where hrc.candidateUserId = s1.candidateId and s1.isDeleted=0 and s1.shiftStartDateTime > @shiftStartTime and s1.status NOT IN (3,10,19,33,36) order by shiftStartDateTime limit 1) as isNextShiftFlexibleShiftTime
                         , (select shiftEndTimeType from candidateShiftOffer s1 where hrc.candidateUserId = s1.candidateId and s1.isDeleted=0 and s1.shiftStartDateTime > @shiftStartTime and s1.status NOT IN (3,10,19,33,36) order by shiftStartDateTime limit 1) as nextShiftShiftEndTimeType
                         , (select shiftEndTimeValue from candidateShiftOffer s1 where hrc.candidateUserId = s1.candidateId and s1.isDeleted=0 and s1.shiftStartDateTime > @shiftStartTime and s1.status NOT IN (3,10,19,33,36) order by shiftStartDateTime limit 1) as nextShiftShiftEndTimeValue
				  from hireRequestCandidate hrc
				  inner join jobProfileHireRequest jphr on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId  and hrc.isDeleted=0
				  inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId = jphr.jobProfileBusinessSiteId and jphr.isDeleted=0
				  inner join jobProfile jp on jphr.jobProfileId = jp.jobProfileId and  jp.isDeleted=0
				  inner join jobSubClassificationLocale jsc on jsc.jobSubClassificationId = jp.jobSubClassificationId and jsc.languageId = language_Id
				  inner join hireRequestDetail hrd on hrd.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
				  left join businessDepartment bd on bd.departmentId = jp.departmentId
				  left join lastMinuteHireCandidate lc on hrc.candidateUserId = lc.candidateUserId and lastMinuteHireId = lastMinuteHire_Id
				  left join lastMinuteHire lh on lh.lastMinuteHireId = lc.lastMinuteHireId  and lh.shiftofferId = coalesce(shift_offerId, lh.shiftofferId)
				  left join businessSite bs on bs.businessSiteId = jpbs.businessSiteId
				  left join scUser u on hrc.candidateUserId = u.userId 
				  left join userContact uc on u.userId = uc.userId and uc.isDeleted=0
				  left join userProfileImage upi on u.userId = upi.userId and upi.isDeleted=0
				  where   jpbs.businessSiteId = coalesce(businessSite_Id,jpbs.businessSiteId)  and hrc.candidateHRStatus=11  and hrc.isDeleted=0
				  and jp.jobSubclassificationId = coalesce(sub_classificationId ,jp.jobSubclassificationId) and u.isDeleted=0
				  and bd.departmentName like coalesce(concat("%",department_name,"%"),bd.departmentName)
				  and case when select_type = 1 then 1 =1 when select_type = 2 then (lc.candidateStatus is not null) and candidateStatus<>0 end
				  and jpbs.businessSiteId = coalesce(businessSite_Id,jpbs.businessSiteId) 
				  and CheckCandidateAvailability(hrc.candidateUserId,shift_offerId,@shiftStartTime,@shiftEndTime) = 1
				  and datediff(empStartDate,utc_timestamp())<=0 and datediff(empEndDate,utc_timestamp())>=0 
				) b  where rtrim(ltrim(candidateName)) like concat("%",candidate_Name,"%")   and isWorkedClassification = coalesce(have_experience,isWorkedClassification)
		) a
	   order by case when sort_Column='candidateName_asc'	  	   then candidateName			end asc,
				case when sort_Column='candidateName_desc'  	   then candidateName			end desc,
				case when sort_Column='isWorkedClassification_asc' then isWorkedClassification	end asc,
				case when sort_Column='isWorkedClassification_desc'then isWorkedClassification	end desc,
			 	case when sort_Column='shiftStartDateTime_asc'     then shiftStartDateTime		end asc,
				case when sort_Column='shiftStartDateTime_desc'    then shiftStartDateTime		end desc,
                case when sort_Column='lastMinuteHireCandidateId_asc'     then lastMinuteHireCandidateId		end asc,
				case when sort_Column='lastMinuteHireCandidateId_desc'    then lastMinuteHireCandidateId		end desc,	
                case when sort_Column='LMHstatus_asc'     	then LMHstatus		end asc,
				case when sort_Column='LMHstatus_desc'    	then LMHstatus		end desc	
	    LIMIT no_of_records OFFSET start_record  
        
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLastMinuteHireStaffListJobProfiles` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLastMinuteHireStaffListJobProfiles`(
 IN candidateUserIds nvarchar(3000)
,IN businessSite_Id bigint
,IN language_id bigint 
,IN sub_classificationId bigint
,IN department_name nvarchar(1000)
)
BEGIN


/*
Author			: Tijo
Date  			: 07/04/2015
Description 	: Last minute hire staff job profile
*/
	select distinct hrc.candidateUserId
	, jp.jobProfileId
	, jp.jobSubClassificationId
	, jsc.jobSubClassification
	, jp.departmentId
	, bd.departmentName

	from hireRequestCandidate hrc
	inner join jobProfileHireRequest jphr on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
	inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId = jphr.jobProfileBusinessSiteId
	inner join jobProfile jp on jphr.jobProfileId = jp.jobProfileId
	inner join jobSubClassificationLocale jsc on jsc.jobSubClassificationId = jp.jobSubClassificationId and jsc.languageId = language_id
	left join businessDepartment bd on bd.departmentId = jp.departmentId
	left join scUser u on hrc.candidateUserId = u.userId
    left join userContact uc on u.userId = uc.userId
    left join userProfileImage upi on u.userId = upi.userId
	where jpbs.businessSiteId = coalesce(businessSite_Id,jpbs.businessSiteId)  and hrc.candidateHRStatus=11 
	and jp.jobSubclassificationId = coalesce(sub_classificationId ,jp.jobSubclassificationId)
	and bd.departmentName = coalesce(department_name,bd.departmentName)
    and find_in_set(hrc.candidateUserId, candidateUserIds)
    



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetLocation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetLocation`(
	IN location_Name varchar(100)
   ,IN language_Id bigint(20)
)
BEGIN


/*
 Author: James
 Date  : 08/12/2014
 Description : Get location
*/

select cl.cityId
	, concat(cl.cityName, ', ',sl.stateName,', ',cnl.countryName ) location 
from city c 
inner join  cityLocale cl on c.cityId=cl.cityId and cl.languageId=language_Id
inner join stateLocale sl on c.stateId=sl.stateId and sl.languageId=language_Id
inner join state s on s.stateId=sl.stateId  
inner join countryLocale cnl on cnl.countryId=s.countryId and cnl.languageId=language_Id
where cl.cityName like concat('%',location_Name,'%') 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetManagerDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetManagerDetails`(
IN manager_Id BIGINT(20), 
IN language_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get manager details
*/
	SELECT scu.userId AS managerId,
			CONCAT(scu.firstName,' ',scu.lastName) AS managerName,
			0 AS departmentId,
			'' AS departmentName,
			bs.siteName,
			bs.addressLine1,
			bs.addressLine2,
			cl.cityName,
			sl.stateName,
			sl.abbreviation,
			col.countryName,
			bs.zipCode,
			bs.fax,
			upi.imagePath
	FROM scUser scu
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	INNER JOIN userRole ur ON scu.userId=ur.userId
	INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ur.userRoleId AND ur.RoleCategoryId = 3 AND cbs.isDeleted =0
	INNER JOIN businessSite bs ON cbs.businessSiteId=bs.businessSiteId
	INNER JOIN cityLocale cl ON bs.cityId=cl.cityId
	INNER JOIN stateLocale sl ON bs.stateId=sl.stateId
	INNER JOIN countryLocale col ON bs.countryId=col.countryId
	WHERE scu.userId=manager_Id AND cl.languageId=language_Id AND sl.languageId=language_Id AND col.languageId=language_Id 
		AND scu.isDeleted=0 AND bs.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetMasterBusinessFunction` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetMasterBusinessFunction`(
 IN RoleCategory_Id bigint(20)
,IN language_Id bigint(20)
,IN workFlow_Id tinyint
,IN business_Id bigint(20)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get master claim
 call GetMasterClaim(3,  264)
*/

		declare groupName nvarchar(1000)
		set groupName = (select 
		case when isOtherGroupName=1 then otherGroupName else gl.groupName  end as groupName
		from business b
		left join groupNameLocale gl on b.groupNameId = gl.groupNameId and languageId = language_id
		where businessId = business_Id)

		select 
		 c.businessFunctionId 
		,REPLACE(cn.businessFunctionName , 'Site', groupName) as businessFunctionName 
		,coalesce (c.parentbusinessFunctionId,0) as parentbusinessFunctionId
        ,c.showInUI
        ,c.isHeader
    from businessFunction c
    inner join businessFunctionLocale cn on c.businessFunctionId = cn.businessFunctionId
    inner join businessFunctionRoleCategory cr on cr.businessFunctionId=c.businessFunctionId
    inner join businessFunctionWorkFlow wf on wf.businessFunctionId = c.businessFunctionId
    where isDeleted =0  and RoleCategoryId= coalesce(RoleCategory_Id ,RoleCategoryId)
    and cn.languageId = language_Id and wf.workFlowId = workFlow_Id
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetMasterClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetMasterClaim`(IN RoleCategory_Id bigint(20),  IN language_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get master claim
 call GetMasterClaim(3,  264)
*/


	select 
		 c.claimId
		,cn.claimName
		,coalesce (c.parentClaimId,0) as parentClaimId
        ,c.showInUI
        ,c.isHeader
    from scClaim c
    left join scClaimLocale cn on c.claimId = cn.claimId
    left join scClaimRoleCategory cr on cr.claimId=c.claimId
    where isDeleted =0  and RoleCategoryId= coalesce(RoleCategory_Id ,RoleCategoryId)
    and cn.languageId = language_Id
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetMasterData` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetMasterData`(
IN source_languageId bigint(20)
,in target_languageId bigint(20)
)
BEGIN

/*
set source_languageId =264
set target_languageId=352
*/
select 'allowancePaidTypeLocale' as tableName ,a.allowancePaidTypeId ,a.allowancePaidType,b.allowancePaidType
from allowancePaidTypeLocale a left join allowancePaidTypeLocale b on a.allowancePaidTypeId=b.allowancePaidTypeId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union 
select 'areaOfExpertiseLocale' as tableName ,a.areaOfExpertiseId ,a.areaOfExpertise,b.areaOfExpertise
from areaOfExpertiseLocale a left join areaOfExpertiseLocale b on a.areaOfExpertiseId=b.areaOfExpertiseId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'businessFunctionLocale' as tableName ,a.businessFunctionId ,a.businessFunctionName,b.businessFunctionName
from businessFunctionLocale a left join businessFunctionLocale b on a.businessFunctionId=b.businessFunctionId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'candidateSearchExpLocale' as tableName ,a.candidateSearchExpId ,a.candidateSearchExp,b.candidateSearchExp
from candidateSearchExpLocale a left join candidateSearchExpLocale b on a.candidateSearchExpId=b.candidateSearchExpId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'cityLocale' as tableName ,a.cityId ,a.cityName,b.cityName
from cityLocale a left join cityLocale b on a.cityId=b.cityId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'countryLocale' as tableName ,a.countryId ,a.countryName,b.countryName
from countryLocale a left join countryLocale b on a.countryId=b.countryId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'courseLocale' as tableName ,a.courseId ,a.courseName,b.courseName
from courseLocale a left join courseLocale b on a.courseId=b.courseId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'currencyLocale' as tableName ,a.currencyId ,a.currencyName,b.currencyName
from currencyLocale a left join currencyLocale b on a.currencyId=b.currencyId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'documentMimeTypeLocale' as tableName ,a.documentMimeTypeId ,a.documentMimeType,b.documentMimeType
from documentMimeTypeLocale a left join documentMimeTypeLocale b on a.documentMimeTypeId=b.documentMimeTypeId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'employmentProfileLocale' as tableName ,a.employmentProfileId ,a.employmentProfile,b.employmentProfile
from employmentProfileLocale a left join employmentProfileLocale b on a.employmentProfileId=b.employmentProfileId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'employmentTypeLocale' as tableName ,a.employmentTypeId ,a.employmentType,b.employmentType
from employmentTypeLocale a left join employmentTypeLocale b on a.employmentTypeId=b.employmentTypeId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'featureLocale' as tableName ,a.featureId ,a.featureName,b.featureName
from featureLocale a left join featureLocale b on a.featureId=b.featureId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'genderLocale' as tableName ,a.genderId ,a.genderName,b.genderName
from genderLocale a left join genderLocale b on a.genderId=b.genderId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'groupNameLocale' as tableName ,a.groupNameId ,a.groupName,b.groupName
from groupNameLocale a left join groupNameLocale b on a.groupNameId=b.groupNameId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'industryLocale' as tableName ,a.industryID ,a.industryName,b.industryName
from industryLocale a left join industryLocale b on a.industryID=b.industryID
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'jobClassificationLocale' as tableName ,a.jobClassificationId ,a.jobClassification,b.jobClassification
from jobClassificationLocale a left join jobClassificationLocale b on a.jobClassificationId=b.jobClassificationId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'jobProfileExpLocale' as tableName ,a.jobProfileExpId ,a.jobProfileExp,b.jobProfileExp
from jobProfileExpLocale a left join jobProfileExpLocale b on a.jobProfileExpId=b.jobProfileExpId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'jobSubClassificationLocale' as tableName ,a.jobSubClassificationId ,a.jobSubClassification,b.jobSubClassification
from jobSubClassificationLocale a left join jobSubClassificationLocale b on a.jobSubClassificationId=b.jobSubClassificationId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'periodLocale' as tableName ,a.periodId ,a.period,b.period
from periodLocale a left join periodLocale b on a.periodId=b.periodId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'roleInfoLocale' as tableName ,a.roleId ,a.roleName,b.roleName
from roleInfoLocale a left join roleInfoLocale b on a.roleId=b.roleId
and   b.languageId=target_languageId
where a.languageId=source_languageId and a.roleId<7
union 
select 'salaryPerLocale' as tableName ,a.salaryPerId ,a.salaryPerName,b.salaryPerName
from salaryPerLocale a left join salaryPerLocale b on a.salaryPerId=b.salaryPerId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'scMonthLocale' as tableName ,a.monthId ,a.monthName,b.monthName
from scMonthLocale a left join scMonthLocale b on a.monthId=b.monthId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'skillLocale' as tableName ,a.skillId ,a.skillName,b.skillName
from skillLocale a left join skillLocale b on a.skillId=b.skillId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'stateLocale' as tableName ,a.stateId ,a.stateName,b.stateName
from stateLocale a left join stateLocale b on a.stateId=b.stateId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'timeSheetFormatLocale' as tableName ,a.timeSheetFormatId ,a.timeSheetFormat,b.timeSheetFormat
from timeSheetFormatLocale a left join timeSheetFormatLocale b on a.timeSheetFormatId=b.timeSheetFormatId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'timeSheetweekEndLocale' as tableName ,a.weekEndDayId ,a.weekEndDay,b.weekEndDay
from timeSheetweekEndLocale a left join timeSheetweekEndLocale b on a.weekEndDayId=b.weekEndDayId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'weekDayLocale' as tableName ,a.weekDayId ,a.weekDay,b.weekDay
from weekDayLocale a left join weekDayLocale b on a.weekDayId=b.weekDayId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'timeZoneLocale' as tableName ,a.timeZoneId ,a.timeZoneName,b.timeZoneName
from timeZoneLocale a left join timeZoneLocale b on a.timeZoneId=b.timeZoneId
and   b.languageId=target_languageId
where a.languageId=source_languageId
union
select 'wageTypeLocale' as tableName ,a.wageTypeId ,a.wageType,b.wageType
from wageTypeLocale a left join wageTypeLocale b on a.wageTypeId=b.wageTypeId
and   b.languageId=target_languageId
where a.languageId=source_languageId

 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetMonthName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetMonthName`( in language_Id bigint( 20))
BEGIN


/*
 Author: James
 Date  : 20/11/2014
 Description : get month Name
*/

select monthId,monthName  from scMonthLocale
where  languageId=language_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetNameSalutation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetNameSalutation`(   )
BEGIN 

/*
 Author: Tijo
 Date  : 20/11/2014
 Description : Name salutation master data
*/

			
	 select NameSalutationId 
			,userNameSalutation
		from nameSalutation
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetNotificationCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetNotificationCount`(
 IN user_Id bigint
,IN typeId tinyint
)
BEGIN


		declare role_Ids nvarchar(100)
        declare NewHireRequest int
        declare JobMatch int
        declare NewHires int
        declare jobProfileExpiring int
        declare shiftChanges int
        declare CriticalShiftChanges int
        declare outstandingApprovals int
        declare disputedTimesheets int
        declare lastMinuteHireCount int
        declare shiftOffers_count int
		declare jobMatches_count INT
		declare timeSheet_count INT
		declare CandlastMinuteHireCount int
        
        declare totalCount int
        
        declare roleCategory_Id tinyint
		set roleCategory_Id = (select roleCategoryId from scUser where userId = user_Id)
        
        if (roleCategory_Id = 3) then
			set role_Ids =(select distinct group_concat(role_Id) 
			FROM userRoleBusinessSite urbs 
			INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId 
			WHERE  userId =user_Id AND roleID IN (3,5) and isDeleted=0)
	 
			/*Business user*/

			SELECT COUNT(1) into NewHireRequest FROM jobProfileHireRequest jphr 
			INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId AND jphr.status IN(2,3) AND jphr.isDeleted=0
			INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
			INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /* AND ur.roleId=role_Id */ AND ur.userId=user_Id
			where find_in_set(ur.roleId, role_Ids)


			SELECT COUNT(1) into JobMatch FROM jobProfileHireRequest jphr 
			INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId AND jphr.status =3 AND jphr.isDeleted=0
			INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
			INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /*AND ur.roleId=role_Id*/ AND ur.userId=user_Id
			where find_in_set(ur.roleId, role_Ids)


			SELECT COUNT(1) into NewHires FROM hireRequestCandidate hrc INNER JOIN jobProfileHireRequest jphr 
			ON hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId AND hrc.candidateHRStatus=11 AND hrc.isDeleted=0
			INNER JOIN hireRequestDetail hrd ON hrd.jobProfileHireRequestId=hrc.jobProfileHireRequestId
			INNER JOIN jobProfileBusinessSite jpbs ON jphr.jobProfileBusinessSiteId=jpbs.jobProfileBusinessSiteId     AND jphr.isDeleted=0
			INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
			INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /*AND ur.roleId=role_Id*/ AND ur.userId=user_Id
			WHERE DATEDIFF(empStartDate,utc_timestamp())<=6 AND DATEDIFF(empStartDate,utc_timestamp())>=0 
			and find_in_set(ur.roleId, role_Ids)

			SELECT COUNT(DISTINCT jp.jobProfileId) into jobProfileExpiring FROM jobProfile jp INNER JOIN jobProfileBusinessSite jpbs ON jp.jobProfileId=jpbs.jobProfileId AND jp.isDeleted=0 AND jpbs.isDeleted=0
			INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId=jpbs.businessSiteId
			INNER JOIN userRole ur ON urbs.userRoleId=ur.userRoleId /*AND ur.roleId=role_Id */ AND ur.userId=user_Id
			INNER JOIN businessSite bs ON bs.businessSiteId = jpbs.businessSiteId
			INNER JOIN timeZone tz ON  bs.timeZoneId = tz.timeZoneId
			WHERE DATEDIFF(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))<=28 AND DATEDIFF(expiryDate ,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))>=0 AND jpbs.status=2
			and find_in_set(ur.roleId, role_Ids)

			SELECT COUNT(1) into shiftChanges 
			FROM
			(
			SELECT shiftOfferId
			FROM candidateShiftOffer so
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE so.createdBy=user_Id AND so.STATUS IN (10,30,23) AND so.shiftStartDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
			UNION
			SELECT cg.shiftOfferId
			FROM candidateGiveAwayRequests cg
			INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE so.createdBy=user_Id AND cg.status=23 AND so.shiftStartDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
			) t1
			 
		
			SELECT COUNT(1) into CriticalShiftChanges FROM(
			SELECT shiftOfferId
			FROM candidateShiftOffer so
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE so.createdBy=user_Id AND so.STATUS IN (10,30,23) AND so.isDeleted=0 AND so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND ((TIME_TO_SEC(TIMEDIFF(so.shiftStartDateTime, DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)))/3600)<=48)
			UNION
			SELECT cg.shiftOfferId
			FROM candidateGiveAwayRequests cg
			INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE so.createdBy=user_Id AND cg.status=23 AND so.isDeleted=0 AND so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND (TIME_TO_SEC(TIMEDIFF(so.shiftStartDateTime, DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)))/3600)<=48
			) AS t1

			SELECT COUNT(1) into outstandingApprovals
			FROM candidateTimesheet ct
			INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
			WHERE so.createdBy=user_Id AND ct.status=34 AND so.isDeleted=0


			SELECT COUNT(1) as disputedTimesheets
			FROM candidateTimesheet ct
			INNER JOIN candidateShiftOffer so ON ct.shiftOfferId=so.shiftOfferId
			WHERE so.createdBy=user_Id AND ct.status=3 AND so.isDeleted=0


			SELECT COUNT(1) into lastMinuteHireCount FROM 
			lastMinuteHire lmh
			INNER JOIN candidateShiftOffer cso ON cso.shiftOfferId = lmh.shiftOfferId
			INNER JOIN businessSite bs ON bs.businessSiteId = cso.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId=tz.timeZoneId 
			INNER JOIN userRoleBusinessSite urbs ON urbs.businessSiteId = bs.businessSiteId
			INNER JOIN userRole ur ON urbs.userRoleId = ur.userRoleId
			WHERE lmh.status <> 3 AND ur.userId = user_Id
			AND TIMEDIFF(cso.shiftEndDateTime,DATE_ADD(utc_timestamp(),INTERVAL COALESCE(tz.timeDiffInMinutes,0) MINUTE))>=0
            
            set totalCount = (NewHireRequest+JobMatch+NewHires+jobProfileExpiring+shiftChanges+CriticalShiftChanges+outstandingApprovals+disputedTimesheets+lastMinuteHireCount)
            
            if(typeId=1) then
				select NewHireRequest as typeCount, totalCount
            else if (typeId=2) then
				select JobMatch as typeCount, totalCount
            else if (typeId=3) then
				select NewHires as typeCount, totalCount
            else if (typeId=4) then
				select jobProfileExpiring as typeCount, totalCount
            else if (typeId=5) then
				select shiftChanges as typeCount, totalCount
            else if (typeId=6) then
				select CriticalShiftChanges as typeCount, totalCount
            else if (typeId=7) then
				select outstandingApprovals as typeCount, totalCount
            else if (typeId=8) then
				select disputedTimesheets as typeCount, totalCount
            else if (typeId=9) then
				select lastMinuteHireCount as typeCount, totalCount
            end if
            end if
            end if
            end if
            end if
            end if
            end if
            end if
            end if
            
         
        else
        /*Candidate user*/
	
	
			select count(t1.shiftOfferId) into shiftOffers_count FROM (
			SELECT so.shiftOfferId
			from candidateShiftOffer so 
			inner join businessSite bs on so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			where so.candidateId=candidate_Id and so.status in (1,14,18,39,41) and so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) and so.isDeleted=0
			UNION
			SELECT cg.shiftOfferId
			FROM candidateGiveAwayRequests cg 
			INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE cg.candidateId=candidate_Id AND cg.status IN (18,39,41,49) AND so.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.isDeleted=0
			) as t1
			
			SELECT COUNT(so.shiftOfferId) INTO timeSheet_count 
			FROM candidateShiftOffer so
			inner join candidateTimesheet ct on so.shiftOfferId=ct.shiftOfferId
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			WHERE so.candidateId=candidate_Id AND so.shiftEndDateTime < DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND ct.status IN (1,3) AND so.isDeleted=0
			
			select count(1) into jobMatches_count
			from hireRequestCandidate hrc
			inner join jobProfileHireRequest hr on hrc.jobProfileHireRequestId = hr.jobProfileHireRequestId
			inner join hireRequestDetail hrd on hr.jobProfileHireRequestId = hrd.jobProfileHireRequestId
			where candidateUserId=candidate_Id and candidateHRstatus in  (3,7)  and hrc.isDeleted=0
			and datediff(empStartDate,utc_timestamp())>=0
			

			select count(1) into  CandlastMinuteHireCount
			from lastMinuteHireCandidate lmhc
			inner join lastMinuteHire lmh on lmhc.lastMinuteHireId = lmh.lastMinuteHireId
			inner join candidateShiftOffer cso on cso.shiftOfferId = lmh.shiftOfferId
			inner join businessSite bs on bs.businessSiteId = cso.businessSiteId
			inner join timeZone tz on tz.timeZoneId = bs.timeZoneId
			where candidateUserId = candidate_Id and lmhc.IsIgnored = 0 and lmhc.candidatestatus=2 
			AND cso.shiftStartDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
            
            set totalCount = (shiftOffers_count+timeSheet_count+jobMatches_count+CandlastMinuteHireCount)
            
             if(typeId=10) then
				select shiftOffers_count as typeCount, totalCount
            else if (typeId=11) then
				select timeSheet_count as typeCount, totalCount
            else if (typeId=12) then
				select jobMatches_count as typeCount, totalCount
            else if (typeId=13) then
				select CandlastMinuteHireCount as typeCount, totalCount
			end if
            end if
            end if
            end if
			
		end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetNotificationRequestDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetNotificationRequestDocument`(
	in document_GUID  varchar(45)
,   in user_Id		  bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 27/06/2016
 Description : Get Notification Document
 */

	if coalesce(user_Id,0)<>0 then
			select distinct 
				authorizationRequired
			,	notificationRequestDocumentId
			,	n.notificationId
			,	documentName
			,	documentPath
			,	documentMimeType
			,	eTag
			,	fileStatus
			,	documentGUID
			from notificationRequestDocument nd 
			inner join notification n on nd.notificationId=n.notificationId
			inner join notificationRequest nr on nr.notificationId=n.notificationId
			inner join notificationRecipient nrd on nrd.notificationRequestId=nr.notificationRequestId
			where documentGUID=document_GUID and nrd.userId=user_Id and nd.isDeleted=0 and n.isDeleted=0
	else
			select distinct 
				authorizationRequired
			,	notificationRequestDocumentId
			,	n.notificationId
			,	documentName
			,	documentPath
			,	documentMimeType
			,	eTag
			,	fileStatus
			,	documentGUID
			from notificationRequestDocument nd 
			left join notification n on nd.notificationId=n.notificationId
			where documentGUID=document_GUID 
	 end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetPendingTimesheetDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetPendingTimesheetDetails`(
IN roster_date DATE
)
BEGIN

/*
 Author: Sravanthi M
 Date  : 04/05/2016
 Description : GetPendingTimesheetDetails
 call GetPendingTimesheetDetails('2016-04-20')
 
*/

	SELECT 
		ct.candidateId,
		CONCAT(scu.firstName, ' ', scu.lastName) AS employeeName,
		so.shiftStartDateTime,
		so.shiftEndDateTime,
		so.shiftofferId,
		ct.timesheetId,
		ct.status,
		b.businessId,
		b.businessName,
		so.departmentId,
		d.departmentName
	FROM
		candidateTimesheet ct
			INNER JOIN
		candidateShiftOffer so ON ct.shiftOfferId = so.shiftOfferId
			INNER JOIN
		scUser scu ON ct.candidateId = scu.userId
			LEFT JOIN
		businessSite bs ON bs.businessSiteId = so.businessSiteId
			LEFT JOIN
		business b ON b.businessId = bs.businessId
			LEFT JOIN
		businessDepartment d ON d.departmentId = so.departmentId
	WHERE
		DATE(so.shiftStartDateTime) = DATE(roster_date)
			AND ct.status = 1 AND ct.isDeleted = 0
			AND so.isDeleted = 0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetPeriod` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetPeriod`( IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo
 Date  : 20/11/2014
 Description : Master data for period
*/

	select periodId,period from periodLocale where languageId =language_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetProfile`( IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo
 Date  : 20/11/2014
 Description : Master data for profile
*/

	select profileId
		  ,profileName
		from profile where languageId =language_Id 
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetPublicLiabilityIds` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetPublicLiabilityIds`(IN Id bigint,IN Role_CategoryId tinyint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Public Liability Ids
 call GetWorkerCompensationIds(11,3)
*/ 

		select businessPublicLiabilityId  
        from businessPublicLiability  where Role_CategoryId = 3 and  businessId = Id
    union all
		select agencyPublicLiabilityId 
        from agencyPublicLiability where Role_CategoryId = 4 and  AgencyId =  Id
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetQualification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetQualification`( IN language_Id bigint(20) )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Master data for qualification
*/
			
	 select  qualificationID 
			,qualificationName
		from qualification where languageId =language_Id 
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetQuoteRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetQuoteRequest`( IN jobProfile_Id bigint(20) )
BEGIN


	select   qr.quoteRequestId  
			,qr.jobProfileId  
			,qr.businessSiteId 
			,siteName as businessSiteName
			,qr.departmentId  
			,bd.departmentName
			,qr.quoteRequestExpiresOn   
			,qr.expectedQuoteResponseOn   
			,qr.estStaffLevel  
			,qr.estWeekHours   
			,qr.comments   
			,qr.quoteRequestAgencyType  
			,qr.needBusinessApproval  
			,qr.costCentreId  
			,bc.description as costcentre
			,qr.quoteStatusId
			,qs.quoteStatus
			from quoteRequest qr 
			left join businessSite bs on qr.businessSiteId = bs.businessSiteId
			left join businessDepartment bd on bd.departmentId = qr.departmentId 
			left join businessCostCentre bc on bc.costCentreId = qr.costCentreId
			left join quoteStatus qs on qs.quoteStatusId = qr.quoteStatusId 
			where qr.jobProfileId = jobProfile_Id
	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetQuoteRequestAgency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetQuoteRequestAgency`(
	IN	agencySite_Id bigint(20)
    ,IN quote_Board bit

)
BEGIN

/*
 Author: James
 Date  : 02/02/2015
 Description : Get Quote Request Agency
 call est_skillsconnect.GetQuoteRequestAgency(69, 1)
 call est_skillsconnect.GetQuoteRequestAgency(69, 0)
*/

if quote_Board=0 then
	select   qr.quoteRequestId
	,  qr.jobProfileId
	,  qr.jobProfileHireRequestId
	,  qr.businessSiteId
	,  qr.quoteRequsetNo
	,  qr.quoteBroadCastNo
	,  qr.sendToQuoteBoard
	,  qras.quoteRequestAgencySiteId
	,  qras.isNotified
	 from quoteRequest qr inner join quoteRequestAgencySite qras
	on qr.quoteRequestId=qras.quoteRequestId
	where qras.agencySiteId=agencySite_Id and qr.isDeleted=0
else
	select   qr.quoteRequestId
	,  qr.jobProfileId
	,  qr.jobProfileHireRequestId
	,  qr.businessSiteId
	,  qr.quoteRequsetNo
	,  qr.quoteBroadCastNo
	,  qr.sendToQuoteBoard
	,  qras.quoteRequestAgencySiteId
	,  qras.isNotified
	 from quoteRequest qr left join quoteRequestAgencySite qras
	on qr.quoteRequestId=qras.quoteRequestId
	where   qr.isDeleted=0 and qr.sendToQuoteBoard=1
    and qras.quoteRequestId is null

end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetQuoteRequestAgencySiteList` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetQuoteRequestAgencySiteList`(
	IN 	businessSite_Id 	bigint(20)
	,IN quoteRequest_Id		bigint(20)
    ,IN language_Id			bigint(20)
    ,IN search_Type			tinyint
    ,IN search_Text1		varchar(50)
    ,IN search_Text2		varchar(50)
    ,IN search_Text3		varchar(50)
    ,IN search_Text4		varchar(50)
    ,IN is_PreferedHR		tinyint
    ,IN sort_by_Column 		varchar(50)
	,IN sort_Order			varchar(20)
    ,IN start_record bigint(20)  
	,IN no_of_records int(11) 

)
BEGIN


/*
 Author: James
 Date  : 10/02/2014
 Description : get quote request HR List 
	search_Type  - 1 -- agency Name
                   2 --	Industry Name
                   3 -- location 
                   4 -- All
	is_PreferedHR -- 0 -- All HR
				   1 -- Prefered HR
                   2 -- selected HR
call est_skillsconnect.GetQuoteRequestAgencySiteList(17, 1, 264, null, '', '', '', '', 0, 'agencyName', 'desc',0,10)
call est_skillsconnect.GetQuoteRequestAgencySiteList(17, 0, 264, 2, 'an', '', '', '', 1, 'agencyName', 'desc',0,10)
call est_skillsconnect.GetQuoteRequestAgencySiteList(17, 0, 264, 1, 'adf', '', '', '', 0, 'agencyName', 'desc',0,10)
                   
*/
set search_Text1 =coalesce(search_Text1,'')
set search_Text2 =coalesce(search_Text2,search_Text1)
set search_Text3 =coalesce(search_Text3,search_Text1)
set search_Text4 =coalesce(search_Text4,search_Text1) 
 
set Sort_by_Column = concat(Sort_by_Column, "_", lower(Sort_Order))

 
	select * ,FOUND_ROWS() as TotalRecords  from(
			select 
			 ags.AgencySiteId 
			,ags.siteName 
			,'' as email
			,agencyUrl
			,ags.phone as AgencySitePhone
			,il.industryName 
			,ad.fileUrl
			,cityName
			,a.AgencyId
			, a.agencyName
			, case when bpa.businessSiteId is not null then 1 else 0 end as isPreferred
			,case when qras.agencySiteId is not null then 1 else 0 end as isSelected
			from agencySite ags 
			left join agency a on  a.agencyId=ags.agencyId
			left join agencyDocument ad on ad.agencyId = a.agencyId and ad.documentTypeId =4
			left join businessSitePreferredAgency bpa on bpa.AgencySiteId=ags.agencySiteId and bpa.businessSiteId=coalesce(businessSite_Id,bpa.businessSiteId) and bpa.isDeleted=0
			left join quoteRequestAgencySite qras on qras.agencySiteId=ags.agencySiteId and qras.quoteRequestId=coalesce(quoteRequest_Id,qras.quoteRequestId)  and qras.isDeleted=0 
			left join agencyIndustry ai on ai.AgencyId = a.AgencyId
			left join industryLocale il on il.industryID=ai.industryId and il.languageId=language_Id
			left join cityLocale cl on a.cityId=cl.cityId  and cl.languageId=language_Id
            where ags.isDeleted=0 and 
           ( case when search_Type=1 then a.agencyName like concat("%", search_Text1 ,"%" )
				 when search_Type=2 then il.industryName like concat("%", search_Text1 ,"%" )
                 when search_Type=3 then cl.cityName like concat("%", search_Text1 ,"%" )
                 when search_Type=4 then a.agencyName like concat("%", search_Text1 ,"%" )  or a.agencyName like concat("%", search_Text2 ,"%" ) 
										 or	a.agencyName like concat("%", search_Text3 ,"%" )  or a.agencyName like concat("%", search_Text4 ,"%" ) 
                                         or  il.industryName like concat("%", search_Text1 ,"%" )  or il.industryName like concat("%", search_Text2 ,"%" )
										 or	il.industryName like concat("%", search_Text3 ,"%" ) or il.industryName like concat("%", search_Text4 ,"%" )
                                         or  cl.cityName like concat("%", search_Text1 ,"%" )  or cl.cityName like concat("%", search_Text2 ,"%" )
										 or	cl.cityName like concat("%", search_Text3 ,"%" )  or cl.cityName like concat("%", search_Text4 ,"%" )
                 else 1=1 end )
             and case when is_PreferedHR =0 then 1=1 
					  when is_PreferedHR=1 then bpa.businessSiteId is not null
                      when is_PreferedHR=2 then qras.agencySiteId is not null end 
		)a order by 
			case when Sort_by_Column='agencyName_asc' then agencyName end asc,
            case when Sort_by_Column='agencyName_desc' then agencyName end desc,
            
			case when Sort_by_Column='industryName_asc' then industryName end asc,
            case when Sort_by_Column='industryName_desc' then industryName end desc,
            
			case when Sort_by_Column='cityName_asc' then cityName end asc,
            case when Sort_by_Column='cityName_desc' then cityName end desc,
            
			case when Sort_by_Column='isPreferred_asc' then isPreferred end asc,
            case when Sort_by_Column='isPreferred_desc' then isPreferred end desc
            
        
        LIMIT  no_of_records  OFFSET   start_record 

 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetQuoteRequestBusiness` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetQuoteRequestBusiness`(
	IN	jobProfile_Id 	bigint
,	IN 	jobProfileHire_RequestId bigint
,	in 	businessSite_Id		bigint
, 	IN 	quoteResp_Status	tinyint
,	IN sort_by_Column varchar(50)
,	IN sort_Order	varchar(20)
,	IN start_record bigint(20)  
,	IN no_of_records int(11) 
,	in language_Id	bigint
)
BEGIN

/*
 Author: James
 Date  : 02/02/2015
 Description : Get Quote Request
call est_skillsconnect.GetQuoteRequestBusiness(1, null, 69,0, 'agencysiteId', 'desc',0, 10,264)
call est_skillsconnect.GetQuoteRequestBusiness(1, null, 69,1, 'agencysiteId', 'desc',0, 10,264)
call est_skillsconnect.GetQuoteRequestBusiness(1, null, 69,2, 'agencysiteId', 'desc',0, 10,264)

quoteResp_Status ---0-- All
					1-- ready to use
					2 -- awaiting response
					
*/

set jobProfileHire_RequestId=coalesce(jobProfileHire_RequestId,0)
set businessSite_Id=coalesce(businessSite_Id,0)
set Sort_by_Column = concat(Sort_by_Column, "_", Sort_Order)
 
select * ,FOUND_ROWS() as TotalRecords  from(
	select qr.quoteRequestId
		,qr.jobProfileId
		,qr.jobProfileHireRequestId
		,qr.businessSiteId
		,qr.quoteRequsetNo
		,qr.sendToQuoteBoard
		,qr.quoteBroadCastNo
		,ags.agencySiteId
		,ags.siteName
		,ags.phone
		,a.agencyId
		,a.agencyName
		,a.agencyUrl
		,qs.quoteResponseId
		,qs.validToDate
		,qs.oncost as wageOnCost
		,qs.onCostCurrencyId
        ,cl.currencyCode as onCostCurrencyCode
		,allowanceCurrencyId
        ,clo.currencyCode as allowanceCurrencyCode
		,totalAllowanceOnCost
		,case when qs.quoteRequestId is null then 2 else 1 end as quoteRespStatus
        ,case when qs.quoteRequestId is not null  and datediff(qs.validToDate,utc_timestamp())>=0 then 1 else 0 end quoteRespActive
        ,qs.actualPayRate as wageActualPayRate
        ,qs.actualPayRateCurrencyId
        ,cl3.currencyCode as wageActualPayCurrencyCode
	 from quoteRequest qr 
	left join quoteRequestAgencySite qras on qr.quoteRequestId=qras.quoteRequestId and qras.isDeleted=0
	left join agencySite ags on ags.agencySiteId=qras.agencySiteId 
	left join agency a on  a.agencyId=ags.agencyId
	left join quoteResponse qs on qs.quoteRequestId=qr.quoteRequestId and qs.agencySiteId=ags.agencySiteId
	left join (
		select qss.quoteResponseId,actualPayOnCostCurrencyId as allowanceCurrencyId ,sum(actualPayOnCost) as  totalAllowanceOnCost 
		from quoteResponse qss inner join quoteResponseAllowance qra on qss.quoteResponseId=qra.quoteResponseId 
		group by qss.quoteResponseId,actualPayOnCostCurrencyId )alow
	on qs.quoteResponseId=alow.quoteResponseId
    left join currencyLocale cl on cl.currencyId=qs.onCostCurrencyId and cl.languageId=",language_Id,"
    left join currencyLocale clo on clo.currencyId=alow.allowanceCurrencyId and clo.languageId=",language_Id,"
    left join currencyLocale cl3 on cl3.currencyId=qs.actualPayRateCurrencyId and cl3.languageId=",language_Id,"
	where qr.jobProfileId=jobProfile_Id 
    and qr.jobProfileHireRequestId= coalesce(jobProfileHire_RequestId,qr.jobProfileHireRequestId)
    and  qr.businessSiteId= coalesce(businessSite_Id,qr.businessSiteId) 
	and qr.isDeleted=0
    and case when quoteResp_Status=0 then 1=1 
			 when quoteResp_Status=1 then qs.quoteRequestId is not null  and datediff(qs.validToDate,utc_timestamp())>=0
             when quoteResp_Status=2 then qs.quoteRequestId is  null end
)a order by     
			case when Sort_by_Column='agencyName_asc' then agencyName end asc,
            case when Sort_by_Column='agencyName_desc' then agencyName end desc            
 
LIMIT no_of_records   OFFSET   start_record 
    
 
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetQuoteResponse` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetQuoteResponse`( IN quoteRequest_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Quote response
*/

	select   qr.quoteResponseId  
			,qr.agencySiteId   
			,a.siteName as agencysiteName
			,qr.validToDate   
			,qr.actualPayRate  
			,qr.actualPayRateCurrencyId  
			,c1.currencyName
			,qr.onCost  
			,qr.onCostCurrencyId   
			,c.currencyName as onCostCurrency
			,qr.quoteStatusId  
			,qs.quoteStatus
			,qr.comments  
			from quoteResponse qr
			left join agencySite a on a.agencySiteId = qr.agencySiteId
			left join country c on c.countryId = qr.countryId
			left join country c1 on c1.countryId = qr.countryId
			left join quoteStatus qs on qs.quoteStatusId = qr.quoteStatusId
			where quoteRequestId = quoteRequest_Id


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetQuoteResponseAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetQuoteResponseAllowance`(
IN quoteResponse_Id bigint
,IN language_Id		bigint
)
BEGIN

/*
 Author: James
 Date  : 03/02/2015
 Description : Quote response allowance
 call est_skillsconnect.GetQuoteResponseAllowance(1, 264)
*/

select 	 quoteRespAllowanceId
		,qra.allowanceId
        ,ba.allowanceName
        ,qra.actualPayRate
        ,qra.actualPayRateCurrencyId
        ,cl.currencyCode as actualPayRateCurrencyCode
        ,qra.actualPayOnCost
        ,qra.actualPayOnCostCurrencyId
        ,clo.currencyCode as onCostCurrencyCode
 from quoteResponseAllowance qra left join businessAllowance ba
on qra.allowanceId=ba.allowanceId 
left join currencyLocale cl on cl.currencyId=qra.actualPayRateCurrencyId and cl.languageId=language_Id
left join currencyLocale clo on clo.currencyId=qra.actualPayRateCurrencyId and clo.languageId=language_Id
where quoteResponseId=quoteResponse_Id and qra.isDeleted=0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRelationship` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRelationship`(   )
BEGIN 

/*
 Author: James
 Date  : 03/02/2015
 Description : Relation ship dropdown
*/
			
	 select  relationShipId 
			,relationShip
		from relationship
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRole`(
  IN business_Id bigint
, IN RoleCategory_Id tinyint 
, IN language_Id	bigint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Get Agency or Business Claim set Information
*/
		select   r.RoleId     
				,ri.RoleName   
                ,r.isSystemRole
				from roleInfo r 
				inner join roleInfoLocale ri on ri.RoleId = r.RoleId  and ri.languageId=language_Id
				inner join roleWorkFlow rw on rw.roleId = r.roleId 
                inner join business b on b.workFlowId = rw.workFlowId
				where isSystemRole = 1
				and RoleCategoryId =RoleCategory_Id and r.isDeleted=0 and b.businessId =business_Id
                
		union all 
        
		select   r.RoleId     
				,ri.RoleName   
                ,r.isSystemRole
				from roleInfo r 
				left join roleInfoLocale ri on ri.RoleId = r.RoleId  and ri.languageId=language_Id
				where businessId = business_Id 
				and RoleCategoryId =RoleCategory_Id and r.isDeleted=0
   
	
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRoleBusinessFunction` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRoleBusinessFunction`(

 IN role_Id bigint(20)  
,IN language_Id bigint(20)  
,IN business_Id	bigint(20)
,IN roleCategory_Id tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Get Business functions for a role
*/
 

	declare groupName nvarchar(1000)
	set groupName = (select 
	case when isOtherGroupName=1 then otherGroupName else gl.groupName  end as groupName
    from business b
    left join groupNameLocale gl on b.groupNameId = gl.groupNameId and languageId = language_id
    where businessId = business_Id)

 
	select rbf.businessFunctionId
	,REPLACE(cl.businessFunctionName,  'Site', groupName) as businessFunctionName
	,rbf.roleId
	,c.parentBusinessFunctionId
	,REPLACE(cl2.businessFunctionName ,  'Site', groupName) as ParentbusinessFunctionName 
	from roleBusinessFunction rbf 
	left join businessFunction c on c.businessFunctionId=rbf.businessFunctionId
	left join businessFunctionLocale cl on cl.businessFunctionId = rbf.businessFunctionId and cl.languageId=language_Id
	left join businessFunctionLocale cl2 on cl2.businessFunctionId =c.parentBusinessFunctionId and cl2.languageId=language_Id
	left join roleInfoLocale rl on rl.roleId =rbf.roleId and rl.languageId=language_Id
	where rbf.roleId=role_Id and rbf.businessId = business_Id and roleCategoryId = roleCategory_Id and rbf.isDeleted =0
    
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRoleDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRoleDetails`( 

  IN RoleCategory_Id tinyint 
, IN role_Name nvarchar(100)
, IN start_record bigint(20) 
, IN no_of_records int(11)
, IN language_Id	bigint
, IN business_Id	bigint
)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Role details
*/
   
		select *,FOUND_ROWS() as TotalRecords  
			from (
			  select r.roleId   
					,rl.roleName
					,r.isSystemRole
			from roleInfo r 
            left join roleInfoLocale rl on rl.roleId = r.roleId and rl.languageId=language_Id
			where r.businessId = business_Id
			and  r.RoleCategoryId =  RoleCategory_Id
			and  roleName like concat( "%", coalesce(role_Name,roleName) , "%") and r.isDeleted =0
            
            union all
            
			select r.roleId   
					,rl.roleName
					,r.isSystemRole
			from roleInfo r 
            inner join roleInfoLocale rl on rl.roleId = r.roleId and rl.languageId=language_Id
            inner join roleWorkFlow rwf on rwf.roleId = r.roleId
            inner join business b on b.workFlowId = rwf.workFlowId
            where r.RoleCategoryId =  RoleCategory_Id  and r.isSystemRole = 1 and b.businessId  =business_Id
            and  roleName like concat( "%", coalesce(role_Name,roleName) , "%") and r.isDeleted =0
            )a
			
	
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterAvailableStaffStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterAvailableStaffStatus`(
 IN  candidate_UserId varchar(5000)
,IN	start_Date	DATE
,IN language_Id bigint(20)
,IN	end_Date	DATE


)
BEGIN
/*
 Author: James
 Date  : 03/10/2015
 Description : Get Roster Available staff status
*/
/*
StatusCode -- 1 - Work Preference
		  2 - Assigned
          3 - Offered 				
          4 - Open Offer
          5 - Rostered
          6 - Unavailable Time Period
          7 - Unavailable full day
*/
	 select *
		,case when statusCode=7 then 3
			  when statusCode=6 then 1
              when statusCode=1 then 1
              else 2 end as PrioritizedStatusCode     
     from (
			select distinct so.shiftOfferId,so.candidateId as candidateUserId
			,time(so.shiftStartDateTime) as startTime,time(so.shiftEndDateTime)  as endTime ,5 as statusCode -- Rostered
			,so.businessSiteId,siteName,so.departmentId,departmentName,so.subClassificationId,jobSubClassification
            ,date(so.shiftStartDateTime) as shiftDate
			from candidateShiftOffer so  
			inner join businessSite bs on bs.businessSiteId=so.businessSiteId 
			inner join businessDepartment bd on bd.departmentId=so.departmentId
			inner join jobSubClassificationLocale jcl on jcl.jobSubClassificationId=so.subClassificationId and jcl.languageId=language_Id
			where date(so.shiftStartDateTime)between start_Date and end_Date and so.isDeleted=0 
			and find_in_Set(so.candidateId,candidate_UserId )
			and so.status in (2,4,7,8,9,14,15,16,17,20,22,24,25,26,27,28,29,30,31,32,48,61)   
		union 
			select shiftOfferId,candidateUserId,StartTime,EndTime
					,case when total>1 then  4 -- Open Offer
						  when status in(1,49,63) then 3 -- Offered
						  when status in(60,62) then 2 -- Assigned
					end  as statusCode
				   ,businessSiteId,siteName,departmentId,departmentName,jobSubClassificationId,jobSubClassification,shiftDate
			from (
					select distinct so.shiftOfferId
						,cg.candidateId as candidateUserId          
						,time(so.shiftStartDateTime) as StartTime,time(so.shiftEndDateTime)  as EndTime 
						,cg.status
						,(select count(1) from candidateGiveAwayRequests cg1 where cg1.shiftOfferId=so.shiftOfferId)total
						,so.businessSiteId,bs.siteName,so.departmentId,bd.departmentName,subClassificationId as jobSubClassificationId,jcl.jobSubClassification
                        ,date(so.shiftStartDateTime) as shiftDate
					from candidateShiftOffer so 
					inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and find_in_Set(cg.candidateId,candidate_UserId )  
					inner join businessSite bs on bs.businessSiteId=so.businessSiteId 
					inner join businessDepartment bd on bd.departmentId=so.departmentId
					inner join jobSubClassificationLocale jcl on jcl.jobSubClassificationId=so.subClassificationId and jcl.languageId=language_Id
					where date(so.shiftStartDateTime) between start_Date and end_Date and so.isDeleted=0 
					and find_in_Set(cg.candidateId,candidate_UserId ) and cg.status in (1,49,60,62,63)     
				)a
		union 
			SELECT distinct null,candidateId, starttime,endTime,
				CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 7
					ELSE 6 END as statusCode
			  ,null,null,null,null,null,null,unavailableDate
			FROM candidateUnavailability
			WHERE find_in_Set(candidateId,candidate_UserId ) and unavailableDate  between start_Date and end_Date and isDeleted=0
		union 
			select null,candidateUserId,time(startDateTime)StartTime , time(endDateTime) as endTime ,1 as statusCode
            ,null,null,null,null,null,null,date(startDateTime) as shiftDate
            from candidateWorkPreference
			where find_in_Set(candidateUserId,candidate_UserId ) and  date(startDateTime)  between start_Date and end_Date  and isDeleted=0
        )a order by candidateUserId,shiftDate,statusCode
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterAvailableStaffStatusByShiftTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterAvailableStaffStatusByShiftTime`(
	 in candidate_UserId varchar(5000)
	,in shiftOffer_Id bigint(20)
	,in shift_StartDateTime datetime
	,in shift_EndDateTime datetime
	,in language_Id bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 01/04/2016
 Description : Get Roster Available staff shift status for mobile
 */
/*
StatusCode -- 1 - Work Preference
		  2 - Assigned
          3 - Offered 				
          4 - Open Offer
          5 - Rostered
          6 - Unavailable Time Period
          7 - Unavailable full day
*/
select * from (
		 select shiftOfferId, candidateUserId,shiftStartDateTime,shiftEndDateTime ,statusCode 
				,businessSiteId,siteName,departmentId,departmentName,subClassificationId,jobSubClassification
				,case when statusCode=7 then 3 
					  when statusCode=6 then 1
					  else 2 end as PrioritizedStatusCode     ,status as shiftStatus				
                ,case when statusCode in(2,3,4,5) and shiftEndDateTime >shift_StartDateTime and shiftStartDateTime <shift_EndDateTime then 1 else 0 end as isRosterClash
			   ,case when statusCode in(6,7) and shiftEndDateTime >shift_StartDateTime and shiftStartDateTime <shift_EndDateTime then 1 else 0 end as isUnavailable
				
		 from (
				select distinct so.shiftOfferId,so.candidateId as candidateUserId
				,so.shiftStartDateTime,so.shiftEndDateTime   ,5 as statusCode -- Rostered
				,so.businessSiteId,siteName,so.departmentId,departmentName,so.subClassificationId,jobSubClassification,so.status
				from candidateShiftOffer so  
				inner join businessSite bs on bs.businessSiteId=so.businessSiteId 
				inner join businessDepartment bd on bd.departmentId=so.departmentId
				inner join jobSubClassificationLocale jcl on jcl.jobSubClassificationId=so.subClassificationId and jcl.languageId=language_Id
				where date(so.shiftStartDateTime)=date(shift_StartDateTime) and so.isDeleted=0 
				and find_in_Set(so.candidateId,candidate_UserId ) and so.shiftOfferId<>shiftOffer_Id
				and so.status in (2,4,7,8,9,14,15,16,17,20,22,24,25,26,27,28,29,30,31,32,48,61)   
                 
			union 
				select shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime
						,case when total>1 then  4 -- Open Offer
							  when status in(1,49,63) then 3 -- Offered
							  when status in(60,62) then 2 -- Assigned
						end  as statusCode
					   ,businessSiteId,siteName,departmentId,departmentName,jobSubClassificationId,jobSubClassification,status
				from (
						select distinct so.shiftOfferId
							,cg.candidateId as candidateUserId          
							,so.shiftStartDateTime,so.shiftEndDateTime 
							,cg.status
							,(select count(1) from candidateGiveAwayRequests cg1 where cg1.shiftOfferId=so.shiftOfferId)total
							,so.businessSiteId,bs.siteName,so.departmentId,bd.departmentName,subClassificationId as jobSubClassificationId,jcl.jobSubClassification
						from candidateShiftOffer so 
						inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and find_in_Set(cg.candidateId,candidate_UserId )
						inner join businessSite bs on bs.businessSiteId=so.businessSiteId 
						inner join businessDepartment bd on bd.departmentId=so.departmentId
						inner join jobSubClassificationLocale jcl on jcl.jobSubClassificationId=so.subClassificationId and jcl.languageId=language_Id
						where date(so.shiftStartDateTime)=date(shift_StartDateTime) and so.isDeleted=0 
						and find_in_Set(cg.candidateId,candidate_UserId ) and cg.status in (1,49,60,62,63)   and so.shiftOfferId<>shiftOffer_Id    
					)a
			union 
				SELECT distinct null,candidateId, concat(unavailableDate,' ',starttime)as shiftStartDateTime, concat(unavailableDate,' ',endTime) as shiftEndDateTime
					,CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 7
						ELSE 6 END as statusCode
				  ,null,null,null,null,null,null,null
				FROM candidateUnavailability
				WHERE find_in_Set(candidateId,candidate_UserId ) and unavailableDate=date(shift_StartDateTime) and isDeleted=0
			union 
				select null,candidateUserId,startDateTime , endDateTime  ,1 as statusCode
				,null,null,null,null,null,null,null
				from candidateWorkPreference
				where find_in_Set(candidateUserId,candidate_UserId ) and  date(startDateTime)=date(shift_StartDateTime) and isDeleted=0
            )a 
	)a  where  (isRosterClash=1 or isUnavailable=1 or statusCode=1  )  
    order by candidateUserId,statusCode

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterBussinessForManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterBussinessForManager`(
  IN	manager_Id	BIGINT(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get business for manager
*/
	SELECT b.`businessId`,b.`businessName` FROM vwCandidateRosterDetails crd
	INNER JOIN `business` b ON crd.businessId=b.businessId
	WHERE crd.candidateId=manager_Id AND b.isDeleted=0
	ORDER BY b.`businessName`
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterDepartmentForManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterDepartmentForManager`(
IN manager_Id	BIGINT(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get departments for manager
*/
	SELECT DISTINCT bd.departmentId,bd.departmentName,cbs.businessSiteId
	FROM userRole ucs 
	INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ucs.userRoleId
	INNER JOIN jobProfileBusinessSite jpbs ON cbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN jobProfile jp ON jpbs.jobProfileId=jp.jobProfileId
	INNER JOIN businessDepartment bd ON jp.departmentId=bd.departmentId
	WHERE ucs.userId = manager_Id AND ucs.RoleCategoryId = 3
		AND cbs.isDeleted =0 AND ucs.isDeleted = 0 AND jpbs.isDeleted =0 AND jp.isDeleted =0 AND bd.isDeleted =0
	ORDER BY bd.departmentName
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosteredShiftDetailsForManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosteredShiftDetailsForManager`(
  IN	manager_Id	BIGINT(20),
  IN	businessSite_Id	BIGINT(20),
  IN	department_Id	BIGINT(20),
  IN	subClassification_Id	BIGINT(20),
  IN	roster_date	DATE,
  IN	language_Id	bigint
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get rostered shifts for manager
*/
	DECLARE week_number INT
	DECLARE x_weeks_after_new_year INT
	DECLARE fullTime_OTLimit INT
	DECLARE partTime_OTLimit INT
	DECLARE casual_OTLimit INT
	DECLARE use_OvertimeIndicator BIT
	
	DECLARE is_Overtime BIT(1)
                
	SET is_Overtime=0
    set @rown=0 
	set @shiftOfferId=0 
	 
	
	SELECT fullTimeOTLimit,partTimeOTLimit,casualOTLimit,useOvertimeIndicator
	INTO fullTime_OTLimit,partTime_OTLimit,casual_OTLimit,use_OvertimeIndicator
	FROM businessSettings
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
	
	SET @totalRosteredHours=0.0
	SET @totalAssignedHours=0.0
	SET @prevCandTotalAcceptedHours=0.0
	SET @prevCandTotalAssignedHours=0.0
    
	SELECT DISTINCT so.shiftOfferId,
		so.candidateId,
		CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
		so.shiftStartDateTime,
		so.shiftEndDateTime,
		so.status,
		@weekStartDate AS weekStartDate,
		@weekEndDate AS weekEndDate,
		@totalRosteredHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,roster_date,so.businessSiteId,manager_Id),2) AS totalWeekHours,
		CheckCandidateOverTime(etl.employmentType,@totalRosteredHours,so.businessSiteId,so.departmentId,use_OvertimeIndicator) AS isOverTime,
		sb.startTime AS breakStartTime,
		sb.endTime AS breakEndTime,
		sb.shiftbreakId,
		sb.breakType,
		so.actualShiftStartDateTime,
		so.actualShiftEndDateTime,
		ct.shiftStartDateTime AS candidateShiftStartDateTime,
		ct.shiftEndDateTime AS candidateShiftEndDateTime,
		ct.status AS timeSheetStatus,
		ct.candidateComment,
		ct.disputeComment,
		upi.imagePath,
		so.isNotified,
		so.sourceModule
		,scu.firstName 
		,scu.lastName 
		,hist.candidateUserId as PrevCandidateId
		,hist.firstName as PrevCandidateFirstName
		,hist.lastName as PrevCandidateLastName
		,hist.status as PrevStatus
		,hist.imagePath  as PrevCandidateImagePath
		,@totalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(so.candidateId,roster_date,so.businessSiteId,manager_Id),2) AS totalAssignedWeekHours
		,CheckCandidateOverTime(etl.employmentType,@totalAssignedHours,so.businessSiteId,so.departmentId,use_OvertimeIndicator) AS isOverTimeForAssignedHour

		,@prevCandTotalAcceptedHours:=round(GetCandidateTotalHoursForWeekByDate(hist.candidateUserId,roster_date,so.businessSiteId,manager_Id),2) AS prevCandTotalAcceptedHours
		,CheckCandidateOverTime(etl.employmentType,@prevCandTotalAcceptedHours,so.businessSiteId,so.departmentId,use_OvertimeIndicator) AS prevCandIsOverTimeForAcceptedHours
		
		,@prevCandTotalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(hist.candidateUserId,roster_date,so.businessSiteId,manager_Id),2) AS prevCandTotalAssignedHours
		,CheckCandidateOverTime(etl.employmentType,@prevCandTotalAssignedHours,so.businessSiteId,so.departmentId,use_OvertimeIndicator) AS prevCandIsOverTimeForAssignedHours
		,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId ) as TotalOffered
		,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId and candidateStatus=3 ) as TotalDeclined
		,uc.mobilePhone
		,scu.encryptionKey
		,hist.mobilePhone as PrevCandidateMobileNo
		,hist.encryptionKey as PrevCandidateEncryptionKey    
		,(select shiftStartDateTime from candidateShiftOffer s1
			where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
			and s1.status NOT IN (3,10,19,33,36) order by s1.shiftStartDateTime limit 1) as nextShiftStartDateTime
		,(select shiftEndDateTime from candidateShiftOffer s1
		where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
		and s1.status NOT IN (3,10,19,33,36) order by s1.shiftStartDateTime limit 1) as nextShiftEndDateTime
		,(select lastMinuteHireId from lastMinuteHire lmh where lmh.shiftOfferId=so.shiftOfferId and lmh.isDeleted=0 order by lmh.lastMinuteHireId desc limit 1 )  AS lastMinuteHireId
		,ROUND(GetCandidateTotalExperience(so.candidateId),1) AS seniority
		,jp.employmentTypeId
		,etl.employmentType
		, (select status from lastMinuteHire lmh where lmh.shiftOfferId=so.shiftOfferId and lmh.isDeleted=0 order by lmh.lastMinuteHireId desc limit 1 ) as LMHStatus
		,(select group_concat(candidateId) from candidateGiveAwayRequests cg1 where cg1.shiftOfferId=so.shiftOfferId) as candidateIds    
		,tz.timeDiffInMinutes
		,so.subClassificationId
        ,so.isFlexibleShiftTime
        ,so.shiftEndTimeType
        ,so.shiftEndTimeValue
        ,(select isFlexibleShiftTime from candidateShiftOffer s1
			where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
			and s1.status NOT IN (3,10,19,33,36) order by s1.shiftStartDateTime limit 1) as nextShiftFlexibleShiftTime
        ,(select shiftEndTimeType from candidateShiftOffer s1
			where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
			and s1.status NOT IN (3,10,19,33,36) order by s1.shiftStartDateTime limit 1) as nextShiftEndTimeType
		,(select shiftEndTimeValue from candidateShiftOffer s1
			where s1.candidateId=so.candidateId and s1.shiftStartDateTime> so.shiftStartDateTime and s1.isDeleted=0
			and s1.status NOT IN (3,10,19,33,36) order by s1.shiftStartDateTime limit 1) as nextShiftEndTimeValue
        ,so.wageCurrencyId
        ,ccl.currencyCode as wageCurrencyCode
        ,so.wage
    FROM candidateShiftOffer so
	inner join businessSite bs on bs.businessSiteId=so.businessSiteId and bs.isDeleted=0
	inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
	LEFT JOIN candidateShiftBreaks sb ON so.shiftOfferId=sb.shiftOfferId AND sb.isDeleted=0
	LEFT JOIN scUser scu ON so.candidateId=scu.userId
    left join userContact uc on scu.userId=uc.userID and uc.isDeleted=0
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	LEFT JOIN vwCandidateRosterDetails crd ON crd.candidateId=scu.userId AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=subClassification_Id
	LEFT JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
	LEFT JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId
    left join currencyLocale ccl on ccl.currencyId=so.wageCurrencyId and ccl.languageId=language_Id
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	left join (
			select shiftOfferId,candidateShiftOfferHistoryId,candidateUserId,firstName,lastName,status,imagePath,mobilePhone,encryptionKey from (
			select * ,@rown :=if(@shiftOfferId =shiftOfferId,@rown +1,1) as rownum ,@shiftOfferId :=shiftOfferId from (				
				select so.shiftOfferId,soh.candidateShiftOfferHistoryId,soh.candidateUserId,u.firstName,u.lastName,soh.status,pic.imagePath,so.shiftStartDateTime,uc.mobilePhone,u.encryptionKey
				FROM candidateShiftOffer so 
				INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
				INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
				and DATE(so.shiftStartDateTime)=roster_date 
				AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
				AND so.departmentId=department_Id AND so.subClassificationId=coalesce(subClassification_Id ,so.subClassificationId)
				AND so.isDeleted=0 AND so.status NOT IN (19,33,36)
				inner join candidateShiftOfferHistory soh on so.shiftOfferId=soh.shiftOfferId and soh.isDeleted=0
				inner join scUser u on soh.candidateUserId=u.userId and u.isDeleted=0
                left join userContact uc on u.userId=uc.userID and uc.isDeleted=0
				left join userProfileImage pic on u.userId=pic.userId and pic.isDeleted=0 
				order by so.shiftOfferId,soh.candidateShiftOfferHistoryId desc
			)a )a where rownum=1) hist on hist.shiftOfferId=so.shiftOfferId
	WHERE DATE(so.shiftStartDateTime)=roster_date AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
	AND so.departmentId=department_Id AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId)
	AND so.isDeleted=0 AND so.status NOT IN (19,33,36)
	ORDER BY so.shiftOfferId
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosteredShiftsForPushNotification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosteredShiftsForPushNotification`(
  IN	manager_Id	BIGINT(20),
  in	businessSite_Id	BIGINT(20),
  IN	department_Id	BIGINT(20),
  IN	subClassification_Id	BIGINT(20),
  in	start_Date	date,
  in 	end_Date Date
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get rostered shifts for push notification
*/
 
	SELECT DISTINCT so.shiftOfferId,
	sg.candidateId,
	null as deviceTypeID,
	null as deviceToken,
	scu.RoleCategoryId 
    ,so.status
    ,0 as candidateShiftOfferHistoryId
    ,CONCAT(scu.firstName,' ',scu.lastName) as candidateName
	,so.shiftStartDateTime  
	,so.shiftEndDateTime  
    ,b.businessName
    ,so.isCantWork
	FROM candidateShiftOffer so 
    inner join 
	(select distinct s1.shiftOfferId,coalesce(cg.candidateId,s1.candidateId) as candidateId
		from candidateShiftOffer s1 left join candidateGiveAwayRequests cg on s1.shiftOfferId=cg.shiftOfferId 
		and cg.candidateStatus in(1,2,63) and cg.isNotified=0
		where  DATE(s1.shiftStartDateTime) between start_Date and end_Date  AND s1.businessSiteId=businessSite_Id
		AND s1.departmentId=department_Id AND s1.subClassificationId=coalesce(subClassification_Id ,s1.subClassificationId)
		and s1.isDeleted=0  and s1.isNotified=0
	)sg on so.shiftOfferId=sg.shiftOfferId 
	INNER JOIN scUser scu ON sg.candidateId=scu.userId    
    INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN business b ON bs.businessId=b.businessId
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE DATE(so.shiftStartDateTime) between start_Date and end_Date AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
	AND so.departmentId=department_Id AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId)
	AND so.status IN (1,2,61,63)  AND so.isNotified=0 AND so.isDeleted=0  
 union all 
   	SELECT DISTINCT so.shiftOfferId,
	sh.candidateUserId,
	null as deviceTypeID,
	null as deviceToken,
	scu.RoleCategoryId ,
    sh.status,
    sh.candidateShiftCancelId as candidateShiftOfferHistoryId
	,CONCAT(scu.firstName,' ',scu.lastName) as candidateName
	,so.shiftStartDateTime  
	,so.shiftEndDateTime  
    ,b.businessName
    ,so.isCantWork
	FROM candidateShiftOffer so
    inner join candidateShiftCancel sh 
    on so.shiftOfferId=sh.shiftOfferId and sh.status in(54,55) and sh.isNotified=0
	-- LEFT JOIN userDevice ud ON sh.candidateUserId=ud.userID AND ud.isDeleted=0
	INNER JOIN scUser scu ON sh.candidateUserId=scu.userId 
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN business b ON bs.businessId=b.businessId
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE DATE(so.shiftStartDateTime) between start_Date and end_Date AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
	AND so.departmentId=department_Id AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId)
	and  so.isDeleted=0     
        
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterGeneralSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterGeneralSettings`(
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get roster general settings
*/
	SELECT settingId,bs.businessSiteId,candidateAcknowledgeReq,approveHoursReq,maxTimeToConfirm,allowSwap,reqManagerApproval,
		useOvertimeIndicator,fullTimeOTLimit,partTimeOTLimit,casualOTLimit,settingStatus,createdBy,createdOn,updatedBy,updatedOn,
		bs.departmentId,rosterBreaks,rosterBreakRules, allowCantWork,lastRosterDay,  rd.shiftStartDateTime as lastRosterDate,rd.subClassificationId as lastRosterSubclassificationId
	FROM businessSettings bs 
    left join (
		select businessSiteId,departmentId,subClassificationId,  shiftStartDateTime from (
			select  businessSiteId,departmentId,subClassificationId,date(max(shiftStartDateTime)) as shiftStartDateTime from candidateShiftOffer
			where businessSiteId=businessSite_Id and departmentId=department_Id and isDeleted=0
			group by businessSiteId,departmentId,subClassificationId
			order by shiftStartDateTime desc 
		)a limit 1  
    ) rd on bs.businessSiteId=rd.businessSiteId AND bs.departmentId=rd.departmentId
	WHERE bs.businessSiteId=businessSite_Id AND bs.departmentId=department_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterLocation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterLocation`(
IN manager_Id bigint
,in language_Id bigint 
, in time_stamp datetime
)
BEGIN
/*
 Author: James
 Date  : 23/01/2016
 Description : Get Roster location & department
 */ 

select distinct
bs.businessSiteId
,bs.siteName
,bs.timeZoneName
,bs.timeOffset
,bd.departmentId
,bd.departmentName
,jobSubClassificationId
,jobSubClassification
,jobClassificationId
,jobClassification
 ,countryId,countryName,stateId,stateName
 from (
	SELECT DISTINCT bs.businessSiteId,bs.siteName,tzl.timeZoneName,tz.timeDiffInMinutes  AS timeOffset 
    ,case when (ucs.createdOn>time_stamp or coalesce(cbs.updatedOn,cbs.createdOn)>time_stamp or coalesce(bs.updatedOn,bs.createdOn)>time_stamp ) then 1 else 0 end isWithinTime
     ,bs.countryId,cl.countryName,bs.stateId,sl.stateName
    FROM userRole ucs 
	INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ucs.userRoleId AND ucs.RoleCategoryId = 3 AND cbs.isDeleted =0
	INNER JOIN businessSite bs ON bs.businessSiteId = cbs.businessSiteId  
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	INNER JOIN timeZoneLocale tzl ON tzl.timeZoneId = tz.timeZoneId AND tzl.languageId=language_Id
    left join countryLocale cl on cl.countryId=bs.countryId and cl.languageId=language_Id
	left join stateLocale sl on sl.stateId=bs.stateId and sl.languageId=language_Id
	WHERE ucs.userId = manager_Id AND ucs.RoleCategoryId = 3  AND ucs.isDeleted = 0 AND cbs.isDeleted = 0 AND bs.isDeleted =0 
)bs left join ( 
	SELECT DISTINCT bd.departmentId,bd.departmentName,cbs.businessSiteId,jcl.jobSubClassificationId,jcl.jobSubClassification
     ,case when (coalesce(jp.updatedOn ,jp.createdOn)>time_stamp or coalesce(bd.updatedOn,bd.createdOn)>time_stamp)  then 1 else 0 end as isWithinTime
     ,jp.jobClassificationId
     ,jl.jobClassification
    FROM userRole ucs 
	INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ucs.userRoleId
	INNER JOIN jobProfileBusinessSite jpbs ON cbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN jobProfile jp ON jpbs.jobProfileId=jp.jobProfileId
	INNER JOIN businessDepartment bd ON jp.departmentId=bd.departmentId 
	inner join jobSubClassificationLocale jcl on jp.jobSubClassificationId=jcl.jobSubClassificationId and jcl.languageId=language_Id
    inner join jobClassificationLocale jl on jp.jobClassificationId=jl.jobClassificationId and jl.languageId=language_Id
	WHERE ucs.userId = manager_Id AND ucs.RoleCategoryId = 3 AND ucs.isDeleted = 0 AND cbs.isDeleted = 0  and  jpbs.isDeleted = 0   and jp.isDeleted=0 and bd.isDeleted=0 
)bd on bs.businessSiteId=bd.businessSiteId
where (bs.isWithinTime =1 or bd.isWithinTime=1)
order by ltrim(siteName), ltrim(departmentName),ltrim(jobSubClassification) 

  -- Business Site Delete or User Role change
select bs.businessSiteId  FROM userRole ucs 
INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ucs.userRoleId AND ucs.RoleCategoryId = 3 AND cbs.isDeleted =0
INNER JOIN businessSite bs ON bs.businessSiteId = cbs.businessSiteId 
where ucs.userId = manager_Id AND ucs.RoleCategoryId = 3 
and  (ucs.createdOn>time_stamp or coalesce(cbs.updatedOn,cbs.createdOn)>time_stamp or coalesce(bs.updatedOn,bs.createdOn)>time_stamp )
and (bs.isDeleted=1 or cbs.isDeleted=1 or ucs.isDeleted=1 ) 

/* Job Profile Delete for offline sync (when 2 or more job profile with same location, dept & subclassification 
then  one of jobprofile is  deleted and remaining not deleted then we are not showing as deleted  )*/

select a.businessSiteId,a.departmentId,a.jobSubClassificationId  from (
	select distinct  jpbs.businessSiteId,jp.departmentId,jp.jobSubClassificationId   FROM userRole ucs 
	INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ucs.userRoleId
	INNER JOIN jobProfileBusinessSite jpbs ON cbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN jobProfile jp ON jpbs.jobProfileId=jp.jobProfileId
	where ucs.userId = manager_Id AND ucs.RoleCategoryId = 3 
	and  ( coalesce(jpbs.updatedOn,jpbs.createdOn)>time_stamp or coalesce(jp.updatedOn,jp.createdOn)>time_stamp )
	and (jpbs.isDeleted=1 or jp.isDeleted=1 ) 
)a left join (
	select distinct  jpbs.businessSiteId,jp.departmentId,jp.jobSubClassificationId   FROM userRole ucs 
	INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ucs.userRoleId
	INNER JOIN jobProfileBusinessSite jpbs ON cbs.businessSiteId=jpbs.businessSiteId
	INNER JOIN jobProfile jp ON jpbs.jobProfileId=jp.jobProfileId
	where ucs.userId = manager_Id AND ucs.RoleCategoryId = 3 AND ucs.isDeleted = 0 
    AND cbs.isDeleted = 0  and  jpbs.isDeleted = 0   and jp.isDeleted=0 
    )b on a.businessSiteId=b.businessSiteId and a.departmentId=b.departmentId and a.jobSubClassificationId=b.jobSubClassificationId
where b.businessSiteId is null 
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterLocationsForManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterLocationsForManager`(
  IN manager_Id	BIGINT(20),
  IN language_Id BIGINT(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get roster locations for manager
*/
	SELECT DISTINCT bs.businessSiteId,bs.siteName,tzl.timeZoneName,tz.timeDiffInMinutes  AS timeOffset
	FROM userRole ucs 
	INNER JOIN userRoleBusinessSite cbs ON cbs.userRoleId = ucs.userRoleId AND ucs.RoleCategoryId = 3 AND cbs.isDeleted =0
	INNER JOIN businessSite bs ON bs.businessSiteId = cbs.businessSiteId  
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	INNER JOIN timeZoneLocale tzl ON tzl.timeZoneId = tz.timeZoneId AND tzl.languageId=language_Id
	WHERE ucs.userId = manager_Id AND ucs.RoleCategoryId = 3
		AND ucs.isDeleted = 0 AND cbs.isDeleted = 0 AND bs.isDeleted =0
	ORDER BY bs.siteName
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterShiftCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterShiftCount`(
in manager_Id  bigint(20)
,in businessSite_Id bigint(20)
,in department_Id  bigint(20)
,in language_Id bigint(20)
,in start_Date date
,in end_Date date
)
BEGIN
/*
 Author: James
 Date  : 02/03/2016
 Description : Get roster shift counts (Roster day Bubble)
*/


	select businessSiteId,departmentId,subClassificationId,jobSubClassification,calendarDate
    ,sum(rosterShiftCount) as rosterShiftCount
    ,sum(emptyShiftsCount) as emptyShiftsCount
    ,sum(cantWorkCount) as cantWorkCount
    ,sum(declinedShiftsCount) as declinedShiftsCount
    ,sum(pendingShiftsCount) as pendingShiftsCount
    ,sum(notNotifiedCount) as notNotifiedCount
	from (
			select distinct so.shiftOfferId, so.businessSiteId,so.departmentId,so.subClassificationId,jcl.jobSubClassification,DATE(shiftStartDateTime) as calendarDate 
            ,case when so.status IN (1,2,4,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,48,60,61,62,63) AND (so.candidateId<>0 or cg.shiftOfferId is not null)  then 1 else 0 end as rosterShiftCount
			,case when cg.shiftOfferId is null and so.candidateId=0 then 1 else 0 end  as emptyShiftsCount
			,case when (so.STATUS=10 or so.isCantWork=1) and cg.shiftOfferId is null  then 1 else 0 end as cantWorkCount
            ,case when  so.STATUS in(3,42,47) then 1 else 0 end as declinedShiftsCount
            ,case when  cg.candidateId<>0 AND so.STATUS=1 then 1 else 0 end as   pendingShiftsCount
            ,case when so.status in(60,62) and cg.shiftOfferId is not null then 1 else 0 end as notNotifiedCount
            from candidateShiftOffer so 
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			left join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId
            left join jobSubClassificationLocale jcl on jcl.jobSubClassificationId=so.subClassificationId and jcl.languageId=language_Id
            where userId=manager_Id and so.isDeleted=0 and DATE(shiftStartDateTime) between start_Date and end_Date 
            and so.businessSiteId=coalesce(businessSite_Id,so.businessSiteId)
            and so.departmentId=coalesce(department_Id,so.departmentId) 
     )a  group by businessSiteId,departmentId,subClassificationId,jobSubClassification,calendarDate
	 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterShiftCountsForWeek` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterShiftCountsForWeek`(
IN manager_Id BIGINT(20), 
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN language_Id bigint(20)
,IN weekStart_Date date
,IN weekEnd_Date	 date
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get roster shift counts for week
*/
 
	DECLARE dateTracker DATE
	
	DECLARE shiftDayName VARCHAR(20)
	DECLARE subClassification_Id BIGINT(20)
	DECLARE subClassification_Name VARCHAR(500)
	DECLARE rosteredShifts_Count BIGINT(20)
	DECLARE emptyShifts_Count BIGINT(20)
	DECLARE sickShifts_Count BIGINT(20)
	DECLARE declinedShifts_Count BIGINT(20)
	DECLARE pendingShifts_Count BIGINT(20)
	DECLARE notNotified_Count BIGINT(20)
	 
	SET dateTracker=weekStart_Date
	
	SET SQL_SAFE_UPDATES=0
	
	DROP TABLE IF EXISTS TempSubClassification
	DROP TABLE IF EXISTS RosterShiftOfferCount
	
	CREATE TEMPORARY TABLE  RosterShiftOfferCount
	(
	  shiftDate DATE,
	  shiftDayName VARCHAR(20),
	  subClassificationId BIGINT(20),
	  subClassification VARCHAR(500),
	  rosteredShiftsCount BIGINT(20),
	  emptyShiftsCount BIGINT(20),
	  sickShiftsCount BIGINT(20),
	  declinedShiftsCount BIGINT(20),
	  pendingShiftsCount BIGINT(20),
      notNotifiedCount bigint(20)
	)
	
	CREATE TEMPORARY TABLE  TempSubClassification
	(
	  subClassificationId BIGINT(20),
	  subClassification VARCHAR(500),
	  isChecked BIT
	)
	
	INSERT INTO TempSubClassification(subClassificationId,subClassification,isChecked)
	SELECT DISTINCT jscl.jobSubClassificationId,jscl.jobSubClassification,0 FROM jobProfileBusinessSite jpBs
	INNER JOIN jobProfile jp ON jpBs.jobProfileId=jp.jobProfileId
	INNER JOIN jobSubClassificationLocale jscl ON jp.jobSubClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
	WHERE jpBs.businessSiteId=businessSite_Id AND jp.departmentId=department_Id
		AND jpBs.isDeleted=0
	
	WHILE (dateTracker<=weekEnd_Date) DO
		SET shiftDayName=DAYNAME(dateTracker)
		
		WHILE (SELECT COUNT(1) FROM TempSubClassification WHERE isChecked=0 > 0  ) DO
		
			SELECT subClassificationId,subClassification 
			INTO subClassification_Id,subClassification_Name
			FROM TempSubClassification WHERE isChecked =0 ORDER BY subClassification LIMIT 1
			
			SELECT COUNT(so.shiftOfferId) INTO rosteredShifts_Count
			FROM candidateShiftOffer so
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			left join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId
            WHERE so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
				AND ucs.userId=manager_Id AND DATE(so.shiftStartDateTime)=dateTracker -- AND so.candidateId<>0 
                AND so.STATUS IN (1,2,4,7,8,9,14,15,16,17,20,21,22,24,25,26,27,28,29,30,31,32,48,60,61,62,63) and (so.candidateId<>0 or cg.shiftOfferId is not null)
                AND so.isDeleted=0
				
			SELECT COUNT(so.shiftOfferId) INTO emptyShifts_Count
			FROM candidateShiftOffer so
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			left join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId
            WHERE so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
				AND ucs.userId=manager_Id AND DATE(so.shiftStartDateTime)=dateTracker AND cg.shiftOfferId is null and so.candidateId=0 AND so.isDeleted=0
					
			SELECT  COUNT(so.shiftOfferId) as cnt  INTO sickShifts_Count
			FROM candidateShiftOffer so
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			left join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId
			WHERE so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
			AND ucs.userId=manager_Id AND DATE(so.shiftStartDateTime)=dateTracker 
			AND (so.STATUS=10 or so.isCantWork=1) and cg.shiftOfferId is null   AND so.isDeleted=0
				
			SELECT COUNT(so.shiftOfferId) INTO declinedShifts_Count
			FROM candidateShiftOffer so
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
				AND ucs.userId=manager_Id AND DATE(so.shiftStartDateTime)=dateTracker AND  so.STATUS in(3,42,47) AND so.isDeleted=0
			
			SELECT COUNT(distinct so.shiftOfferId) INTO pendingShifts_Count
			FROM candidateShiftOffer so
            Inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
				AND ucs.userId=manager_Id AND DATE(so.shiftStartDateTime)=dateTracker AND cg.candidateId<>0 AND so.STATUS=1 AND so.isDeleted=0
			
            select COUNT(distinct so.shiftOfferId) INTO notNotified_Count
			FROM candidateShiftOffer so
            Inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
            INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE so.businessSiteId=businessSite_Id AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
				AND ucs.userId=manager_Id AND DATE(so.shiftStartDateTime)=dateTracker AND cg.candidateId<>0 AND so.STATUS in(60,62) 
                AND so.isDeleted=0
                
			INSERT INTO RosterShiftOfferCount(shiftDate,shiftDayName,subClassificationId,subClassification,
				rosteredShiftsCount,emptyShiftsCount,sickShiftsCount,declinedShiftsCount,pendingShiftsCount,notNotifiedCount)
			VALUES(dateTracker,shiftDayName,subClassification_Id,subClassification_Name,
				rosteredShifts_Count,emptyShifts_Count,sickShifts_Count,declinedShifts_Count,pendingShifts_Count,notNotified_Count)
				
			UPDATE TempSubClassification SET isChecked=1 WHERE subClassificationId=subClassification_Id
		END WHILE
		
		UPDATE TempSubClassification SET isChecked=0
		SET dateTracker=DATE_ADD(dateTracker, INTERVAL 1 DAY)
		
	END WHILE
	
	SET SQL_SAFE_UPDATES=1
	SELECT * FROM RosterShiftOfferCount ORDER BY shiftDate
	
	DROP TABLE TempSubClassification
	DROP TABLE RosterShiftOfferCount
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterShiftDetailsForOfflineSync` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterShiftDetailsForOfflineSync`(
IN  manager_Id	bigint(20) 
,IN roster_StartDate date
,IN roster_EndDate date
,IN language_Id bigint(20)
,IN time_Stamp timestamp
)
BEGIN
/*
	Author: James
	Date  : 29-02-2016
	Description : Get Roster Shift details for offline sync
*/

	SET @totalRosteredHours=0.0
	SET @totalAssignedHours=0.0
	SET @prevCandTotalAcceptedHours=0.0
	SET @prevCandTotalAssignedHours=0.0
    
SELECT DISTINCT so.shiftOfferId
	,so.candidateId 
	,scu.firstName 
    ,scu.lastName 
	,so.shiftStartDateTime
	,so.shiftEndDateTime
	,so.status
	,upi.imagePath
	,so.isNotified
	,so.sourceModule
	,uc.mobilePhone
    ,scu.encryptionKey
    ,hist.candidateUserId as PrevCandidateId
    ,hist.firstName as PrevCandidateFirstName
    ,hist.lastName as PrevCandidateLastName
    ,hist.status as PrevStatus
	,hist.imagePath  as PrevCandidateImagePath
    ,hist.mobilePhone as PrevCandidateMobileNo
    ,hist.encryptionKey as PrevCandidateEncryptionKey 
    ,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId ) as TotalOffered
    ,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId and candidateStatus=3 ) as TotalDeclined
    ,ROUND(GetCandidateTotalExperience(so.candidateId),1) AS seniority
	,jp.employmentTypeId
    ,etl.employmentType
	,(select lastMinuteHireId from lastMinuteHire lmh where lmh.shiftOfferId=so.shiftOfferId and lmh.isDeleted=0 order by lmh.lastMinuteHireId desc limit 1 )  AS lastMinuteHireId
    ,(select status from lastMinuteHire lmh where lmh.shiftOfferId=so.shiftOfferId and lmh.isDeleted=0 order by lmh.lastMinuteHireId desc limit 1 ) as LMHStatus
    ,so.isDeleted
    ,so.businessSiteId
    ,so.departmentId 
    ,so.subClassificationId
    ,@totalRosteredHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAcceptedHours
	,CheckCandidateOverTime(etl.employmentType,@totalRosteredHours,so.businessSiteId,so.departmentId,useOvertimeIndicator) AS isOverTimeForAcceptedHours
  
    ,@totalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(so.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAssignedHours
	,CheckCandidateOverTime(etl.employmentType,@totalAssignedHours,so.businessSiteId,so.departmentId,useOvertimeIndicator) AS isOverTimeForAssignedHour
	
    ,@prevCandTotalAcceptedHours:=round(GetCandidateTotalHoursForWeekByDate(hist.candidateUserId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS prevCandTotalAcceptedHours
	,CheckCandidateOverTime(etl.employmentType,@prevCandTotalAcceptedHours,so.businessSiteId,so.departmentId,useOvertimeIndicator) AS prevCandIsOverTimeForAcceptedHours
	
    ,@prevCandTotalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(hist.candidateUserId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS prevCandTotalAssignedHours
	,CheckCandidateOverTime(etl.employmentType,@prevCandTotalAssignedHours,so.businessSiteId,so.departmentId,useOvertimeIndicator) AS prevCandIsOverTimeForAssignedHours
    ,so.isFlexibleShiftTime
    ,so.shiftEndTimeType
	,so.shiftEndTimeValue
	FROM candidateShiftOffer so
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0 
    inner join businessSettings bss on bss.businessSiteId=so.businessSiteId AND bss.departmentId=so.departmentId
	LEFT JOIN scUser scu ON so.candidateId=scu.userId
    left join userContact uc on scu.userId=uc.userID and uc.isDeleted=0
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	LEFT JOIN vwCandidateRosterDetails crd ON crd.candidateId=scu.userId AND crd.businessSiteId=so.businessSiteId AND crd.departmentId=so.departmentId AND crd.jobSubClassificationId=so.subClassificationId
	LEFT JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
	left join (
			select shiftOfferId,candidateShiftOfferHistoryId,candidateUserId,firstName,lastName,status,imagePath,mobilePhone,encryptionKey from (
			select * ,@rown :=if(@shiftOfferId =shiftOfferId,@rown +1,1) as rownum ,@shiftOfferId :=shiftOfferId from (				
				select so.shiftOfferId,soh.candidateShiftOfferHistoryId,soh.candidateUserId,u.firstName,u.lastName,soh.status,pic.imagePath,so.shiftStartDateTime,uc.mobilePhone,u.encryptionKey
				FROM candidateShiftOffer so 
				INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
				INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
				and DATE(so.shiftStartDateTime) between roster_StartDate and roster_EndDate 
				AND ucs.userId=manager_Id -- AND so.businessSiteId= coalesce(@businessSite_Id,so.businessSiteId)
				-- AND so.departmentId=coalesce(@department_Id,so.departmentId) AND so.subClassificationId=coalesce(@subClassification_Id,so.subClassificationId) 
				AND so.isDeleted=0 AND so.status NOT IN (19,33,36) -- and coalesce(so.updatedOn,so.createdOn)>=time_Stamp
				inner join candidateShiftOfferHistory soh on so.shiftOfferId=soh.shiftOfferId and soh.isDeleted=0
				inner join scUser u on soh.candidateUserId=u.userId and u.isDeleted=0
                left join userContact uc on u.userId=uc.userID and uc.isDeleted=0
				left join userProfileImage pic on u.userId=pic.userId and pic.isDeleted=0 
				order by so.shiftOfferId,soh.candidateShiftOfferHistoryId desc
			)a )a where rownum=1) hist on hist.shiftOfferId=so.shiftOfferId 
	left join candidateGiveAwayRequests cg on cg.shiftOfferId=so.shiftOfferId
	WHERE DATE(so.shiftStartDateTime) between roster_StartDate and roster_EndDate  AND ucs.userId=manager_Id -- AND so.businessSiteId=coalesce(@businessSite_Id,so.businessSiteId)
	-- AND so.departmentId=coalesce(@department_Id,so.departmentId) AND so.subClassificationId=coalesce(@subClassification_Id,so.subClassificationId)
    AND so.status NOT IN (19,33,36) and (coalesce(so.updatedOn,so.createdOn)>=time_Stamp or coalesce(cg.updatedOn,cg.createdOn)>=time_Stamp )
	ORDER BY so.shiftOfferId 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterShiftSummary` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterShiftSummary`(
 in manager_Id bigint(20)
,in candidate_UserId varchar(5000)
,in roster_StartDate date
,in roster_EndDate date
)
BEGIN
/*
 Author: James
 Date  : 07/06/2016
 Description : Shift summary for manager
*/
select weekStartDate,WeekEndDate,count(distinct shiftOfferId)shiftCount,count(distinct candidateId)as totalCandidates
,sum(timestampdiff(second,shiftStartDateTime,shiftEndDateTime)/3600)as duration
 from (		 
		select so.shiftOfferId
			,so.candidateId  
			,so.shiftStartDateTime
			,so.shiftEndDateTime 
			,GetWeekStartDate(date(so.shiftStartDateTime),@manager_Id)weekStartDate
			,DATE_ADD(GetWeekStartDate(date(so.shiftStartDateTime),@manager_Id), INTERVAL 6 DAY)WeekEndDate
		from candidateShiftOffer so 
		inner join userRoleBusinessSite urbs on urbs.businessSiteId=so.businessSiteId and urbs.isDeleted=0 and so.isDeleted=0
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and ur.isDeleted=0
		inner join scUser u on so.candidateId=u.userId and u.isDeleted=0
 		where ur.userId=manager_Id
		and date(so.shiftStartDateTime) between roster_StartDate and roster_EndDate
		and find_in_set(so.candidateId,candidate_UserId)
		and so.status NOT IN (19,33,36,60,62)
	union 
	select so.shiftOfferId
		,cg.candidateId  
		,so.shiftStartDateTime
		,so.shiftEndDateTime 
		,GetWeekStartDate(date(so.shiftStartDateTime),@manager_Id)weekStartDate
		,DATE_ADD(GetWeekStartDate(date(so.shiftStartDateTime),@manager_Id), INTERVAL 6 DAY)WeekEndDate
	from candidateShiftOffer so 
    inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
	inner join userRoleBusinessSite urbs on urbs.businessSiteId=so.businessSiteId and urbs.isDeleted=0 and so.isDeleted=0
	inner join userRole ur on urbs.userRoleId=ur.userRoleId and ur.isDeleted=0
	inner join scUser u on cg.candidateId=u.userId and u.isDeleted=0
 	where ur.userId=manager_Id
	and date(so.shiftStartDateTime) between roster_StartDate and roster_EndDate
	and find_in_set(cg.candidateId,candidate_UserId)
	and so.status NOT IN (19,33,36,60,62)
)a group by weekStartDate,WeekEndDate


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterShiftTemplate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterShiftTemplate`(
In shiftTemplate_Id varchar(5000)
)
BEGIN
/*
 Author: James
 Date  : 22/02/2016
 Description : Get Shift Template by template Id
 call est_skillsconnect_dev.GetRosterShiftTemplate('760,761,1433,1434')
*/ 

	select 	shiftTemplateId
	,	businessSiteId
	,	departmentId
	,	subClassificationId
	,	weekDayName
	,	shiftStartTime
	,	shiftEndTime
	,	longBreak1Start
	,	longBreak2Start
	,	shortBreak1Start
	,	shortBreak2Start
    ,	isFlexibleShiftTime
    ,	shiftEndTimeType
    ,	shiftEndTimeValue
	from businessShiftTemplate
	where find_in_set(shiftTemplateId ,shiftTemplate_Id)

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetRosterView` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetRosterView`(
   in manager_Id	bigint
  ,IN businessSite_Id	bigint
  ,IN department_Id	bigint
  ,IN subClassification_Id  bigint
  ,IN roster_StartDate	date
  ,IN roster_EndDate Date
  ,IN search_Type bigint
  ,IN language_Id  bigint

)
BEGIN
/*
 Author: James
 Date  : 20/11/2015
 Description : Get Roster week view 
 search_Type 1-- All
			 2-- Outstanding
			 3-- Can’t Work
             4-- Declined
             5-- Pending
             6-- giveaway and swap shift
 
*/ 
 
	 
			 
    set @rown=0  
	 
  
	SET @totalRosteredHours=0.0
	SET @totalAssignedHours=0.0
	SET @prevCandTotalAcceptedHours=0.0
	SET @prevCandTotalAssignedHours=0.0
   --  select roster_StartDate,roster_EndDate
	select * from (
			SELECT DISTINCT so.shiftOfferId
			,so.subClassificationId
			,jscl.jobSubClassification
			,so.candidateId
			,scu.firstName 
			,scu.lastName 
			,date(so.shiftStartDateTime)as shiftDate
			,dayName(so.shiftStartDateTime) as shiftDay
			,so.shiftStartDateTime
			,so.shiftEndDateTime
			,so.status 
		 
			,so.actualShiftStartDateTime
			,so.actualShiftEndDateTime
			 
			,upi.imagePath
			,so.isNotified
			,so.sourceModule
			,@totalRosteredHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAcceptedWeekHours
			 ,CheckCandidateOverTime(etl.employmentType,@totalRosteredHours,so.businessSiteId,so.departmentId,bst.useOvertimeIndicator) AS isOverTimeForAcceptedHours
			,@totalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(so.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAssignedWeekHours
			,CheckCandidateOverTime(etl.employmentType,@totalAssignedHours,so.businessSiteId,so.departmentId,bst.useOvertimeIndicator) AS isOverTimeForAssignedHours

			
			,hist.candidateUserId as PrevCandidateId
			,hist.firstName as PrevCandidateFirstName
			,hist.lastName as PrevCandidateLastName
			,hist.status as PrevStatus
			,hist.imagePath  as PrevCandidateImagePath
			
			,@prevCandTotalAcceptedHours:=round(GetCandidateTotalHoursForWeekByDate(hist.candidateUserId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS prevCandTotalAcceptedHours
			,CheckCandidateOverTime(etl.employmentType,@prevCandTotalAcceptedHours,so.businessSiteId,so.departmentId,bst.useOvertimeIndicator) AS prevCandIsOverTimeForAcceptedHours
			
			,@prevCandTotalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(hist.candidateUserId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS prevCandTotalAssignedHours
			,CheckCandidateOverTime(etl.employmentType,@prevCandTotalAssignedHours,so.businessSiteId,so.departmentId,bst.useOvertimeIndicator) AS prevCandIsOverTimeForAssignedHours
			
			,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId ) as TotalOffered
			,(select count(1) tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId and candidateStatus=3 ) as TotalDeclined
            ,so.isCantWork
            ,so.businessSiteId
            ,bs.siteName
            ,bd.departmentId
            ,bd.departmentName
            ,uc.mobilePhone
            ,scu.encryptionKey
            ,tz.timeDiffInMinutes
            ,c.countryISDCode
            ,so.isFlexibleShiftTime
            ,so.shiftEndTimeType
			,so.shiftEndTimeValue
            ,so.wageCurrencyId
			,ccl.currencyCode as wageCurrencyCode
			,so.wage
            FROM candidateShiftOffer so 
			LEFT JOIN scUser scu ON so.candidateId=scu.userId
            left join userContact uc on uc.userId=so.candidateId and uc.isDeleted=0
            left join candidateDetail cd on scu.userId = cd.candidateUserId
			left join country c  on c.countryId=cd.countryId  
			LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
			LEFT JOIN vwCandidateRosterDetails crd ON crd.candidateId=scu.userId AND crd.businessSiteId=coalesce(businessSite_Id,crd.businessSiteId) AND crd.departmentId=coalesce(department_Id,crd.departmentId) AND crd.jobSubClassificationId=coalesce(subClassification_Id,crd.jobSubClassificationId)
			LEFT JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
			LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
			left join jobSubClassificationLocale jscl on jscl.jobSubClassificationId=so.subClassificationId and jscl.languageId=language_Id
			left join businessSettings bst on so.businessSiteId=bst.businessSiteId and so.departmentId=bst.departmentId
            left join businessDepartment bd on bd.departmentId=so.departmentId
            left join currencyLocale ccl on ccl.currencyId=so.wageCurrencyId and ccl.languageId=language_Id
            inner join businessSite bs on bs.businessSiteId=so.businessSiteId and bs.isDeleted=0
            inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
            INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			left join (
					select shiftOfferId,candidateShiftOfferHistoryId,candidateUserId,firstName,lastName,status,imagePath from (
					select * ,@rown :=if(@shiftOfferId =shiftOfferId,@rown +1,1) as rownum ,@shiftOfferId :=shiftOfferId from (				
						select so.shiftOfferId,soh.candidateShiftOfferHistoryId,soh.candidateUserId,u.firstName,u.lastName,soh.status,pic.imagePath,so.shiftStartDateTime
						FROM candidateShiftOffer so 
						INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
						INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
						and DATE(so.shiftStartDateTime) between roster_StartDate  and roster_EndDate
						AND ucs.userId=manager_Id AND so.businessSiteId=coalesce(businessSite_Id,so.businessSiteId)
						AND so.departmentId=coalesce(department_Id,so.departmentId) AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId)
						AND so.isDeleted=0 AND so.status NOT IN (19,33,36)
						inner join candidateShiftOfferHistory soh on so.shiftOfferId=soh.shiftOfferId and soh.isDeleted=0
						inner join scUser u on soh.candidateUserId=u.userId and u.isDeleted=0
						left join userProfileImage pic on u.userId=pic.userId and pic.isDeleted=0 
						order by so.shiftOfferId,soh.candidateShiftOfferHistoryId desc
					)a )a where rownum=1) hist on hist.shiftOfferId=so.shiftOfferId
			WHERE DATE(so.shiftStartDateTime)  between roster_StartDate  and roster_EndDate AND ucs.userId=manager_Id AND so.businessSiteId=coalesce(businessSite_Id,so.businessSiteId)
			AND so.departmentId=coalesce(department_Id,so.departmentId) AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId)
			AND so.isDeleted=0 AND so.status NOT IN (19,33,36)
    )so where  case when search_Type=1 then 1=1 
		when search_Type=2 then so.status in(1,3,10,12,22,23,30,31,32,38,40,42,46,47) 
        when search_Type=3 then so.status in (10,1) and so.isCantWork=1 and TotalOffered=0
        when search_Type=4 then so.status in(3,12,42,47)
        when search_Type=5 then (so.status in (38,40,46) or (so.status =1 and TotalOffered>0))
        when search_Type=6 then so.status in (22,23,30,31) else 1=2 end         
	ORDER BY so.shiftStartDateTime 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSalaryPer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSalaryPer`( IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Salary per master service 
 call GetSalaryPer(264)
*/

	select salaryPerId
		  ,salaryPerName
		from salaryPerLocale where languageId =language_Id 
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSalaryRateType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSalaryRateType`( IN language_Id bigint(20) )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description :  Salary rate type
 call GetSalaryRateType(264)
*/

	select salaryRateTypeId
		  ,salaryRateType
		from salaryRateTypeLocale where languageId =language_Id 
        order by salaryRateType
        
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftBreakRulesSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftBreakRulesSettings`(
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id INT)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shift break rules settings
*/
 
    select breakRuleId,bs.businessSiteId,longBreakDuration,shortBreakDuration,minShortShiftHours,maxShortShiftHours,
		minMediumShiftHours,maxMediumShiftHours,minLongShiftHours,maxLongShiftHours,longerShiftHours,br.createdBy,br.createdOn,br.updatedBy,br.updatedOn,
		bs.departmentId,subClassificationId ,rosterBreaks,rosterBreakRules
from businessSettings bs 
left join shiftBreakRuleSettings br on bs.businessSiteId=br.businessSiteId  and bs.departmentId=br.departmentId
 WHERE bs.businessSiteId=businessSite_Id AND bs.departmentId=department_Id AND coalesce(subClassificationId,subClassification_Id)=subClassification_Id 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftDetailsForManagerByCandidateId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftDetailsForManagerByCandidateId`(
 in manager_Id  bigint(20)
,in candidate_UserId varchar(50000)
,in roster_StartDate date
,in roster_EndDate date
,in language_Id  bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 07/06/2016
 Description : Shift Details for sending notification(sms,email)
*/
		select so.shiftOfferId
			,so.businessSiteId
			,bs.siteName as businessSiteName
			,so.departmentId
			,bd.departmentName
			,so.subClassificationId
			,jcl.jobSubClassification
			,so.candidateId,u.firstName,u.lastName
			,date(so.shiftStartDateTime)as shiftDate
			,so.shiftStartDateTime
			,so.shiftEndDateTime
			,so.status            
            ,case when (select count(1) from candidateGiveAwayRequests cg1  where cg1.shiftOfferId=so.shiftOfferId 
				and candidateStatus=1 and cg1.STATUS in(1,41,49,63))>1 then 1 else 0 end as isOpenOffer  
			 ,b.businessId
             ,b.businessName
        from candidateShiftOffer so 
		inner join userRoleBusinessSite urbs on urbs.businessSiteId=so.businessSiteId and urbs.isDeleted=0 and so.isDeleted=0
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and ur.isDeleted=0
		inner join scUser u on so.candidateId=u.userId and u.isDeleted=0
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and bs.isDeleted=0
        inner join business b on bs.businessId=b.businessId
		inner join businessDepartment bd on bd.departmentId=so.departmentId and bd.isDeleted=0
		left join jobSubClassificationLocale jcl on so.subClassificationId=jcl.jobSubClassificationId and jcl.languageId=language_Id
		where ur.userId=manager_Id
		and date(so.shiftStartDateTime) between roster_StartDate and roster_EndDate
		and find_in_set(so.candidateId,candidate_UserId)
		and so.status   IN (1,2,4,7,8,9,14,15,16,17,20,22,24,25,26,27,28,29,30,31,32,39,40,41,46,48,49,61,63)
	union 
		select so.shiftOfferId
			,so.businessSiteId
			,bs.siteName as businessSiteName
			,so.departmentId
			,bd.departmentName
			,so.subClassificationId
			,jcl.jobSubClassification
			,cg.candidateId,u.firstName,u.lastName
			,date(so.shiftStartDateTime)as shiftDate
			,so.shiftStartDateTime
			,so.shiftEndDateTime
			,so.status
            ,case when (select count(1) from candidateGiveAwayRequests cg1  where cg1.shiftOfferId=so.shiftOfferId 
				and candidateStatus=1 and cg1.STATUS in(1,41,49,63))>1 then 1 else 0 end as isOpenOffer    
			 ,b.businessId
             ,b.businessName
        from candidateShiftOffer so 
		inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
		inner join userRoleBusinessSite urbs on urbs.businessSiteId=so.businessSiteId and urbs.isDeleted=0 and so.isDeleted=0
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and ur.isDeleted=0
		inner join scUser u on cg.candidateId=u.userId and u.isDeleted=0
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and bs.isDeleted=0
		inner join business b on bs.businessId=b.businessId
        inner join businessDepartment bd on bd.departmentId=so.departmentId and bd.isDeleted=0
		left join jobSubClassificationLocale jcl on so.subClassificationId=jcl.jobSubClassificationId and jcl.languageId=language_Id
		where ur.userId=manager_Id
		and date(so.shiftStartDateTime) between roster_StartDate and roster_EndDate
		and find_in_set(cg.candidateId,candidate_UserId)
		and cg.status   IN (1,2,4,7,8,9,14,15,16,17,20,22,24,25,26,27,28,29,30,31,32,39,40,41,46,48,49,61,63)


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftDetailsForNotification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftDetailsForNotification`(
	 in shiftOffer_Id bigint
    ,in search_Type tinyint
    ,in shift_status  tinyint
)
BEGIN

/* 
 description : Get shift details for sending notification
 searchType -- 1 - Swap
               2- Giveaway  
               3- Normal shift
               4- LastMinue Hire
shift_status 1-- All candidate
             2- candidate Accepted
             3-- Manager Approved
             4-- Manager Declined
call GetShiftDetailsForNotification 7058,1
*/
Declare user_Id bigint
declare user_name varchar(50)
declare shift_time datetime


if search_Type=1 then
	select *  , found_rows() as Total 
    from (
		SELECT distinct  so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,scut.userId as targetCandidateUserId
			,CONCAT(scut.firstName,' ',scut.lastName) AS targetCandidateName
			,sot.shiftStartDateTime as targetShiftStartDateTime
			,sot.shiftEndDateTime as targetShiftEndDateTime
            ,0 as TotalDeclined
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId
		-- LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId
		left join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
		left  JOIN scUser scut ON sot.candidateId=scut.userId
		WHERE so.shiftOfferId=shiftOffer_Id  and so.status in(7,8,9,14)  and sot.status in(7,8,9,14)   
       union  
		SELECT sot.candidateId AS sourceCandidateUserId 
			,CONCAT(scut.firstName,' ',scut.lastName) AS sourceCandidateName
			,sot.shiftStartDateTime as sourceshiftStartDateTime
			,sot.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,scu.userId as targetCandidateUserId
			,CONCAT(scu.firstName,' ',scu.lastName) AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime
            ,0 as TotalDeclined 
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId
		-- LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId
		left join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
		left  JOIN scUser scut ON sot.candidateId=scut.userId
		WHERE so.shiftOfferId=shiftOffer_Id  and so.status in(22,30,17,25)   and sot.status in(22,30,17,25)     
        union 
       SELECT distinct  so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,sot.shiftStartDateTime as sourceshiftStartDateTime
			,sot.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,scut.userId as targetCandidateUserId
			,CONCAT(scut.firstName,' ',scut.lastName) AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime
            ,0 as TotalDeclined
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId
		-- LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId
		left join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
		left  JOIN scUser scut ON sot.candidateId=scut.userId
		WHERE so.shiftOfferId=shiftOffer_Id  and so.status in(16,29,15,24)  and sot.status in(16,29,15,24)   
        
        )a    
    
    
elseif search_Type=2 then
	 select *  , found_rows() as Total 
      from (
		SELECT so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,ga.candidateId as targetCandidateUserId
			,CONCAT(scut.firstName,' ',scut.lastName) AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime    
			 ,(select count(*) from candidateGiveAwayRequests g where so.shiftOfferId=g.shiftOfferId and status in (6)) as TotalDeclined              
            -- ,0 as TotalDeclined
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId 
		left join candidateGiveAwayRequests ga on so.shiftOfferId=ga.shiftOfferId
		INNER JOIN scUser scut ON ga.candidateId=scut.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id 
        and case when shift_status=2 then   (so.status in(19,27,23) or ga.status in(19,27,23))
        when shift_status=3 then (so.status In(33,22,23) or ga.status In(33,22,23))
        when shift_status=4 then (so.status In(21) or ga.status in(21)) 
        else so.status in(4,5,6,18,19,20,21,23,27,28,31,32,33) end 
        union 
        SELECT so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,sot.candidateId as targetCandidateUserId
			,CONCAT(scut.firstName,' ',scut.lastName) AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime    
			 ,(select count(*) from candidateGiveAwayRequests g where so.shiftOfferId=g.shiftOfferId and status in (6)) as TotalDeclined              
           -- ,0 as TotalDeclined
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId  
        left join candidateShiftOffer sot on so.exchangedShiftOfferId=sot.shiftOfferId
		INNER JOIN scUser scut ON  sot.candidateId=scut.userId -- ga.candidateId=scut.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id 
        and   so.status In(33,22,23,19,27)  
	 )a  
     
elseif search_Type=3 then
	select *  , found_rows() as Total 
    from (
		SELECT so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,user_Id as targetCandidateUserId
			,user_name AS targetCandidateName
			,shift_time as targetShiftStartDateTime
			,shift_time as targetShiftEndDateTime
			,0 as TotalDeclined
		FROM candidateShiftOffer so 
		INNER JOIN scUser scu ON so.candidateId=scu.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id )a  	
elseif search_Type=4 then
	select * , found_rows() as Total 
    from (
		select lmc.candidateUserId AS sourceCandidateUserId 
					,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
					,so.shiftStartDateTime as sourceshiftStartDateTime
					,so.shiftEndDateTime as sourceshiftEndDateTime
					,scu.RoleCategoryId
					,b.businessName
					,user_Id as targetCandidateUserId
					,user_name AS targetCandidateName
					,shift_time as targetShiftStartDateTime
					,shift_time as targetShiftEndDateTime
					,(select count(1) from lastMinuteHire lm1 
						inner join lastMinuteHireCandidate lmc1 on lm1.lastMinuteHireId=lmc1.lastMinuteHireId
						where candidateStatus =4 and lm1.shiftOfferId=lm.shiftOfferId) as TotalDeclined 
		from lastMinuteHire lm 
		inner join lastMinuteHireCandidate lmc on lm.lastMinuteHireId=lmc.lastMinuteHireId
		inner join candidateShiftOffer so on so.shiftOfferId=lm.shiftOfferId
		INNER JOIN scUser scu ON so.candidateId=scu.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id )a

end if 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftListForWeek` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftListForWeek`(
 IN candidateUser_Id bigint(20) 
,IN language_Id bigint(20)
,IN weekStart_Date date
,IN weekEnd_Date	 date
,IN business_Id bigint(20)
,IN manager_Id bigint(20)
,in search_Type tinyint(1)
)
BEGIN
/*
 Author: James
 Date  : 16/12/2015
 Description : Get shifts for a week by candidate Id (Giveaway, Swap, & Cantwork )
 call est_skillsconnect_dev.GetShiftListForWeek(2242, '50', '2015', 264)
search_Type -1 - Roster Timetable
			 2 - Giveaway, Swap, & Cantwork
 */
 
	
	DECLARE shiftStatus TINYINT(4)
	DECLARE timesheetStatus TINYINT(4) 

        SET shiftStatus=35
        SET timesheetStatus=0 
		SET @shiftStatus=35
        
        set @totalRosteredHours=0
        set @totalAssignedHours=0
select employmentType into @employment_Type from vwCandidateRosterDetails v 
inner join jobProfile jp on v.jobProfileId=jp.jobProfileId 
LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
where candidateId=candidateUser_Id limit 1 


	SELECT DISTINCT * FROM (
		SELECT so.candidateId AS candidateId,
				CONCAT(scu.firstName,' ',scu.lastName) AS candidateName, 				 
				weekStart_Date    AS weekStart_Date,
				weekEnd_Date    AS weekEnd_Date,
				CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
				DAYNAME(so.shiftStartDateTime) AS shiftDay,
				so.shiftOfferId, 
				jscl.jobSubClassificationId,
				jscl.jobSubClassification, 			 
				so.shiftStartDateTime,
				so.shiftEndDateTime,
				so.createdOn,
				so.updatedOn,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN shiftStatus
					ELSE so.status END AS shift_status,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN 'SHIFTCLOSED'
					ELSE slp.statusName END AS status_name,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN NULL
					ELSE so.comment END AS COMMENT, 				
				tz.timeDiffInMinutes 
				,bs.businessSiteId
                ,bs.siteName
                ,so.departmentId
                ,bd.departmentName                 
                ,@totalRosteredHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAcceptedWeekHours
				,CheckCandidateOverTime(@employment_Type,@totalRosteredHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAcceptedHours
				,@totalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(so.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAssignedWeekHours
				,CheckCandidateOverTime(@employment_Type,@totalAssignedHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAssignedHours
				,so.isFlexibleShiftTime
                ,so.shiftEndTimeType
				,so.shiftEndTimeValue
				FROM candidateShiftOffer so
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId  
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bd ON so.departmentId=bd.departmentId
				LEFT JOIN statusLookup slp ON so.status=slp.statusId
				LEFT JOIN candidateTimesheet ct ON ct.shiftOfferId=so.shiftOfferId
				left JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				WHERE so.candidateId=candidateUser_Id    and  ( date(so.shiftStartDateTime) <= date(weekEnd_Date)) AND date(so.shiftStartDateTime) >= date(weekStart_Date)
				AND case when search_Type=1 then so.status NOT IN (3,10,19,33,36) else so.status NOT IN (3,10,19,33,36,60,62)  end 
                and b.businessId=business_Id
				and CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN   so.status not in(10,1) ELSE 1=1 END
                AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0 
			union
				SELECT  cg.candidateId AS candidateId,
				CONCAT(scu.firstName,' ',scu.lastName) AS candidateName, 				 
				weekStart_Date  AS weekStart_Date,
				weekEnd_Date   AS weekEnd_Date,
				CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
				DAYNAME(so.shiftStartDateTime) AS shiftDay,
				cg.shiftOfferId, 
				jscl.jobSubClassificationId,
				jscl.jobSubClassification, 				
				so.shiftStartDateTime,
				so.shiftEndDateTime,
				so.createdOn,
				so.updatedOn,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN shiftStatus
					ELSE cg.status END AS shift_status,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN 'SHIFTCLOSED'
					ELSE slp.statusName END AS status_name,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN NULL
					ELSE so.comment END AS COMMENT,
				tz.timeDiffInMinutes          
				,bs.businessSiteId
                ,bs.siteName
                ,so.departmentId
                ,bd.departmentName                
                ,@totalRosteredHours:=round(GetCandidateTotalHoursForWeekByDate(cg.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAcceptedWeekHours
				,CheckCandidateOverTime(@employment_Type,@totalRosteredHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAcceptedHours
				,@totalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(cg.candidateId,date(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAssignedWeekHours
				,CheckCandidateOverTime(@employment_Type,@totalAssignedHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS isOverTimeForAssignedHour
                ,so.isFlexibleShiftTime
                ,so.shiftEndTimeType
				,so.shiftEndTimeValue
                FROM candidateGiveAwayRequests cg
				INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
				INNER JOIN scUser scu ON cg.candidateId=scu.userId
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId 
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				 INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bd ON so.departmentId=bd.departmentId
				LEFT JOIN statusLookup slp ON cg.status=slp.statusId
				left JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				WHERE cg.candidateId=candidateUser_Id 
                AND case when search_Type=1 then  cg.status IN (1,18,23,39,41,49,60,62,63) else  cg.status IN (1,18,23,39,41,49,63)  end 
                and b.businessId=business_Id
				 and  ( date(so.shiftStartDateTime) <= date(weekEnd_Date)) AND date(so.shiftStartDateTime) >= date(weekStart_Date)
				AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0 ) AS t1 
		ORDER BY t1.shiftStartDateTime
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftOffersForCandidateByStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftOffersForCandidateByStatus`(
IN candidateUser_Id BIGINT(20),
in shift_status varchar(50),
IN language_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shift offers for candidate by status
*/
	-- DECLARE tempCandidateId BIGINT(20)
	-- SET tempCandidateId=0
	IF shift_status='NOTIFY' THEN
			SELECT * FROM (
					SELECT DISTINCT so.candidateId,
					so.shiftOfferId,
					b.businessName,
					bs.siteName,
					bs.addressLine1,
					bs.addressLine2,
					cl.cityName,
					sl.stateName,
					sl.abbreviation,
					col.countryName,
					bs.zipCode,
					bs.fax,
					so.shiftStartDateTime,
					so.shiftEndDateTime,
					so.status,
					stl.statusName,
					so.comment,
					jscl.jobSubClassification,
					upi.imagePath,
					coalesce(so1.candidateId,0)  AS sourceEmployeeId,
					CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
					jscl1.jobSubClassification AS sourcePosition,
					so1.shiftStartDateTime AS sourceShiftStartDateTime,
					so1.shiftEndDateTime AS sourceShiftEndDateTime,
					tz.timeDiffInMinutes
                    ,null  as candidateShiftCancelId
                    ,null as AcceptedCandidateUserId
                    ,null as AcceptedCandidateFirstName
                    ,null as AcceptedCandidateLastName
                    ,so.departmentId
                    ,bd.departmentName
                    ,so.isFlexibleShiftTime
                    ,so1.isFlexibleShiftTime AS sourceFlexibleShiftTime
                    ,so.shiftEndTimeType
					,so.shiftEndTimeValue
                    ,so1.shiftEndTimeType AS sourceShiftEndTimeType
					,so1.shiftEndTimeValue As sourceShiftEndTimeValue
					FROM candidateShiftOffer so
					LEFT JOIN userProfileImage upi ON so.candidateId=upi.userId
					INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
					LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
					LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
					LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
					INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
					INNER JOIN business b ON bs.businessId=b.businessId
					left JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
					left JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
					left JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
					left JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
					LEFT JOIN statusLookup stl ON so.status=stl.statusId
                    left join businessDepartment bd on bd.departmentId=so.departmentId
					WHERE so.candidateId=candidateUser_Id AND so.status IN (1,14,18,39,41,63) AND so.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
						AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0
				UNION                
					SELECT DISTINCT cg.candidateId,
					cg.shiftOfferId,
					b.businessName,
					bs.siteName,
					bs.addressLine1,
					bs.addressLine2,
					cl.cityName,
					sl.stateName,
					sl.abbreviation,
					col.countryName,
					bs.zipCode,
					bs.fax,
					cg.shiftStartDateTime,
					cg.shiftEndDateTime,
					cg.status,
					stl.statusName,
					cg.comment,
					jscl.jobSubClassification,
					upi.imagePath, 
					so.candidateId AS sourceEmployeeId,
					CONCAT(u.firstName,' ',u.lastName) AS sourceEmployeeName,
					jscl.jobSubClassification AS sourcePosition,
					so.shiftStartDateTime AS sourceShiftStartDateTime,
					so.shiftEndDateTime AS sourceShiftEndDateTime,
					tz.timeDiffInMinutes
                    ,cg.candidateShiftCancelId
                    ,cg.AcceptedCandidateUserId
                    ,au.firstName as AcceptedCandidateFirstName
                    ,au.lastName as AcceptedCandidateLastName
					,so.departmentId
                    ,bd.departmentName
                    ,cg.isFlexibleShiftTime
                    ,so.isFlexibleShiftTime AS sourceFlexibleShiftTime
                    ,cg.shiftEndTimeType
					,cg.shiftEndTimeValue
                    ,so.shiftEndTimeType AS sourceShiftEndTimeType
					,so.shiftEndTimeValue AS sourceShiftEndTimeValue
					FROM (                    
						select cg.shiftOfferId,cg.candidateId,so.shiftStartDateTime,so.shiftEndDateTime,cg.status,so.comment,null as candidateShiftCancelId,0 as AcceptedCandidateUserId,so.isFlexibleShiftTime,so.shiftEndTimeType,so.shiftEndTimeValue from candidateGiveAwayRequests cg 
						inner join candidateShiftOffer so on cg.shiftOfferId=so.shiftOfferId and cg.status IN (1,18,39,41,49,63) and so.isDeleted=0
						left join candidateShiftOffer so2 on so2.shiftOfferId=cg.shiftOfferId and so2.candidateId=cg.candidateId and so2.status not in (38,40,46)
                        inner join businessSite bs on so.businessSiteId=bs.businessSiteId and bs.isDeleted=0 
						INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
						where cg.candidateId=candidateUser_Id and so2.shiftOfferId is null AND so.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
						union 
						select cc.shiftOfferId,cc.candidateUserId,cc.shiftStartDateTime,cc.shiftEndDateTime,cc.status,cc.comment,cc.candidateShiftCancelId,cc.AcceptedCandidateUserId,so.isFlexibleShiftTime,so.shiftEndTimeType,so.shiftEndTimeValue from candidateShiftCancel  cc
						inner join candidateShiftOffer so on cc.shiftOfferId=so.shiftOfferId and cc.status IN (55,57,58,59) and so.isDeleted=0
						inner join businessSite bs on so.businessSiteId=bs.businessSiteId and bs.isDeleted=0 
						INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
						where cc.candidateUserId=candidateUser_Id AND cc.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
						and cc.isNotified in(0,1)                    
                    ) cg
					INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
					LEFT JOIN scUser u ON u.userId=so.candidateId
					LEFT JOIN userProfileImage upi ON so.candidateId=upi.userId
					INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
					LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
					LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
					LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
					INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
					INNER JOIN business b ON bs.businessId=b.businessId
					left JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
					left JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
					left JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
					left JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
					LEFT JOIN statusLookup stl ON cg.status=stl.statusId
                    left join scUser au on au.userId=cg.AcceptedCandidateUserId and au.isDeleted=0
					left join businessDepartment bd on bd.departmentId=so.departmentId
                    WHERE cg.candidateId=candidateUser_Id  AND so.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
						AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0
			) AS t1
			ORDER BY t1.shiftStartDateTime
	/*ELSE
		SELECT DISTINCT so.candidateId,
		so.shiftOfferId,
		b.businessName,
		bs.siteName,
		bs.addressLine1,
		bs.addressLine2,
		cl.cityName,
		sl.stateName,
		sl.abbreviation,
		col.countryName,
		bs.zipCode,
		bs.fax,
		so.shiftStartDateTime,
		so.shiftEndDateTime,
		so.status,
		stl.statusName,
		so.comment,
		jscl.jobSubClassification,
		upi.imagePath,
		CASE WHEN so1.candidateId IS NULL THEN tempCandidateId
			ELSE so1.candidateId END AS sourceEmployeeId,
		CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
		jscl1.jobSubClassification AS sourcePosition,
		so1.shiftStartDateTime AS sourceShiftStartDateTime,
		so1.shiftEndDateTime AS sourceShiftEndDateTime,
		tz.timeDiffInMinutes
		FROM candidateShiftOffer so
		LEFT JOIN userProfileImage upi ON so.candidateId=upi.userId
		INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
		LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
		LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
		LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId
		INNER JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
		INNER JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
		INNER JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		LEFT JOIN statusLookup stl ON so.status=stl.statusId
		WHERE so.candidateId=candidateUser_Id AND stl.statusName=shift_status AND so.shiftEndDateTime>=DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
			AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0 */
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftRelieveRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftRelieveRequest`(
 IN shiftOffer_Id bigint
,in language_Id bigint
,in search_Type tinyint
,in manager_Id bigint

)
BEGIN

/*
 Author: James
 Date  : 18/11/2015
 Description : swap & giveaway Shift Details for manager 
 search_Type 1 -- swap
			 2 -- giveaway
*/

Declare is_TimeLapsed bit

set is_TimeLapsed=0


if exists(
	select shiftOfferId from candidateShiftOffer
	where (shiftOfferId=shiftOffer_Id or exchangedShiftOfferId=shiftOffer_Id ) 	and status=22 ) and search_Type is null then
    
    set shiftOffer_Id=( select shiftOfferId from candidateShiftOffer
	where (shiftOfferId=shiftOffer_Id or exchangedShiftOfferId=shiftOffer_Id ) 	and status=22 ) 
    
    set search_Type=1
else
	set search_Type=coalesce(search_Type,2)
end if    
    


IF exists (
	select shiftOfferId from candidateShiftOffer so 
	inner join businessSite bs on so.businessSiteId=bs.businessSiteId
	inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
	where shiftOfferId=shiftOffer_Id and DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)<shiftEndDateTime )  THEN
	set  is_TimeLapsed=0
else
	set  is_TimeLapsed=1
end if
	if search_Type=1  then
			select distinct 
				so.shiftOfferId,
				so.candidateId,
				scu.firstName
				,scu.lastName
				,so.shiftStartDateTime
				,so.shiftEndDateTime
				,so.status
				,so.subClassificationId
				,jscl.jobSubClassification
				,upi.imagePath
				,@totalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS TotalAcceptedHours
				,@totalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),sot.businessSiteId,manager_Id),2) AS totalAssignedHours
				,etl.employmentTypeId
				 ,bss.useOvertimeIndicator
				,bss.fullTimeOTLimit as fullTimeOTLimit
				,bss.partTimeOTLimit as partTimeOTLimit
				,bss.casualOTLimit as casualOTLimit
				,sot.shiftOfferId as targetShiftOfferId
				,sot.candidateId as targetCandidateId
				,scut.firstName as targetCandidateFirstName
				,scut.lastName as targetCandidateLastName
				,sot.shiftStartDateTime as targetShiftStartDateTime
				,sot.shiftEndDateTime as targetShiftEndDateTime
				,sot.status  as targetStatus
				,sot.subClassificationId as targetSubClassificationId
				,jsclt.jobSubClassification as targetJobSubClassification
				,upit.imagePath as targetCandidateImagePath
				,@TargetTotalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(sot.candidateId,DATE(sot.shiftStartDateTime),sot.businessSiteId,manager_Id),2) AS targetTotalAcceptedHours
				,@TargetTotalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(sot.candidateId,DATE(sot.shiftStartDateTime),sot.businessSiteId,manager_Id),2) AS targetTotalAssignedHours
				,etlt.employmentTypeId as targetEmploymentType
				,bsst.useOvertimeIndicator as targetCandidateUseOvertimeIndicator
				,bsst.fullTimeOTLimit  as targetFullTimeOTLimit
				,bsst.partTimeOTLimit  as targetPartTimeOTLimit
				,bsst.casualOTLimit   as targetCasualOTLimit  ,is_TimeLapsed
                ,'SWAPACCEPTMANAGERDECLINED' as declineStatus
                ,so.isFlexibleShiftTime
				,sot.isFlexibleShiftTime AS targetFlexibleShiftTime
                ,so.shiftEndTimeType
				,so.shiftEndTimeValue
                ,sot.shiftEndTimeType AS targetShiftEndTimeType
				,sot.shiftEndTimeValue AS targetShiftEndTimeValue
			FROM candidateShiftOffer so 
			INNER JOIN vwCandidateRosterDetails crd  ON so.candidateId=crd.candidateId AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
			INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
			LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
			inner JOIN scUser scu ON so.candidateId=scu.userId and scu.isDeleted=0 and so.isDeleted=0
			LEFT JOIN userProfileImage upi ON scu.userId=upi.userId  and upi.isDeleted=0
			INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
			INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
			inner join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
			inner JOIN vwCandidateRosterDetails crdt  ON sot.candidateId=crdt.candidateId AND sot.businessSiteId=crdt.businessSiteId AND sot.departmentId=crdt.departmentId AND sot.subClassificationId=crdt.jobSubClassificationId
			inner JOIN jobProfile jpt ON crdt.jobProfileId=jpt.jobProfileId
			LEFT JOIN employmentTypeLocale etlt ON jpt.employmentTypeId=etlt.employmentTypeId and etlt.languageId=language_Id
			inner JOIN scUser scut ON sot.candidateId=scut.userId and scut.isDeleted=0 and sot.isDeleted=0
			LEFT JOIN userProfileImage upit ON scut.userId=upit.userId  and upit.isDeleted=0
			INNER JOIN jobSubClassificationLocale jsclt ON sot.subClassificationId=jsclt.jobSubClassificationId AND jsclt.languageId=language_Id
			INNER JOIN businessSettings bsst ON sot.businessSiteId=bsst.businessSiteId AND sot.departmentId=bsst.departmentId
			where so.shiftOfferId=shiftOffer_Id  			
		elseif search_Type =2 then 			
				select distinct 
					so.shiftOfferId,
					so.candidateId,
					scu.firstName
					,scu.lastName
					,so.shiftStartDateTime
					,so.shiftEndDateTime
					,so.status
					,so.subClassificationId
					,jscl.jobSubClassification
					,upi.imagePath
					,@totalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS TotalAcceptedHours
					,@totalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalAssignedHours
					,etl.employmentTypeId
					 ,bss.useOvertimeIndicator
					,bss.fullTimeOTLimit as fullTimeOTLimit
					,bss.partTimeOTLimit as partTimeOTLimit
					,bss.casualOTLimit as casualOTLimit
					,cgt.shiftOfferId as targetShiftOfferId
					,cgt.candidateId as targetCandidateId
					,scut.firstName as targetCandidateFirstName
					,scut.lastName as targetCandidateLastName
					,so.shiftStartDateTime as targetShiftStartDateTime
					,so.shiftEndDateTime as targetShiftEndDateTime
					,cgt.status  as targetStatus
					,so.subClassificationId as targetSubClassificationId
					,jsclt.jobSubClassification as targetJobSubClassification
					,upit.imagePath as targetCandidateImagePath
					,@TargetTotalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(cgt.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS targetTotalAcceptedHours
					,@TargetTotalAssignedHours:=round(GetCandidateTotalAssignedHoursForWeekByDate(cgt.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS targetTotalAssignedHours
					,etlt.employmentTypeId as targetEmploymentType
					,bss.useOvertimeIndicator as targetCandidateUseOvertimeIndicator
					,bss.fullTimeOTLimit  as targetFullTimeOTLimit
					,bss.partTimeOTLimit  as targetPartTimeOTLimit
					,bss.casualOTLimit    as targetCasualOTLimit    ,is_TimeLapsed
                    ,'GIVEAWAYACCEPTMANAGERDECLINED' as declineStatus
                    ,so.isFlexibleShiftTime
					,so.isFlexibleShiftTime AS targetFlexibleShiftTime
                    ,so.shiftEndTimeType
					,so.shiftEndTimeValue
					,so.shiftEndTimeType AS targetShiftEndTimeType
					,so.shiftEndTimeValue AS targetShiftEndTimeValue
				FROM candidateShiftOffer so 
				INNER JOIN vwCandidateRosterDetails crd  ON so.candidateId=crd.candidateId AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
				INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
				LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
				inner JOIN scUser scu ON so.candidateId=scu.userId and scu.isDeleted=0 and so.isDeleted=0
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId  and upi.isDeleted=0
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				inner join candidateGiveAwayRequests cgt on cgt.shiftOfferId=so.shiftOfferId and cgt.status =23
				inner JOIN jobProfile jpt ON crd.jobProfileId=jpt.jobProfileId
				LEFT JOIN employmentTypeLocale etlt ON jpt.employmentTypeId=etlt.employmentTypeId and etlt.languageId=language_Id
				inner JOIN scUser scut ON cgt.candidateId=scut.userId and scut.isDeleted=0  
				LEFT JOIN userProfileImage upit ON scut.userId=upit.userId  and upit.isDeleted=0
				INNER JOIN jobSubClassificationLocale jsclt ON so.subClassificationId=jsclt.jobSubClassificationId AND jsclt.languageId=language_Id
				where so.shiftOfferId=shiftOffer_Id 
		end if   
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftRelieveRequestsForManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftRelieveRequestsForManager`(
IN manager_Id BIGINT(20), 
IN forStatus VARCHAR(50),
IN language_Id BIGINT(20),
IN weekStart_Date date,
IN weekEnd_Date	 date
)
BEGIN
/*
 Author: James
 Date  : 01/12/2015
 Description : Get shift relieve requests for manager
*/
                 
                DECLARE is_Overtime BIT(1)
                
				SET is_Overtime=0
                
                SET @totalWorkHours=0.0
                
                IF forStatus in('ALL','WEBNOTIFY','SICK') THEN 
                
							SELECT DISTINCT manager_Id AS managerId,
                                so.departmentId,
                                0 AS weekNumber,
                                year(so.shiftStartDateTime) AS forYear,
                                CONVERT(weekStart_Date, DATETIME) AS weekStartDate,
                                CONVERT(weekEnd_Date , DATETIME) AS weekEndDate,
                                so.shiftOfferId,
                                so.candidateId AS employeeId,
                                CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
                                so.shiftStartDateTime,
                                so.shiftEndDateTime,
                                coalesce(so1.candidateId,0) AS sourceEmployeeId,
                                CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
                                so.status,
                                sl.statusName,
                                jscl.jobSubClassification,
                                jscl1.jobSubClassification AS sourcePosition,
                                upi.imagePath,
                                upi1.imagePath AS sourceEmpImagePath,
                                so.subClassificationId,
                                so.businessSiteId,
                                so1.shiftStartDateTime AS sourceShiftStartDateTime,
								so1.shiftEndDateTime AS sourceShiftEndDateTime,
								@totalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId,manager_Id),2) AS sourceCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
								@TargetTotalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS targetCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
							    ,scu1.firstName as sourceFirstName
                                ,scu1.lastName  as sourceLastName
                                ,scu.firstName  as targetFirstName
                                ,scu.lastName   as targetLastName
                                ,so.isFlexibleShiftTime
                                ,so1.isFlexibleShiftTime AS sourceFlexibleShiftTime
                                ,so.shiftEndTimeType
								,so.shiftEndTimeValue
                                ,so1.shiftEndTimeType AS sourceShiftEndTimeType
								,so1.shiftEndTimeValue AS sourceShiftEndTimeValue
                            FROM candidateShiftOffer so
							INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
							INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
							INNER JOIN scUser scu ON so.candidateId=scu.userId
							LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
							LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
							LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
							LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
							LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
							INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
							LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
							INNER JOIN statusLookup sl ON so.status=sl.statusId
							INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
							INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
							INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
							INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
							INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
							WHERE ucs.userId=manager_Id AND 
                            case when forStatus='ALL' then so.status IN (30,23,10) 
									AND (date(so.shiftStartDateTime) >= date(weekStart_Date) AND date(so.shiftStartDateTime) <= date(weekEnd_Date))
                                 when  forStatus='WEBNOTIFY' then so.status IN (3,10,22,31) 
                                 when forStatus='SICK' THEN  so.status IN (10,12,38) end
							AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
							AND etl.languageId=language_Id AND so.isDeleted=0
                                               
                ELSE
					 SELECT * FROM (
								SELECT DISTINCT manager_Id AS managerId,
								so.departmentId,
								0 AS weekNumber,
								year(so.shiftStartDateTime) AS forYear,
								CONVERT(weekStart_Date, DATETIME) AS weekStartDate,
								CONVERT(weekEnd_Date , DATETIME) AS weekEndDate,
								so.shiftOfferId,
								so.candidateId AS employeeId,
								CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
								so.shiftStartDateTime,
								so.shiftEndDateTime,
								coalesce(so1.candidateId,0)  AS swapSourceEmployeeId,
								CONCAT(scu1.firstName,' ',scu1.lastName) AS swapSourceEmployeeName,
								so.status,
								sl.statusName,
								jscl.jobSubClassification,
								jscl1.jobSubClassification AS sourceJobSubClassification,
								upi.imagePath,
								upi1.imagePath AS sourceEmpImagePath,
								so.subClassificationId,
								so.businessSiteId,
								so1.shiftStartDateTime AS sourceShiftStartDateTime,
								so1.shiftEndDateTime AS sourceShiftEndDateTime,
								@totalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId,manager_Id),2) AS sourceCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
								@TargetTotalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS targetCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
							   ,scu1.firstName as sourceFirstName
								,scu1.lastName  as sourceLastName
								,scu.firstName  as targetFirstName
								,scu.lastName   as targetLastName
                                ,so.isFlexibleShiftTime
                                ,so1.isFlexibleShiftTime AS sourceFlexibleShiftTime
                                ,so.shiftEndTimeType
								,so.shiftEndTimeValue
                                ,so1.shiftEndTimeType AS sourceShiftEndTimeType
								,so1.shiftEndTimeValue AS sourceShiftEndTimeValue
							   FROM candidateShiftOffer so
								INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
								INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
								INNER JOIN scUser scu ON so.candidateId=scu.userId
								LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
								LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
								LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
								LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
								LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
								INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
								LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
								INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
								INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
								INNER JOIN statusLookup sl ON so.status=sl.statusId
								INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
								INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
								INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
								WHERE ucs.userId=manager_Id AND sl.statusName=forStatus AND  
								case when weekStart_Date is not null  then 
										 (date(so.shiftStartDateTime) >= date(weekStart_Date) AND date(so.shiftStartDateTime) <= date(weekEnd_Date))
									else 1=1 end 
								AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND etl.languageId=language_Id AND so.isDeleted=0
						UNION
								SELECT DISTINCT manager_Id AS managerId,
								so.departmentId,
								0 AS weekNumber,
								year(so.shiftStartDateTime) AS forYear,
								CONVERT(weekStart_Date, DATETIME) AS weekStartDate,
								CONVERT(weekEnd_Date, DATETIME) AS weekEndDate,
								cg.shiftOfferId,
								cg.candidateId AS employeeId,
								CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
								so.shiftStartDateTime,
								so.shiftEndDateTime,
								coalesce(so1.candidateId,0)  AS sourceEmployeeId,
								CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
								cg.status,
								sl.statusName,
								jscl.jobSubClassification,
								jscl1.jobSubClassification AS sourceJobSubClassification,
								upi.imagePath,
								upi1.imagePath AS sourceEmpImagePath,
								so.subClassificationId,
								so.businessSiteId,
								so1.shiftStartDateTime AS sourceShiftStartDateTime,
								so1.shiftEndDateTime AS sourceShiftEndDateTime,
								@totalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId,manager_Id),2) AS sourceCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
								@TargetTotalWorkHours:=round(GetCandidateTotalHoursForWeekByDate(cg.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS targetCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
								,scu1.firstName as sourceFirstName
								,scu1.lastName  as sourceLastName
								,scu.firstName  as targetFirstName
								,scu.lastName   as targetLastName
								,so.isFlexibleShiftTime
                                ,so1.isFlexibleShiftTime AS sourceFlexibleShiftTime
                                ,so.shiftEndTimeType
								,so.shiftEndTimeValue
                                ,so1.shiftEndTimeType AS sourceShiftEndTimeType
								,so1.shiftEndTimeValue AS sourceShiftEndTimeValue
								FROM candidateGiveAwayRequests cg
								INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
								INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
								INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
								INNER JOIN scUser scu ON cg.candidateId=scu.userId
								LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
								LEFT JOIN candidateShiftOffer so1 ON so.shiftOfferId=so1.shiftOfferId
								LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
								LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
								LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
								INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
								LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
								INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
								INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
								INNER JOIN statusLookup sl ON cg.status=sl.statusId
								INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
								INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
								INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
								WHERE ucs.userId=manager_Id 
								AND sl.statusName=forStatus and
								  case when weekStart_Date is not null  then 
										 (date(so.shiftStartDateTime) >= date(weekStart_Date) AND date(so.shiftStartDateTime) <= date(weekEnd_Date))
									else 1=1 end 
								AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
								AND etl.languageId=language_Id
								AND so.isDeleted=0
						) AS t1 ORDER BY t1.shiftStartDateTime 
				END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftRelieveRequestsForManager_Old` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftRelieveRequestsForManager_Old`(
IN manager_Id BIGINT(20),
IN weekNumber INT(20),
IN forYear INT(20),
IN forStatus VARCHAR(50),
IN language_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shift relieve requests for manager
*/
                DECLARE weekStartDate DATE
                DECLARE weekEndDate DATE
                DECLARE x_weeks_after_new_year INT
                
                DECLARE is_Overtime BIT(1)
                
		SET is_Overtime=0
                
                SET @totalWorkHours=0.0
               
                SET @x_weeks_after_new_year=DATE_ADD(MAKEDATE(forYear, 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(forYear, 1))>50 , 0 , -1))+weekNumber WEEK)
               
                SET @weekStartDate=DATE_SUB(@x_weeks_after_new_year, INTERVAL WEEKDAY(@x_weeks_after_new_year) DAY)
                SET @weekEndDate=DATE_ADD(@weekStartDate, INTERVAL 6 DAY)
               
                IF forStatus='ALL' THEN
                                SELECT DISTINCT manager_Id AS managerId,
                                so.departmentId,
                                weekNumber AS weekNumber,
                                forYear AS forYear,
                                CONVERT(@weekStartDate, DATETIME) AS weekStartDate,
                                CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) AS weekEndDate,
                                so.shiftOfferId,
                                so.candidateId AS employeeId,
                                CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
                                so.shiftStartDateTime,
                                so.shiftEndDateTime,
                                CASE WHEN so1.candidateId IS NULL THEN 0
                                                ELSE so1.candidateId END AS sourceEmployeeId,
                                CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
                                so.status,
                                sl.statusName,
                                jscl.jobSubClassification,
                                jscl1.jobSubClassification AS sourcePosition,
                                upi.imagePath,
                                upi1.imagePath AS sourceEmpImagePath,
                                so.subClassificationId,
                                so.businessSiteId,
                                so1.shiftStartDateTime AS sourceShiftStartDateTime,
								so1.shiftEndDateTime AS sourceShiftEndDateTime,
								@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId) AS sourceCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
								@TargetTotalWorkHours:=GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId) AS targetCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
							    ,scu1.firstName as sourceFirstName
                                ,scu1.lastName  as sourceLastName
                                ,scu.firstName  as targetFirstName
                                ,scu.lastName   as targetLastName
                            
                            FROM candidateShiftOffer so
							INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
							INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
							INNER JOIN scUser scu ON so.candidateId=scu.userId
							LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
							LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
							LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
							LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
							LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
							INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
							LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
							INNER JOIN statusLookup sl ON so.status=sl.statusId
							INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
							INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
							INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
							INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
							INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
							WHERE ucs.userId=manager_Id AND so.status IN (30,23,10) AND (so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME)
							AND so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
							AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
							AND etl.languageId=language_Id AND so.isDeleted=0

                ELSEIF forStatus='WEBNOTIFY' THEN               
                                SELECT DISTINCT manager_Id AS managerId,
                                so.departmentId,
                                weekNumber AS weekNumber,
                                forYear AS forYear,
                                CONVERT(@weekStartDate, DATETIME) AS weekStartDate,
                                CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) AS weekEndDate,
                                so.shiftOfferId,
                                so.candidateId AS employeeId,
                                CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
                                so.shiftStartDateTime,
                                so.shiftEndDateTime,
                                CASE WHEN so1.candidateId IS NULL THEN 0
                                                ELSE so1.candidateId END AS sourceEmployeeId,
                                CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
                                so.status,
                                sl.statusName,
                                jscl.jobSubClassification,
                                jscl1.jobSubClassification AS sourceJobSubClassification,
                                upi.imagePath,
                                upi1.imagePath AS sourceEmpImagePath,
                                so.subClassificationId,
                                so.businessSiteId,
                                so1.shiftStartDateTime AS sourceShiftStartDateTime,
								so1.shiftEndDateTime AS sourceShiftEndDateTime,
								@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId) AS sourceCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
								@TargetTotalWorkHours:=GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId) AS targetCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
                                
                                ,scu1.firstName as sourceFirstName
                                ,scu1.lastName  as sourceLastName
                                ,scu.firstName  as targetFirstName
                                ,scu.lastName   as targetLastName
                                FROM candidateShiftOffer so
                                INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
                                INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
                                INNER JOIN scUser scu ON so.candidateId=scu.userId
                                LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
                                LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
                                LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
                                LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
                                LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
                                INNER JOIN statusLookup sl ON so.status=sl.statusId
                                INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
								LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
								INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
								INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
								INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
								INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
								INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
								WHERE ucs.userId=manager_Id AND so.status IN (3,10) 
								AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND etl.languageId=language_Id AND so.isDeleted=0
								ORDER BY so.updatedOn DESC
                               
                ELSEIF forStatus='SICK' THEN
                                SELECT DISTINCT manager_Id AS managerId,
                                                so.departmentId,
                                                weekNumber AS weekNumber,
                                                forYear AS forYear,
                                                CONVERT(@weekStartDate, DATETIME) AS weekStartDate,
                                                CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) AS weekEndDate,
                                                so.shiftOfferId,
                                                so.candidateId AS employeeId,
                                                CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
                                                so.shiftStartDateTime,
                                                so.shiftEndDateTime,
                                                CASE WHEN so1.candidateId IS NULL THEN 0
                                                                ELSE so1.candidateId END AS swapSourceEmployeeId,
                                                CONCAT(scu1.firstName,' ',scu1.lastName) AS swapSourceEmployeeName,
                                                so.status,
                                                sl.statusName,
                                                jscl.jobSubClassification,
                                                jscl1.jobSubClassification AS sourceJobSubClassification,
                                                upi.imagePath,
                                                upi1.imagePath AS sourceEmpImagePath,
                                                so.subClassificationId,
                                                so.businessSiteId,
                                                so1.shiftStartDateTime AS sourceShiftStartDateTime,
												so1.shiftEndDateTime AS sourceShiftEndDateTime,
												@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId) AS sourceCandidateTotalWeekHours,
												CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
												@TargetTotalWorkHours:=GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId) AS targetCandidateTotalWeekHours,
												CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
											,scu1.firstName as sourceFirstName
											,scu1.lastName  as sourceLastName
											,scu.firstName  as targetFirstName
											,scu.lastName   as targetLastName
                                            
                                            FROM candidateShiftOffer so
											INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
											INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
											INNER JOIN scUser scu ON so.candidateId=scu.userId
											LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
											LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
											LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
											LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
											LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
											INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
											LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
											INNER JOIN statusLookup sl ON so.status=sl.statusId
											INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
											INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
											INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
											INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
											INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
											WHERE ucs.userId=manager_Id AND sl.statusId IN (10,12,38) 
											AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
											AND etl.languageId=language_Id AND so.isDeleted=0
											ORDER BY so.shiftStartDateTime
                                               
                ELSE
					IF weekNumber=0 THEN
					-- select 1
							SELECT * FROM (
                                                SELECT DISTINCT manager_Id AS managerId,
                                                so.departmentId,
                                                weekNumber AS weekNumber,
                                                forYear AS forYear,
                                                CONVERT(@weekStartDate, DATETIME) AS weekStartDate,
                                                CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) AS weekEndDate,
                                                so.shiftOfferId,
                                                so.candidateId AS employeeId,
                                                CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
                                                so.shiftStartDateTime,
                                                so.shiftEndDateTime,
                                                CASE WHEN so1.candidateId IS NULL THEN 0
                                                                ELSE so1.candidateId END AS swapSourceEmployeeId,
                                                CONCAT(scu1.firstName,' ',scu1.lastName) AS swapSourceEmployeeName,
                                                so.status,
                                                sl.statusName,
                                                jscl.jobSubClassification,
                                                jscl1.jobSubClassification AS sourceJobSubClassification,
                                                upi.imagePath,
                                                upi1.imagePath AS sourceEmpImagePath,
                                                so.subClassificationId,
                                                so.businessSiteId,
                                                so1.shiftStartDateTime AS sourceShiftStartDateTime,
												so1.shiftEndDateTime AS sourceShiftEndDateTime,
												@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId) AS sourceCandidateTotalWeekHours,
												CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
												@TargetTotalWorkHours:=GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId) AS targetCandidateTotalWeekHours,
												CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
                                               ,scu1.firstName as sourceFirstName
												,scu1.lastName  as sourceLastName
												,scu.firstName  as targetFirstName
												,scu.lastName   as targetLastName
                                               
                                               FROM candidateShiftOffer so
                                                INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
                                                INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
                                                INNER JOIN scUser scu ON so.candidateId=scu.userId
                                                LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
                                                LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
                                                LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
                                                LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
                                                LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
                                                INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
												LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
												INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
												INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
                                                INNER JOIN statusLookup sl ON so.status=sl.statusId
                                                INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
                                                INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
												INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
                                                WHERE ucs.userId=manager_Id AND sl.statusName=forStatus   AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND etl.languageId=language_Id AND so.isDeleted=0
                                                UNION
                                                SELECT DISTINCT manager_Id AS managerId,
                                                so.departmentId,
                                                weekNumber AS weekNumber,
                                                forYear AS forYear,
                                                CONVERT(@weekStartDate, DATETIME) AS weekStartDate,
                                                CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) AS weekEndDate,
                                                cg.shiftOfferId,
                                                cg.candidateId AS employeeId,
                                                CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
                                                so.shiftStartDateTime,
                                                so.shiftEndDateTime,
                                                CASE WHEN so1.candidateId IS NULL THEN 0
                                                                ELSE so1.candidateId END AS sourceEmployeeId,
                                                CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
                                                cg.status,
                                                sl.statusName,
                                                jscl.jobSubClassification,
                                                jscl1.jobSubClassification AS sourceJobSubClassification,
                                                upi.imagePath,
                                                upi1.imagePath AS sourceEmpImagePath,
                                                so.subClassificationId,
                                                so.businessSiteId,
                                                so1.shiftStartDateTime AS sourceShiftStartDateTime,
												so1.shiftEndDateTime AS sourceShiftEndDateTime,
												@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId) AS sourceCandidateTotalWeekHours,
												CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
												@TargetTotalWorkHours:=GetCandidateTotalHoursForWeekByDate(cg.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId) AS targetCandidateTotalWeekHours,
												CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
												,scu1.firstName as sourceFirstName
												,scu1.lastName  as sourceLastName
												,scu.firstName  as targetFirstName
												,scu.lastName   as targetLastName
                                                
                                                FROM candidateGiveAwayRequests cg
                                                INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
                                                INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
                                                INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
                                                INNER JOIN scUser scu ON cg.candidateId=scu.userId
                                                LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
                                                LEFT JOIN candidateShiftOffer so1 ON so.shiftOfferId=so1.shiftOfferId
                                                LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
                                                LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
                                                LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
                                                INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
												LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
												INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
												INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
                                                INNER JOIN statusLookup sl ON cg.status=sl.statusId
                                                INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
                                                INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
												INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
												WHERE ucs.userId=manager_Id 
												AND sl.statusName=forStatus 
												AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) 
												AND etl.languageId=language_Id
												AND so.isDeleted=0
                                             ) AS t1 ORDER BY t1.shiftStartDateTime
				ELSE
						SELECT * FROM (
								SELECT DISTINCT manager_Id AS managerId,
									so.departmentId,
									weekNumber AS weekNumber,
									forYear AS forYear,
									CONVERT(@weekStartDate, DATETIME) AS weekStartDate,
									CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) AS weekEndDate,
									so.shiftOfferId,
									so.candidateId AS employeeId,
									CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
									so.shiftStartDateTime,
									so.shiftEndDateTime,
									CASE WHEN so1.candidateId IS NULL THEN 0
													ELSE so1.candidateId END AS swapSourceEmployeeId,
									CONCAT(scu1.firstName,' ',scu1.lastName) AS swapSourceEmployeeName,
									so.status,
									sl.statusName,
									jscl.jobSubClassification,
									jscl1.jobSubClassification AS sourceJobSubClassification,
									upi.imagePath,
									upi1.imagePath AS sourceEmpImagePath,
									so.subClassificationId,
									so.businessSiteId,
									so1.shiftStartDateTime AS sourceShiftStartDateTime,
									so1.shiftEndDateTime AS sourceShiftEndDateTime,
									@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId) AS sourceCandidateTotalWeekHours,
									CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
									@TargetTotalWorkHours:=GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId) AS targetCandidateTotalWeekHours,
									CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
								,scu1.firstName as sourceFirstName
                                ,scu1.lastName  as sourceLastName
                                ,scu.firstName  as targetFirstName
                                ,scu.lastName   as targetLastName
                                FROM candidateShiftOffer so
								INNER JOIN vwCandidateRosterDetails crd  ON so.candidateId=crd.candidateId AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
								INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
								INNER JOIN scUser scu ON so.candidateId=scu.userId
								LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
								LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
								LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
								LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
								LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
								INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
								LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
								INNER JOIN statusLookup sl ON so.status=sl.statusId
								INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
								INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
								INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
								INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
								INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
								WHERE ucs.userId=manager_Id AND sl.statusName=forStatus  AND (so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME)
								AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
								AND so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
								AND etl.languageId=language_Id AND so.isDeleted=0
							UNION
								SELECT DISTINCT manager_Id AS managerId,
								so.departmentId,
								weekNumber AS weekNumber,
								forYear AS forYear,
								CONVERT(@weekStartDate, DATETIME) AS weekStartDate,
								CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) AS weekEndDate,
								cg.shiftOfferId,
								cg.candidateId AS employeeId,
								CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
								so.shiftStartDateTime,
								so.shiftEndDateTime,
								CASE WHEN so1.candidateId IS NULL THEN 0
												ELSE so1.candidateId END AS sourceEmployeeId,
								CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
								cg.status,
								sl.statusName,
								jscl.jobSubClassification,
								jscl1.jobSubClassification AS sourceJobSubClassification,
								upi.imagePath,
								upi1.imagePath AS sourceEmpImagePath,
								so.subClassificationId,
								so.businessSiteId,
								so1.shiftStartDateTime AS sourceShiftStartDateTime,
								so1.shiftEndDateTime AS sourceShiftEndDateTime,
								@totalWorkHours:=GetCandidateTotalHoursForWeekByDate(so1.candidateId,DATE(so1.shiftStartDateTime),so1.businessSiteId) AS sourceCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@totalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS sourceCandidateIsOverTime,
								@TargetTotalWorkHours:=GetCandidateTotalHoursForWeekByDate(cg.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId) AS targetCandidateTotalWeekHours,
								CheckCandidateOverTime(etl.employmentType,@TargetTotalWorkHours,so.businessSiteId,so.departmentId,bss.useOvertimeIndicator) AS targetCandidateIsOverTime
								,scu1.firstName as sourceFirstName
                                ,scu1.lastName  as sourceLastName
                                ,scu.firstName  as targetFirstName
                                ,scu.lastName   as targetLastName
                                
                                FROM candidateGiveAwayRequests cg
								INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
								INNER JOIN vwCandidateRosterDetails crd ON so.candidateId=crd.candidateId  AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
								INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
								INNER JOIN scUser scu ON cg.candidateId=scu.userId
								LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
								LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
								LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
								LEFT JOIN userProfileImage upi1 ON scu1.userId=upi1.userId
								LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
								INNER JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
								LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId and etl.languageId=language_Id
								INNER JOIN statusLookup sl ON cg.status=sl.statusId
								INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
								INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
								INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
								INNER JOIN userRoleBusinessSite cbs ON bs.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
								INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
								WHERE ucs.userId=manager_Id AND sl.statusName=forStatus  AND (so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME)
								AND so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
								AND so.shiftEndDateTime>DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
								AND etl.languageId=language_Id AND so.isDeleted=0
							) AS t1 ORDER BY t1.shiftStartDateTime
					END IF
				END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftsForWeekByCandidateId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftsForWeekByCandidateId`(
IN candidateUser_Id BIGINT(20), 
IN language_Id BIGINT(20)
,IN timesheet_Status tinyint
,IN weekStart_Date date
,IN weekEnd_Date	 date
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shifts for week by candidate Id
 timesheet_Status -- 1 -- Outstanding
					 2 -- history
                     null -- all
*/
 	DECLARE shiftStatus TINYINT(4)
	DECLARE timesheetStatus TINYINT(4)
	DECLARE tempCandidateId BIGINT(20)
    DECLARE isFlexible_ShiftTime bit(1)
	declare  beacon_Exists bit(1)
    
    set beacon_Exists=0
	SET shiftStatus=35
	SET timesheetStatus=0
	SET tempCandidateId=0
    SET isFlexible_ShiftTime=0
	  
	SELECT DISTINCT * FROM (	 
        SELECT so.candidateId AS candidateId,
					CONCAT(scu.firstName,' ',scu.lastName) AS candidateName
					,0  AS weekno
					,year(so.shiftStartDateTime) AS forYear
					,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else  CONVERT(weekStart_Date, DATETIME) end AS weekStart_Date
					,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else CONVERT(weekEnd_Date, DATETIME) end AS weekEnd_Date
					,CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
					DAYNAME(so.shiftStartDateTime) AS shiftDay,
					so.shiftOfferId,
					b.businessName,
					bdep.departmentId,
					bdep.departmentName,
					jscl.jobSubClassificationId,
					jscl.jobSubClassification,
					bs.siteName,
					bs.addressLine1,
					bs.addressLine2,
					cl.cityName,
					sl.stateName,
					sl.abbreviation,
					col.countryName,
					bs.zipCode,
					bs.fax,
					so.shiftStartDateTime,
					so.shiftEndDateTime,
					so.createdOn,
					so.updatedOn,
					CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN shiftStatus
						ELSE so.status END AS shift_status,
					CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN 'SHIFTCLOSED'
						ELSE slp.statusName END AS status_name,
					CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN NULL
						ELSE so.comment END AS COMMENT,
					so1.candidateId AS sourceEmployeeId,
					CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
					jscl1.jobSubClassification AS sourcePosition,
					coalesce(ct.status,timesheetStatus)  AS timesheetStatus,
					bs.businessSiteId,
					upi.imagePath,
					so1.shiftStartDateTime AS sourceShiftStartDateTime,
					so1.shiftEndDateTime AS sourceShiftEndDateTime,
					so.actualShiftStartDateTime,
					so.actualShiftEndDateTime,
					ct.shiftStartDateTime AS candidateShiftStartDateTime,
					ct.shiftEndDateTime AS candidateShiftEndDateTime,
					bss.approveHoursReq AS approveHoursRequired,
					bss.allowSwap AS allowSwapShifts,
					so.sourceModule,
					tz.timeDiffInMinutes,
					so.isShiftAcceptRequired,
					so.isTimeSheetSubmitRequired ,
					0 as candidateShiftCancelId,
					bss.allowCantWork,
					so.isFlexibleShiftTime,
					so1.isFlexibleShiftTime AS sourceFlexibleShiftTime
					,so.shiftEndTimeType
					,so.shiftEndTimeValue
					,so1.shiftEndTimeType AS sourceShiftEndTimeType
					,so1.shiftEndTimeValue AS sourceShiftEndTimeValue
					,CheckBeaconForShift(so.shiftOfferId) as beaconExists
				FROM candidateShiftOffer so
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
				LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
				LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				left JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				left JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				left JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON so.status=slp.statusId
				LEFT JOIN candidateTimesheet ct ON ct.shiftOfferId=so.shiftOfferId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				WHERE so.candidateId=candidateUser_Id  -- and so.status not in (38,40,46)
				and case when timesheet_Status=1 then coalesce(ct.status,0)<>2 and DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime
                when timesheet_Status=2 then  coalesce(ct.status,0)=2   
                    and  ( date(so.shiftStartDateTime) <= date(weekEnd_Date)) AND date(so.shiftStartDateTime) >= date(weekStart_Date)
				else
					( date(so.shiftStartDateTime) <= date(weekEnd_Date))
					AND date(so.shiftStartDateTime) >= date(weekStart_Date)
                end                
                AND so.status NOT IN (3,19,33,36,60,62,38,40,46)
				and CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN   so.status not in(10,1,63) ELSE 1=1 END
                AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0 
			union
				SELECT  cg.candidateId AS candidateId,
				CONCAT(scu.firstName,' ',scu.lastName) AS candidateName
				,0  AS weekno
				,year(so.shiftStartDateTime) AS forYear
				,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else  CONVERT(weekStart_Date, DATETIME) end AS weekStart_Date
				,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else CONVERT(weekEnd_Date,DATETIME) end AS weekEnd_Date
				,CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
				DAYNAME(so.shiftStartDateTime) AS shiftDay,
				cg.shiftOfferId,
				b.businessName,
				bdep.departmentId,
				bdep.departmentName,
				jscl.jobSubClassificationId,
				jscl.jobSubClassification,
				bs.siteName,
				bs.addressLine1,
				bs.addressLine2,
				cl.cityName,
				sl.stateName,
				sl.abbreviation,
				col.countryName,
				bs.zipCode,
				bs.fax,
				so.shiftStartDateTime,
				so.shiftEndDateTime,
				so.createdOn,
				so.updatedOn,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN shiftStatus
					ELSE cg.status END AS shift_status,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN 'SHIFTCLOSED'
					ELSE slp.statusName END AS status_name,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN NULL
					ELSE so.comment END AS COMMENT,
				 so1.candidateId  AS sourceEmployeeId,
				CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
				jscl1.jobSubClassification AS sourcePosition,
				timesheetStatus AS timesheetStatus,
				bs.businessSiteId,
				upi.imagePath,
				so1.shiftStartDateTime AS sourceShiftStartDateTime,
				so1.shiftEndDateTime AS sourceShiftEndDateTime,
				so.actualShiftStartDateTime,
				so.actualShiftEndDateTime,
				NULL AS candidateShiftStartDateTime,
				NULL AS candidateShiftEndDateTime,
				bss.approveHoursReq AS approveHoursRequired,
				bss.allowSwap AS allowSwapShifts,
				so.sourceModule,
				tz.timeDiffInMinutes         ,
				so.isShiftAcceptRequired,
				so.isTimeSheetSubmitRequired ,
                0 as candidateShiftCancelId,
                bss.allowCantWork,
                so.isFlexibleShiftTime,
                so1.isFlexibleShiftTime AS sourceFlexibleShiftTime
                ,so.shiftEndTimeType
				,so.shiftEndTimeValue
                ,so1.shiftEndTimeType AS sourceShiftEndTimeType
				,so1.shiftEndTimeValue AS sourceShiftEndTimeValue
                ,CheckBeaconForShift(so.shiftOfferId) as beaconExists
				FROM candidateGiveAwayRequests cg
				INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId	
				INNER JOIN scUser scu ON cg.candidateId=scu.userId
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
				LEFT JOIN candidateShiftOffer so1 ON cg.shiftOfferId=so1.shiftOfferId
				LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				left JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				left JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				left JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON cg.status=slp.statusId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				left join candidateShiftOffer sso ON cg.shiftOfferId=sso.shiftOfferId and cg.candidateId=sso.candidateId  and sso.status not in (38,40,46)
                WHERE cg.candidateId=candidateUser_Id and sso.shiftOfferId is null AND cg.status IN (1,18,23,39,41,49,63) 
				and case when timesheet_Status=1 then coalesce(timesheetStatus,0)<>2 and DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime
                when timesheet_Status=2 then  coalesce(timesheetStatus,0)=2   
				    and  ( date(so.shiftStartDateTime) <= date(weekEnd_Date)) AND date(so.shiftStartDateTime) >= date(weekStart_Date)
				else
					( date(so.shiftStartDateTime) <= date(weekEnd_Date)) AND date(so.shiftStartDateTime) >= date(weekStart_Date)
                end  
                and CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN   so.status not in(10,1,63) ELSE 1=1 END
				AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0
			union -- Unassigned candidate details                
				select sh.candidateUserId
					,CONCAT(scu.firstName,' ',scu.lastName) AS candidateName
					,0  AS weekno
					,year(so.shiftStartDateTime) AS forYear
					,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else  CONVERT(weekStart_Date, DATETIME) end AS weekStart_Date
					,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else CONVERT(weekEnd_Date, DATETIME) end AS weekEnd_Date
					,CONVERT(so.shiftStartDateTime, DATE) AS shiftDate
					,DAYNAME(so.shiftStartDateTime) AS shiftDay
					,so.shiftOfferId
					,b.businessName
					,bdep.departmentId
					,bdep.departmentName
					,jscl.jobSubClassificationId
					,jscl.jobSubClassification
					,bs.siteName
					,bs.addressLine1
					,bs.addressLine2
					,cl.cityName
					,sl.stateName
					,sl.abbreviation
					,col.countryName
					,bs.zipCode
					,bs.fax
					,sh.shiftStartDateTime
					,sh.shiftEndDateTime
					,so.createdOn
					,so.updatedOn
					,sh.status AS shift_status
					,slp.statusName  as status_name
					,sh.comment AS COMMENT
					,NULL AS sourceEmployeeId
					,null AS sourceEmployeeName
					,null AS sourcePosition
					,null AS timesheetStatus
					,bs.businessSiteId
					,upi.imagePath
					,null AS sourceShiftStartDateTime
					,null AS sourceShiftEndDateTime
					,sh.shiftStartDateTime as actualShiftStartDateTime
					,sh.shiftEndDateTime as actualShiftEndDateTime
					,null AS candidateShiftStartDateTime
					,null AS candidateShiftEndDateTime
					,bss.approveHoursReq AS approveHoursRequired
					,bss.allowSwap AS allowSwapShifts
					,so.sourceModule
					,tz.timeDiffInMinutes
					,so.isShiftAcceptRequired
					,so.isTimeSheetSubmitRequired 		
					,sh.candidateShiftCancelId as candidateShiftCancelId,
                    bss.allowCantWork,
                    so.isFlexibleShiftTime,
					isFlexible_ShiftTime AS sourceFlexibleShiftTime
                    ,so.shiftEndTimeType
					,so.shiftEndTimeValue
                    ,null As sourceShiftEndTimeType
					,null As sourceShiftEndTimeValue
                   ,beacon_Exists as beaconExists
				from candidateShiftCancel sh 
				inner join candidateShiftOffer so on sh.shiftOfferId=so.shiftOfferId and so.isDeleted=0 and sh.isDeleted=0
				inner join scUser scu on sh.candidateUserId=scu.userId and scu.isDeleted=0
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId and upi.isDeleted=0
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				left JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				left JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				left JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON sh.status=slp.statusId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId				
				where sh.candidateUserId=candidateUser_Id and sh.status in(54,56,10)  and sh.isNotified in(0,1)
				and case when timesheet_Status in(1,2) then  1=2
				else  so.shiftEndDateTime > DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) end 
                AND ( date(so.shiftStartDateTime) <= date(weekEnd_Date)) AND date(so.shiftStartDateTime) >= date(weekStart_Date)
                ) AS t1 
		ORDER BY t1.shiftStartDateTime
                
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftsForWeekByCandidateId_old` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftsForWeekByCandidateId_old`(
IN candidateUser_Id BIGINT(20), 
IN weekNumber VARCHAR(2), 
IN forYear VARCHAR(4),
IN language_Id BIGINT(20)
,IN timesheet_Status tinyint
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shifts for week by candidate Id
 timesheet_Status -- 1 -- Outstanding
					 2 -- history
                     null -- all
*/
	DECLARE weekStartDate DATE
	DECLARE weekEndDate DATE
	DECLARE x_weeks_after_new_year INT
	
	DECLARE shiftStatus TINYINT(4)
	DECLARE timesheetStatus TINYINT(4)
	DECLARE tempCandidateId BIGINT(20)
	
	SET shiftStatus=35
	SET timesheetStatus=0
	SET tempCandidateId=0
	
		SET @x_weeks_after_new_year=DATE_ADD(MAKEDATE(forYear, 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(forYear, 1))>50 , 0 , -1))+weekNumber WEEK)
		
		SET @weekStartDate=DATE_SUB(@x_weeks_after_new_year, INTERVAL WEEKDAY(@x_weeks_after_new_year) DAY)
		SET @weekEndDate=DATE_ADD(@weekStartDate, INTERVAL 6 DAY)
        SET @fourWeekStartDate=cast(DATE_SUB(date_sub(utc_timestamp(), interval 3 week),INTERVAL weekday(utc_timestamp()) day)as date) 
		
        
	IF weekNumber<>0 THEN
		SELECT DISTINCT * FROM (
				SELECT so.candidateId AS candidateId,
				CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
				case when timesheet_Status =1 then 0  else weekNumber end  AS weekno,
				forYear AS forYear,
				case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else CONVERT(@weekStartDate, DATETIME) end AS weekStartDate,
				case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) end  AS weekEndDate,
				CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
				DAYNAME(so.shiftStartDateTime) AS shiftDay,
				so.shiftOfferId,
				b.businessName,
				bdep.departmentId,
				bdep.departmentName,
				jscl.jobSubClassificationId,
				jscl.jobSubClassification,
				bs.siteName,
				bs.addressLine1,
				bs.addressLine2,
				cl.cityName,
				sl.stateName,
				sl.abbreviation,
				col.countryName,
				bs.zipCode,
				bs.fax,
				so.shiftStartDateTime,
				so.shiftEndDateTime,
				so.createdOn,
				so.updatedOn,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN shiftStatus
					ELSE so.status END AS shift_status,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN 'SHIFTCLOSED'
					ELSE slp.statusName END AS status_name,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN NULL
					ELSE so.comment END AS COMMENT,
				CASE WHEN so1.candidateId IS NULL THEN tempCandidateId
					ELSE so1.candidateId END AS sourceEmployeeId,
				CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
				jscl1.jobSubClassification AS sourcePosition,
				CASE WHEN ct.status IS NULL THEN timesheetStatus
					ELSE ct.status END AS timesheetStatus,
				bs.businessSiteId,
				upi.imagePath,
				so1.shiftStartDateTime AS sourceShiftStartDateTime,
				so1.shiftEndDateTime AS sourceShiftEndDateTime,
				so.actualShiftStartDateTime,
				so.actualShiftEndDateTime,
				ct.shiftStartDateTime AS candidateShiftStartDateTime,
				ct.shiftEndDateTime AS candidateShiftEndDateTime,
				bss.approveHoursReq AS approveHoursRequired,
				bss.allowSwap AS allowSwapShifts,
				so.sourceModule,
				tz.timeDiffInMinutes,
				so.isShiftAcceptRequired,
				so.isTimeSheetSubmitRequired ,
                0 as candidateShiftOfferHistoryId
				FROM candidateShiftOffer so
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
				LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
				LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				INNER JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				INNER JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				INNER JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON so.status=slp.statusId
				LEFT JOIN candidateTimesheet ct ON ct.shiftOfferId=so.shiftOfferId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				WHERE so.candidateId=candidateUser_Id  
                and case when timesheet_Status=1 then coalesce(ct.status,0)<>2
                when timesheet_Status=2 then  coalesce(ct.status,0)=2                 
					AND (so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
					AND so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME) 
                  --  and so.shiftEndDateTime < DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
				else 
                     (so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
					AND so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME) 
                end 
				AND so.status NOT IN (3,19,33,36)
				and CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN   so.status not in(10,1) ELSE 1=1 END
                AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0
				UNION
				
				SELECT  cg.candidateId AS candidateId,
				CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
				case when timesheet_Status =1 then 0 else weekNumber end  AS weekno,
				forYear AS forYear,
				case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else  CONVERT(@weekStartDate, DATETIME) end AS weekStartDate,
				case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) end AS weekEndDate,
				CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
				DAYNAME(so.shiftStartDateTime) AS shiftDay,
				cg.shiftOfferId,
				b.businessName,
				bdep.departmentId,
				bdep.departmentName,
				jscl.jobSubClassificationId,
				jscl.jobSubClassification,
				bs.siteName,
				bs.addressLine1,
				bs.addressLine2,
				cl.cityName,
				sl.stateName,
				sl.abbreviation,
				col.countryName,
				bs.zipCode,
				bs.fax,
				so.shiftStartDateTime,
				so.shiftEndDateTime,
				so.createdOn,
				so.updatedOn,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN shiftStatus
					ELSE cg.status END AS shift_status,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN 'SHIFTCLOSED'
					ELSE slp.statusName END AS status_name,
				CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN NULL
					ELSE so.comment END AS COMMENT,
				CASE WHEN so1.candidateId IS NULL THEN tempCandidateId
					ELSE so1.candidateId END AS sourceEmployeeId,
				CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
				jscl1.jobSubClassification AS sourcePosition,
				timesheetStatus AS timesheetStatus,
				bs.businessSiteId,
				upi.imagePath,
				so1.shiftStartDateTime AS sourceShiftStartDateTime,
				so1.shiftEndDateTime AS sourceShiftEndDateTime,
				so.actualShiftStartDateTime,
				so.actualShiftEndDateTime,
				NULL AS candidateShiftStartDateTime,
				NULL AS candidateShiftEndDateTime,
				bss.approveHoursReq AS approveHoursRequired,
				bss.allowSwap AS allowSwapShifts,
				so.sourceModule,
				tz.timeDiffInMinutes         ,
				so.isShiftAcceptRequired,
				so.isTimeSheetSubmitRequired ,
                0 as candidateShiftOfferHistoryId
				FROM candidateGiveAwayRequests cg
				INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
				INNER JOIN scUser scu ON cg.candidateId=scu.userId
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
				LEFT JOIN candidateShiftOffer so1 ON cg.shiftOfferId=so1.shiftOfferId
				LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				INNER JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				INNER JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				INNER JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON cg.status=slp.statusId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				WHERE cg.candidateId=candidateUser_Id AND cg.status IN (18,23,39,41,49) 
                and case when timesheet_Status=1 then coalesce(timesheetStatus,0)<>2
						when timesheet_Status=2 then coalesce(timesheetStatus,0)=2
							AND (so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
							AND so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME)
                           -- and so.shiftEndDateTime < DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
						else
							 (so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
							AND so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME)
						 end
				AND (so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
				AND so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME)
				AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0
                union -- Unassigned candidate details                
				select sh.candidateUserId
					,CONCAT(scu.firstName,' ',scu.lastName) AS candidateName
					,case when timesheet_Status =1 then 0 else weekNumber end  AS weekno
					,forYear AS forYear
					,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else  CONVERT(@weekStartDate, DATETIME) end AS weekStartDate
					,case when timesheet_Status =1 then DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) else CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME) end AS weekEndDate
					,CONVERT(so.shiftStartDateTime, DATE) AS shiftDate
					,DAYNAME(so.shiftStartDateTime) AS shiftDay
					,so.shiftOfferId
					,b.businessName
					,bdep.departmentId
					,bdep.departmentName
					,jscl.jobSubClassificationId
					,jscl.jobSubClassification
					,bs.siteName
					,bs.addressLine1
					,bs.addressLine2
					,cl.cityName
					,sl.stateName
					,sl.abbreviation
					,col.countryName
					,bs.zipCode
					,bs.fax
					,sh.shiftStartDateTime
					,sh.shiftEndDateTime
					,so.createdOn
					,so.updatedOn
					,sh.status AS shift_status
					,slp.statusName  as status_name
					,null AS COMMENT
					,NULL AS sourceEmployeeId
					,null AS sourceEmployeeName
					,null AS sourcePosition
					,null AS timesheetStatus
					,bs.businessSiteId
					,upi.imagePath
					,null AS sourceShiftStartDateTime
					,null AS sourceShiftEndDateTime
					,sh.shiftStartDateTime as actualShiftStartDateTime
					,sh.shiftEndDateTime as actualShiftEndDateTime
					,null AS candidateShiftStartDateTime
					,null AS candidateShiftEndDateTime
					,bss.approveHoursReq AS approveHoursRequired
					,bss.allowSwap AS allowSwapShifts
					,so.sourceModule
					,tz.timeDiffInMinutes
					,so.isShiftAcceptRequired
					,so.isTimeSheetSubmitRequired 		
					,sh.candidateShiftCancelId as candidateShiftOfferHistoryId
				from candidateShiftCancel sh 
				inner join candidateShiftOffer so on sh.shiftOfferId=so.shiftOfferId and so.isDeleted=0 and sh.isDeleted=0
				inner join scUser scu on sh.candidateUserId=scu.userId and scu.isDeleted=0
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId and upi.isDeleted=0
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				INNER JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				INNER JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				INNER JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON sh.status=slp.statusId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId				
				where sh.candidateUserId=candidateUser_Id and sh.status in(54,55)  and sh.isNotified=1
				and case when timesheet_Status in(1,2) then  1=2
				else  so.shiftEndDateTime > DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) end 
                AND (so.shiftStartDateTime <= CONVERT(CONCAT(DATE_FORMAT(@weekEndDate, '%Y-%m-%d'),' 23:59:59'), DATETIME))
				AND so.shiftStartDateTime >= CONVERT(@weekStartDate, DATETIME)
                ) AS t1 
		ORDER BY t1.shiftStartDateTime
	ELSE 	
	select distinct * from (
				SELECT  DISTINCT so.candidateId AS candidateId,
				CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
				0 AS weekno,
				forYear AS forYear,
				DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AS weekStartDate,
				DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AS weekEndDate,
				CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
				DAYNAME(so.shiftStartDateTime) AS shiftDay,
				so.shiftOfferId,
				b.businessName,
				bdep.departmentId,
				bdep.departmentName,
				jscl.jobSubClassificationId,
				jscl.jobSubClassification,
				bs.siteName,
				bs.addressLine1,
				bs.addressLine2,
				cl.cityName,
				sl.stateName,
				sl.abbreviation,
				col.countryName,
				bs.zipCode,
				bs.fax,
				so.shiftStartDateTime,
				so.shiftEndDateTime,
				so.createdOn,
				so.updatedOn,
				shiftStatus AS shift_status,
				'SHIFTCLOSED' AS status_name,
				NULL AS COMMENT,
				CASE WHEN so1.candidateId IS NULL THEN tempCandidateId
					ELSE so1.candidateId END AS sourceEmployeeId,
				CONCAT(scu1.firstName,' ',scu1.lastName) AS sourceEmployeeName,
				jscl1.jobSubClassification AS sourcePosition,
				ct.status AS timesheetStatus,
				bs.businessSiteId,
				upi.imagePath,
				so1.shiftStartDateTime AS sourceShiftStartDateTime,
				so1.shiftEndDateTime AS sourceShiftEndDateTime,
				so.actualShiftStartDateTime,
				so.actualShiftEndDateTime,
				ct.shiftStartDateTime AS candidateShiftStartDateTime,
				ct.shiftEndDateTime AS candidateShiftEndDateTime,
				bss.approveHoursReq AS approveHoursRequired,
				bss.allowSwap AS allowSwapShifts,
				so.sourceModule,
				tz.timeDiffInMinutes,
				so.isShiftAcceptRequired,
				so.isTimeSheetSubmitRequired,
                0 as candidateShiftOfferHistoryId
				FROM candidateShiftOffer so
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
				LEFT JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
				LEFT JOIN scUser scu1 ON scu1.userId=so1.candidateId
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				LEFT JOIN jobSubClassificationLocale jscl1 ON so1.subClassificationId=jscl1.jobSubClassificationId AND jscl1.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				INNER JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				INNER JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				INNER JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON so.status=slp.statusId
				INNER JOIN candidateTimesheet ct ON ct.shiftOfferId=so.shiftOfferId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId
				WHERE so.candidateId=candidateUser_Id AND so.shiftEndDateTime < DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AND so.status NOT IN (1,3,19,33,36)
					and CASE WHEN DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)>so.shiftEndDateTime THEN   so.status not in(10,1) ELSE 1=1 END
					AND so.isDeleted=0 AND bs.isDeleted=0 AND b.isDeleted=0
				and case when timesheet_Status =1 then ct.status<>2
						 when timesheet_Status =2 then ct.status=2    and cast(so.shiftEndDateTime as date) between @fourWeekStartDate and cast(UTC_TIMESTAMP() as date)
						 else 1=1 end
		union -- Unassigned candidate details                
				select sh.candidateUserId
					,CONCAT(scu.firstName,' ',scu.lastName) AS candidateName 
					,0 AS weekno
					,forYear AS forYear
					,DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AS weekStartDate
					,DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE) AS weekEndDate
					,CONVERT(so.shiftStartDateTime, DATE) AS shiftDate
					,DAYNAME(so.shiftStartDateTime) AS shiftDay
					,so.shiftOfferId
					,b.businessName
					,bdep.departmentId
					,bdep.departmentName
					,jscl.jobSubClassificationId
					,jscl.jobSubClassification
					,bs.siteName
					,bs.addressLine1
					,bs.addressLine2
					,cl.cityName
					,sl.stateName
					,sl.abbreviation
					,col.countryName
					,bs.zipCode
					,bs.fax
					,sh.shiftStartDateTime
					,sh.shiftEndDateTime
					,so.createdOn
					,so.updatedOn
					,sh.status AS shift_status
					,slp.statusName  as status_name
					,null AS COMMENT
					,NULL AS sourceEmployeeId
					,null AS sourceEmployeeName
					,null AS sourcePosition
					,null AS timesheetStatus
					,bs.businessSiteId
					,upi.imagePath
					,null AS sourceShiftStartDateTime
					,null AS sourceShiftEndDateTime
					,sh.shiftStartDateTime as actualShiftStartDateTime
					,sh.shiftEndDateTime as actualShiftEndDateTime
					,null AS candidateShiftStartDateTime
					,null AS candidateShiftEndDateTime
					,bss.approveHoursReq AS approveHoursRequired
					,bss.allowSwap AS allowSwapShifts
					,so.sourceModule
					,tz.timeDiffInMinutes
					,so.isShiftAcceptRequired
					,so.isTimeSheetSubmitRequired 		
					,sh.candidateShiftCancelId as candidateShiftOfferHistoryId
				from candidateShiftCancel sh 
				inner join candidateShiftOffer so on sh.shiftOfferId=so.shiftOfferId and so.isDeleted=0 and sh.isDeleted=0
				inner join scUser scu on sh.candidateUserId=scu.userId and scu.isDeleted=0
				LEFT JOIN userProfileImage upi ON scu.userId=upi.userId and upi.isDeleted=0
				INNER JOIN jobSubClassificationLocale jscl ON so.subClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
				INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
				INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
				INNER JOIN business b ON bs.businessId=b.businessId
				INNER JOIN businessDepartment bdep ON so.departmentId=bdep.departmentId
				INNER JOIN cityLocale cl ON bs.cityId=cl.cityId AND cl.languageId=language_Id
				INNER JOIN stateLocale sl ON bs.stateId=sl.stateId AND sl.languageId=language_Id
				INNER JOIN countryLocale col ON bs.countryId=col.countryId AND col.languageId=language_Id
				LEFT JOIN statusLookup slp ON sh.status=slp.statusId
				INNER JOIN businessSettings bss ON so.businessSiteId=bss.businessSiteId AND so.departmentId=bss.departmentId				
				where sh.candidateUserId=candidateUser_Id and sh.status in(54,55)  and sh.isNotified=1
				and case when timesheet_Status in(1,2) then 1=2 else 
                 so.shiftEndDateTime > DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)
                end
		)a ORDER BY shiftStartDateTime
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftTemplateCountsForWeek` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftTemplateCountsForWeek`(
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shift template counts for week
*/
	DECLARE monday_Count INT
	DECLARE tuesday_Count INT
	DECLARE wednesday_Count INT
	DECLARE thursday_Count INT
	DECLARE friday_Count INT
	DECLARE saturday_Count INT
	DECLARE sunday_Count INT
	
	SELECT COUNT(1) INTO monday_Count
	FROM businessShiftTemplate
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND LCASE(weekDayName)='monday'
	
	SELECT COUNT(1) INTO tuesday_Count
	FROM businessShiftTemplate
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND LCASE(weekDayName)='tuesday'
	
	SELECT COUNT(1) INTO wednesday_Count
	FROM businessShiftTemplate
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND LCASE(weekDayName)='wednesday'
	
	SELECT COUNT(1) INTO thursday_Count
	FROM businessShiftTemplate
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND LCASE(weekDayName)='thursday'
	
	SELECT COUNT(1) INTO friday_Count
	FROM businessShiftTemplate
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND LCASE(weekDayName)='friday'
	
	SELECT COUNT(1) INTO saturday_Count
	FROM businessShiftTemplate
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND LCASE(weekDayName)='saturday'
	
	SELECT COUNT(1) INTO sunday_Count
	FROM businessShiftTemplate
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND LCASE(weekDayName)='sunday'
	
	
	SELECT monday_Count AS mondayCount,tuesday_Count AS tuesdayCount,wednesday_Count AS wednesdayCount,thursday_Count AS thursdayCount,
		friday_Count AS fridayCount,saturday_Count AS saturdayCount,sunday_Count AS sundayCount
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetShiftTimesByWeekDayId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetShiftTimesByWeekDayId`(
IN jobProfileHireRequest_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shift times by weekday Id
*/
	
	SELECT hrsd.weekDayId,hrsd.shiftStartTime,hrsd.shiftEndTime,wdl.weekDay AS weekDayName
	FROM hireRequestShift hrs
	INNER JOIN hireRequestShiftDays hrsd ON hrs.hireRequestShiftId=hrsd.hireRequestShiftId
	INNER JOIN weekDayLocale wdl ON hrsd.weekDayId=wdl.weekDayId
	WHERE hrs.jobProfileHireRequestId=jobProfileHireRequest_Id AND hrs.isDeleted=0 AND hrsd.isDeleted=0
	ORDER BY hrsd.weekDayId
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSiteChild` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSiteChild`(IN RoleCategoryId tinyint,in Site_Id bigint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Child site details
 call GetSiteChild(3, 103)
*/

	 
		select businessSiteId from businessSite where RoleCategoryId = 3 and  parentBusinessSiteId = Site_Id and isDeleted =0
	union all
		select agencySiteId from agencySite where RoleCategoryId =4 and  parentAgencySiteId = Site_Id and isDeleted =0
  
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSiteDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSiteDocument`(IN RoleCategory_Id tinyint, in Id nvarchar(5000))
BEGIN


/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Get Agency or Business Document Information
 call GetSiteDocument(3, 1)
 
*/
	
 
		select  businessDocumentId 
				,documentTypeId 
				,fileName 
				,fileMimeType 
				,fileETag 
				,fileUrl 
				,fileStatus 
                ,businessId as Id
		  from businessDocument bd where RoleCategory_Id =3 and  bd.isDeleted = 0 and find_in_set(businessId , Id) 
		 union all
		select  agencyDocumentId 
				,documentTypeId 
				,fileName 
				,fileMimeType 
				,fileETag 
				,fileUrl 
				,fileStatus 
                ,agencyId as Id
		  from agencyDocument ad where RoleCategory_Id =4 and  ad.isDeleted = 0 and find_in_set(agencyId, Id) 
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSiteNodes` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSiteNodes`(In RoleCategoryId tinyint,IN Id bigint,IN Site_Id bigint)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Site details for parent site dropdown in site creation page.
*/
 

	
if (RoleCategoryId =3 ) then
		select a.* from (
			select
			 bs.businessSiteId  as SiteId
			,bs.siteName   as siteName
			from businessSite bs 
			where bs.businessId = Id and isDeleted = 0
		)a left join (
			select 	businessSiteId from businessSite
			where find_in_set(businessSiteId, (select childHierarchy from businessSite where businessSiteId=Site_Id )) or businessSiteId=Site_Id and isDeleted = 0
		)b on a.SiteId=b.businessSiteId
		where b.businessSiteId is null     
end if
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSkill` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSkill`( 
IN language_Id bigint(20) 
,IN employmentProfile_Id int(11)
)
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description :  Skills for employment profile
 call GetSkill(264)
*/

				
select sl.skillId, skillName 
from skillLocale sl inner join skill s on s.skillId=sl.skillId
where sl.languageId =language_Id and s.employmentProfileId=employmentProfile_Id
order by skillName

	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSPScript` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSPScript`(   )
BEGIN
	declare proc_name nvarchar(300)
	declare Proc_Names_Count bigint
	declare i bigint
	
	CREATE TEMPORARY TABLE Proc_Names (procid bigint auto_increment, procname nvarchar(300), CONSTRAINT PRIMARY KEY  ( procid ))
	CREATE TEMPORARY TABLE ProcScript (ProcScript text)
	
	insert into Proc_Names(procname)
	select ROUTINE_NAME from INFORMATION_SCHEMA.ROUTINES
	
	set Proc_Names_Count = (select count(1) from Proc_Names)
	set i = 1
	
	 WHILE (i<=Proc_Names_Count) DO
		set proc_name = (select procname from Proc_Names where procid = i)
	
		-- /*
		insert into ProcScript
		SELECT 
		concat (" 
 DELIMITER $$", CHAR(10 using utf8),  " CREATE PROCEDURE " ,r.specific_name ," ( ",
				COALESCE (group_concat( concat (parameter_mode ," ", parameter_name, " " , p.dtd_identifier ) separator ' , ')," ")
				," ) " , ROUTINE_DEFINITION, " " ,"$$") 
		FROM information_schema.ROUTINES r 
		left join information_schema.parameters p  on p.specific_name = r.specific_name
		where r.specific_name = proc_name
		order by p.specific_name, p.ordinal_position
		-- */
	   set i = i + 1
	 END WHILE


	select * from ProcScript

	drop temporary table if exists Proc_Names
	drop temporary table if exists ProcScript

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetStaffManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetStaffManager`(
	IN businessSite_Id varchar(1000)
   ,IN candidate_Name varchar(100)
   ,IN department_name nvarchar(1000)
   ,IN subClassification_Id bigint
   ,IN employmentType_Id	int
   ,IN isJoining_ThisWeek bit
   ,IN language_Id	bigint
   ,IN start_record	bigint
   ,IN no_of_records bigint
   ,IN sort_Column varchar(50)
   ,IN user_Id varchar(1000)
)
BEGIN

/*
Author			: James
Date  			: 17/03/2015
Description     : Staff Manager JobProfile
call est_skillsconnect.GetStaffManager('137,138', '', null, null, null, 1, 264, 0, 10, 'candidateName_Desc')
*/

if no_of_records is null then 
		set no_of_records = (select count(1) tt  
			from hireRequestCandidate hrc 
			inner join jobProfileHireRequest jphr on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId and hrc.isDeleted=0 and hrc.candidateHRStatus=11 
			inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId=jphr.jobProfileBusinessSiteId
			inner join jobProfile jp on jp.jobProfileId=jphr.jobProfileId
			inner join businessSite bs on bs.businessSiteId=jpbs.businessSiteId
			where bs.businessSiteId=businessSite_Id )      
end if 

select *,FOUND_ROWS() as TotalRecords from (
	select distinct 
		 hrc.candidateUserId
		,concat(u.firstName," ",u.lastName) as candidateName    
        , up.imagePath as fileUrl
		,uc.mobilePhone
        ,u.emailId
        ,u.userUIId
        ,u.encryptionKey
        ,(select DATE_ADD(lastLoginTime, INTERVAL timeDiffInMinutes MINUTE) as lastLoginTime from userLastLogin ul where ul.userId= hrc.candidateUserId  order by  lastLoginTime desc limit 1)as lastLoginTime
		-- ,GetUserLastLoginDevice(hrc.candidateUserId,language_Id)as lastLoginDevice
		,( select deviceType from userLastLogin ul 
			inner join deviceTypeLocale dt on ul.deviceTypeId=dt.deviceTypeID and dt.languageId=language_Id
			where ul.userId=hrc.candidateUserId order by lastLoginTime desc limit 1)as lastLoginDevice
		,c.countryISDCode
    from hireRequestCandidate hrc 
	inner join jobProfileHireRequest jphr on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId and hrc.isDeleted=0 and hrc.candidateHRStatus=11 
	left join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId=jphr.jobProfileBusinessSiteId
	left join jobProfile jp on jp.jobProfileId=jphr.jobProfileId
	left join businessSite bs on bs.businessSiteId=jpbs.businessSiteId
    left join timeZone tz on bs.timeZoneId=tz.timeZoneId
	left join scUser u on u.userId=hrc.candidateUserId
	left join businessDepartment bd on bd.departmentId=jp.departmentId
	left join jobSubClassificationLocale jscl on jscl.jobSubClassificationId=jp.jobSubClassificationId and jscl.languageId=language_Id
	left join employmentTypeLocale etl on etl.employmentTypeId=jp.employmentTypeId and etl.languageId=language_Id
	left join hireRequestDetail hrd on hrd.jobProfileHireRequestId=jphr.jobProfileHireRequestId
    left join userProfileImage up on hrc.candidateUserId=up.userId and up.isDeleted=0 and up.fileStatus=1
    left join userContact uc on u.userId=uc.userID
    left join candidateDetail cd on u.userId = cd.candidateUserId
    left join country c  on c.countryId=cd.countryId  
    where hrc.candidateHRStatus=11 and find_in_set(bs.businessSiteId,businessSite_Id)
	and bd.departmentName like coalesce(concat("%",department_name,"%"),bd.departmentName)
	and jp.jobSubClassificationId=coalesce(subClassification_Id,jp.jobSubClassificationId)
	and jp.employmentTypeId = coalesce(employmentType_Id,jp.employmentTypeId) 
    and find_in_set(hrc.candidateUserId,coalesce(user_Id,hrc.candidateUserId))
    and case when isJoining_ThisWeek=1 then datediff(empStartDate,utc_timestamp())<=6 and datediff(empStartDate,utc_timestamp())>=0
		else datediff(empStartDate,utc_timestamp())<=0 and datediff(empEndDate,utc_timestamp())>=0 
		end
	and hrc.isDeleted = 0 and u.isDeleted=0 and concat(u.firstName," ",u.lastName) like concat("%",coalesce(candidate_Name,""),"%") 
)a
 order by case when     sort_Column='candidateName_asc'	then	candidateName	end asc,
			case when   sort_Column='candidateName_desc'	then	candidateName	end desc,
			case when   sort_Column='lastLoginTime_asc'	then	lastLoginTime	end asc,
			case when   sort_Column='lastLoginTime_desc'	then	lastLoginTime	end desc,
            case when   sort_Column='lastLoginDevice_asc'	then	lastLoginDevice	end asc,
			case when   sort_Column='lastLoginDevice_desc'	then	lastLoginDevice	end desc           

 LIMIT no_of_records OFFSET start_record   
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetStaffManagerJobProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetStaffManagerJobProfile`(
 IN candidateUserIds nvarchar(3000)
,IN businessSite_Id varchar(1000)
,IN department_name nvarchar(1000)
,IN subClassification_Id bigint
,IN employmentType_Id	int
,IN language_Id	bigint
,IN business_Id bigint
)
BEGIN

/*
Author			: Tijo
Date  			: 07/04/2015
Description     : Staff Manager JobProfile list
*/
	select distinct hrc.candidateUserId
	, jp.jobProfileId
	, jp.jobSubClassificationId
	, jsc.jobSubClassification
	, jp.departmentId
	, bd.departmentName
	, hrd.empEndDate
    , etl.employmentType
    , bs.siteName
	, bs.businessSiteId
    , hrd.empStartDate
	from hireRequestCandidate hrc
	inner join jobProfileHireRequest jphr on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
    inner join hireRequestDetail hrd on hrd.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
	inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId = jphr.jobProfileBusinessSiteId
	inner join jobProfile jp on jphr.jobProfileId = jp.jobProfileId
	inner join jobSubClassificationLocale jsc on jsc.jobSubClassificationId = jp.jobSubClassificationId and jsc.languageId = language_id
    inner join employmentTypeLocale etl on jp.employmentTypeId = etl.employmentTypeId and etl.languageId = language_Id
	left join businessDepartment bd on bd.departmentId = jp.departmentId
	left join scUser u on hrc.candidateUserId = u.userId
    left join userContact uc on u.userId = uc.userId
    left join userProfileImage upi on u.userId = upi.userId
    left join businessSite bs on bs.businessSiteId = jpbs.businessSiteId
	where hrc.isDeleted=0 and u.isDeleted=0 and jp.isDeleted=0 and find_in_set(jpbs.businessSiteId,coalesce(businessSite_Id,jpbs.businessSiteId))    and hrc.candidateHRStatus=11 
	 and   jp.jobSubclassificationId = coalesce(subClassification_Id ,jp.jobSubclassificationId)
     and bs.businessId=coalesce(business_Id,bs.businessId)
	 and bd.departmentName like coalesce(concat("%",department_name,"%"),bd.departmentName) 	
	and find_in_set(hrc.candidateUserId, coalesce(candidateUserIds,hrc.candidateUserId))
    and jp.employmentTypeId = coalesce(employmentType_Id,jp.employmentTypeId)
    order by hrc.candidateUserId
    
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetStaffManagerJobProfileMobile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetStaffManagerJobProfileMobile`(
 IN candidateUserIds nvarchar(3000)
,IN businessSite_Id varchar(1000)
,IN department_name nvarchar(1000)
,IN subClassification_Id bigint
,IN employmentType_Id	int
,IN language_Id	bigint
,IN business_Id bigint

)
BEGIN

/*
Author			: Tijo
Date  			: 07/04/2015
Description     : Staff Manager JobProfile list for mobile
call ValidateUserEmailName('tijojoseph1989@yahoo.com', 'Tijo', 'Joseph')
*/
	select distinct hrc.candidateUserId
	-- , jp.jobProfileId
	, jp.jobSubClassificationId
	, jsc.jobSubClassification
	, jp.departmentId
	, bd.departmentName
    , etl.employmentType
    , bs.siteName
    , bs.businessSiteId
	from hireRequestCandidate hrc
	inner join jobProfileHireRequest jphr on hrc.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
    inner join hireRequestDetail hrd on hrd.jobProfileHireRequestId=jphr.jobProfileHireRequestId 
	inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId = jphr.jobProfileBusinessSiteId
	inner join jobProfile jp on jphr.jobProfileId = jp.jobProfileId
	inner join jobSubClassificationLocale jsc on jsc.jobSubClassificationId = jp.jobSubClassificationId and jsc.languageId = language_id
    inner join employmentTypeLocale etl on jp.employmentTypeId = etl.employmentTypeId and etl.languageId = language_Id
	left join businessDepartment bd on bd.departmentId = jp.departmentId
	left join scUser u on hrc.candidateUserId = u.userId
    left join userContact uc on u.userId = uc.userId
    left join userProfileImage upi on u.userId = upi.userId
    left join businessSite bs on bs.businessSiteId = jpbs.businessSiteId
	where find_in_set(jpbs.businessSiteId,coalesce(businessSite_Id,jpbs.businessSiteId))  and hrc.candidateHRStatus=11 
    and jp.jobSubclassificationId = coalesce(subClassification_Id ,jp.jobSubclassificationId)
	and bs.businessId=coalesce(business_Id,bs.businessId)
    and bd.departmentName like concat("%",coalesce(department_name,bd.departmentName),"%")
	and find_in_set(hrc.candidateUserId, coalesce(candidateUserIds,hrc.candidateUserId))
    and jp.employmentTypeId = coalesce(employmentType_Id,jp.employmentTypeId)
    order by hrc.candidateUserId
    
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetState` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetState`( IN Country_ID bigint(20) , IN language_Id bigint(20) )
BEGIN 

/*
Author			: Tijo
Date  			: 07/04/2015
Description     : Get State
*/
			
	select  s.stateID, stateName 
    from state s 
    left join stateLocale sl
    on s.stateId=sl.stateId
     where countryId =  Country_ID and languageId =language_Id
     order by stateName
     
	
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetStudentType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetStudentType`(
in language_Id int
)
BEGIN
/*
 Author: James
 Date  : 17/05/2016
 Description : Get Student Type
*/

select studentTypeId,studentType from studentTypeLocale 
where languageId=language_Id

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetSubClassificationsForBusinessSiteAndDept` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetSubClassificationsForBusinessSiteAndDept`(
  IN	businessSite_Id	BIGINT(20),
  IN	department_Id	BIGINT(20),
  in	language_Id BIGINT(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get subclassifications for business site and department
*/
	SELECT DISTINCT jscl.jobSubClassificationId,jscl.jobSubClassification FROM jobProfileBusinessSite jpBs
	INNER JOIN jobProfile jp ON jpBs.jobProfileId=jp.jobProfileId
	INNER JOIN jobSubClassificationLocale jscl ON jp.jobSubClassificationId=jscl.jobSubClassificationId AND jscl.languageId=language_Id
	WHERE jpBs.businessSiteId=businessSite_Id AND jp.departmentId=department_Id
		AND jpBs.isDeleted=0 and jp.isDeleted=0
	ORDER BY jscl.jobSubClassification
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTableScript` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTableScript`(   )
BEGIN
DECLARE tableName nvarchar(100)
DECLARE columnDetail nvarchar(3000)


CREATE TEMPORARY TABLE TableList (id bigint AUTO_INCREMENT PRIMARY KEY, tblName nvarchar(100))
CREATE TEMPORARY TABLE TableScript (tableGeneScript nvarchar(3000))


INSERT INTO TableList (tblName)
SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE table_schema ="est_skillsconnect"

SET columnDetail = ""
SET @i =1

SELECT * FROM TableList

WHILE @i <= (SELECT count(id) FROM TableList) DO
  SET tableName = (SELECT tblName FROM TableList WHERE id =@i)

 SET columnDetail = (SELECT concat("CREATE TABLE " , tableName , " (",
      (SELECT
      group_concat(
      concat (COLUMN_NAME
        ," "
        ,coalesce(COLUMN_TYPE,"")
        ," "
        ,coalesce(EXTRA,"")
        ,CASE WHEN (IS_NULLABLE = "NO") THEN " NOT NULL " ELSE " NULL" END
           )
         )
      ))
      FROM INFORMATION_SCHEMA.columns c1 WHERE table_schema ="est_skillsconnect" AND TABLE_NAME = tableName)

  -- select columnDetail

 SET columnDetail = concat(columnDetail,
        concat(",PRIMARY KEY ("
        , coalesce((SELECT group_concat(COLUMN_NAME) FROM INFORMATION_SCHEMA.columns WHERE table_schema ="est_skillsconnect" AND COLUMN_KEY ="PRI"  AND TABLE_NAME = tableName),"")
           ," )"
        )
         ,")"
         )


 INSERT INTO TableScript(tableGeneScript)
 VALUES (columnDetail)

    SET @i = @i + 1
END WHILE



SELECT * FROM TableScript

DROP TEMPORARY TABLE TableList
DROP TEMPORARY TABLE TableScript

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTest`(
	 in shiftOffer_Id bigint
    ,in search_Type tinyint
    ,in shift_status  tinyint
)
BEGIN

/*
 Author: James
 Date  : 29/09/2015 
 description : Get shift details for sending notification
 searchType -- 1 - Swap
               2- Giveaway  
               3- Normal shift
               4- LastMinue Hire
shift_status 1-- All candidate
             2- candidate Accepted
             3-- Manager Approved
             4-- Manager Declined
call GetShiftDetailsForNotification 7058,1
*/
Declare user_Id bigint
declare user_name varchar(50)
declare shift_time datetime


if search_Type=1 then
	select *  , found_rows() as Total 
    from (
		SELECT distinct  so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,scut.userId as targetCandidateUserId
			,CONCAT(scut.firstName,' ',scut.lastName) AS targetCandidateName
			,sot.shiftStartDateTime as targetShiftStartDateTime
			,sot.shiftEndDateTime as targetShiftEndDateTime
            ,0 as TotalDeclined
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId
		LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId
		left join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
		left  JOIN scUser scut ON sot.candidateId=scut.userId
		WHERE so.shiftOfferId=shiftOffer_Id  and so.status in(7,8,9,14,17)  and sot.status in(7,8,9,14,17)   
       union  
		SELECT sot.candidateId AS sourceCandidateUserId 
			,CONCAT(scut.firstName,' ',scut.lastName) AS sourceCandidateName
			,sot.shiftStartDateTime as sourceshiftStartDateTime
			,sot.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,scu.userId as targetCandidateUserId
			,CONCAT(scu.firstName,' ',scu.lastName) AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime
            ,0 as TotalDeclined 
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId
		LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId
		left join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
		left  JOIN scUser scut ON sot.candidateId=scut.userId
		WHERE so.shiftOfferId=shiftOffer_Id  and so.status in(22,30,16,29)   and sot.status in(22,30,16,29)     
       )a    
    
    
elseif search_Type=2 then
	 select *  , found_rows() as Total 
      from (
		SELECT so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,ga.candidateId as targetCandidateUserId
			,CONCAT(scut.firstName,' ',scut.lastName) AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime    
			 -- ,0 -- ,(select count(*) from candidateGiveAwayRequests g where so.shiftOfferId=g.shiftOfferId and status in (6)) 
            --  as TotalDeclined              
            ,0 as TotalDeclined
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId 
		left join candidateGiveAwayRequests ga on so.shiftOfferId=ga.shiftOfferId
		INNER JOIN scUser scut ON ga.candidateId=scut.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id 
        and case when shift_status=2 then   (so.status in(19,27,23) or ga.status in(19,27,23))
        when shift_status=3 then (so.status In(33,22,23) or ga.status In(33,22,23))
        when shift_status=4 then (so.status In(21) or ga.status in(21)) 
        else so.status in(4,5,6,18,19,20,21,23,27,28,31,32,33) end 
        union 
        SELECT so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,sot.candidateId as targetCandidateUserId
			,CONCAT(scut.firstName,' ',scut.lastName) AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime    
			 -- ,0 -- ,(select count(*) from candidateGiveAwayRequests g where so.shiftOfferId=g.shiftOfferId and status in (6)) 
            --  as TotalDeclined              
            ,0 as TotalDeclined
		FROM candidateShiftOffer so
		INNER JOIN scUser scu ON so.candidateId=scu.userId  
        left join candidateShiftOffer sot on so.exchangedShiftOfferId=sot.shiftOfferId
		INNER JOIN scUser scut ON  sot.candidateId=scut.userId -- ga.candidateId=scut.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id 
        and   so.status In(33,22,23)  
	 )a  
    
    /*
    select *  , found_rows() as Total 
    from (
		SELECT so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,so.candidateId as targetCandidateUserId
			,CONCAT(scu.firstName,' ',scu.lastName)  AS targetCandidateName
			,so.shiftStartDateTime as targetShiftStartDateTime
			,so.shiftEndDateTime as targetShiftEndDateTime
			,0 as TotalDeclined
		FROM candidateShiftOffer so 
		INNER JOIN scUser scu ON so.candidateId=scu.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id )a  	 
       */
elseif search_Type=3 then
	select *  , found_rows() as Total 
    from (
		SELECT so.candidateId AS sourceCandidateUserId 
			,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
			,so.shiftStartDateTime as sourceshiftStartDateTime
			,so.shiftEndDateTime as sourceshiftEndDateTime
			,scu.RoleCategoryId
			,b.businessName
			,user_Id as targetCandidateUserId
			,user_name AS targetCandidateName
			,shift_time as targetShiftStartDateTime
			,shift_time as targetShiftEndDateTime
			,0 as TotalDeclined
		FROM candidateShiftOffer so 
		INNER JOIN scUser scu ON so.candidateId=scu.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id )a  	
elseif search_Type=4 then
	select * , found_rows() as Total 
    from (
		select lmc.candidateUserId AS sourceCandidateUserId 
					,CONCAT(scu.firstName,' ',scu.lastName) AS sourceCandidateName
					,so.shiftStartDateTime as sourceshiftStartDateTime
					,so.shiftEndDateTime as sourceshiftEndDateTime
					,scu.RoleCategoryId
					,b.businessName
					,user_Id as targetCandidateUserId
					,user_name AS targetCandidateName
					,shift_time as targetShiftStartDateTime
					,shift_time as targetShiftEndDateTime
					,(select count(1) from lastMinuteHire lm1 
						inner join lastMinuteHireCandidate lmc1 on lm1.lastMinuteHireId=lmc1.lastMinuteHireId
						where candidateStatus =4 and lm1.shiftOfferId=lm.shiftOfferId) as TotalDeclined 
		from lastMinuteHire lm 
		inner join lastMinuteHireCandidate lmc on lm.lastMinuteHireId=lmc.lastMinuteHireId
		inner join candidateShiftOffer so on so.shiftOfferId=lm.shiftOfferId
		INNER JOIN scUser scu ON so.candidateId=scu.userId 
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN business b ON bs.businessId=b.businessId 
		WHERE so.shiftOfferId=shiftOffer_Id )a

end if 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTestOfflineSync` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTestOfflineSync`(
syncByDateTime datetime
)
BEGIN
	
    select id,sampleText, guid 
    from testOfflineSync 
    where coalesce(createdOn, updatedOn) >= coalesce(syncByDateTime,createdOn, updatedOn)

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTimeSheetComments` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTimeSheetComments`(
IN timeSheet_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get timesheet comments
*/
	SELECT ctc.timeSheetCommentId,ctc.timeSheetId,ctc.userId,ctc.COMMENT,ctc.createdDate,
	CONCAT(scu.firstName,' ',scu.lastName) AS employeeName,
	upi.imagePath,ctc.isUnread
	FROM candidateTimesheetComments ctc
	INNER JOIN scUser scu ON ctc.userId=scu.userId
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	WHERE timeSheetId=timeSheet_Id ORDER BY createdDate
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTimesheetDetailsForManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTimesheetDetailsForManager`(
  IN	manager_Id BIGINT(20),
  IN	candidateUser_Id BIGINT(20),
  IN	businessSite_Id	BIGINT(20),
  IN	department_Id BIGINT(20),
  IN	subClassification_Id BIGINT(20),
  IN	start_Date DATE,
  IN 	end_Date   date
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get timesheet details for manager
*/ 
	DECLARE fullTime_OTLimit INT
	DECLARE partTime_OTLimit INT
	DECLARE casual_OTLimit INT
	DECLARE use_OvertimeIndicator BIT
	DECLARE approve_Hours_Req BIT(1)
	 
	
	DECLARE is_Overtime BIT(1)
                
	SET is_Overtime=0
	 
	SELECT fullTimeOTLimit,partTimeOTLimit,casualOTLimit,useOvertimeIndicator,approveHoursReq
	INTO fullTime_OTLimit,partTime_OTLimit,casual_OTLimit,use_OvertimeIndicator,approve_Hours_Req
	FROM businessSettings
	WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
	
	SET @totalCandidateHours=0.0
	
	SELECT DISTINCT start_Date AS weekStartDate,
	end_Date AS weekEndDate,
	DATE(so.shiftStartDateTime) AS shiftDate,
	so.shiftOfferId,
	so.candidateId,
	CONCAT(scu.firstName,' ',scu.lastName) AS candidateName,
	so.shiftStartDateTime,
	so.shiftEndDateTime,
	so.status,
	@totalCandidateHours:=round(GetCandidateTotalHoursForWeekByDate(so.candidateId,DATE(so.shiftStartDateTime),so.businessSiteId,manager_Id),2) AS totalWeekHours,
	CheckCandidateOverTime(etl.employmentType,@totalCandidateHours,so.businessSiteId,so.departmentId,use_OvertimeIndicator) AS isOverTime,
	sb.startTime AS breakStartTime,
	sb.endTime AS breakEndTime,
	sb.shiftbreakId,
	sb.breakType,
	so.actualShiftStartDateTime,
	so.actualShiftEndDateTime,
	ct.shiftStartDateTime AS candidateShiftStartDateTime,
	ct.shiftEndDateTime AS candidateShiftEndDateTime,
	CASE WHEN ct.status=1 AND approve_Hours_Req=0 THEN 34 ELSE ct.status END AS timeSheetStatus,
	upi.imagePath,
	so.isNotified,
	b.businessName
    ,case when (so.shiftEndDateTime < DATE_ADD(utc_timestamp(),INTERVAL timeDiffInMinutes minute)) then 1 else 0 end as shiftTimeOver
    ,so.isFlexibleShiftTime
    ,so.shiftEndTimeType
	,so.shiftEndTimeValue
	FROM candidateShiftOffer so
	LEFT JOIN candidateShiftBreaks sb ON so.shiftOfferId=sb.shiftOfferId AND sb.isDeleted=0
	INNER JOIN scUser scu ON so.candidateId=scu.userId
	LEFT JOIN userProfileImage upi ON scu.userId=upi.userId
	LEFT JOIN vwCandidateRosterDetails crd ON crd.candidateId=scu.userId AND so.businessSiteId=crd.businessSiteId AND so.departmentId=crd.departmentId AND so.subClassificationId=crd.jobSubClassificationId
	LEFT JOIN jobProfile jp ON crd.jobProfileId=jp.jobProfileId
	LEFT JOIN employmentTypeLocale etl ON jp.employmentTypeId=etl.employmentTypeId
	INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId AND so.isDeleted=0
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	INNER JOIN businessSite bs ON cbs.businessSiteId=bs.businessSiteId
	INNER JOIN business b ON bs.businessId=b.businessId
     left join timeZone tz on b.timeZoneId = tz.timeZoneId
	WHERE so.candidateId=candidateUser_Id AND date(so.shiftStartDateTime) <= date(end_Date)
			AND date(so.shiftEndDateTime) >= date(start_Date) AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
		AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
		AND so.isDeleted=0 AND so.status NOT IN (10,19,33,36,60,62)
	ORDER BY so.shiftStartDateTime,sb.startTime
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTimeSheetForCandidatePerShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTimeSheetForCandidatePerShift`(
in candidateUser_Id BIGINT(20),
in shiftOffer_Id BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get timesheet for candidate per shift
*/
	SELECT so.candidateId,
	so.shiftofferId,
	CONVERT(so.shiftStartDateTime, DATE) AS shiftDate,
	DAYNAME(so.shiftStartDateTime) AS shiftDay,
	so.shiftStartDateTime AS shiftRosterStartDateTime,
	so.shiftEndDateTime AS shiftRosterEndDateTime,
	ct.shiftStartDateTime AS shiftCandidateStartDateTime,
	ct.shiftEndDateTime AS shiftCandidateEndDateTime,
	sl.statusName AS timesheetStatus,
	ct.costcenterParentId,
	ct.candidateComment,
	ct.disputeComment,
	ct.timeSheetId
    ,so.actualShiftStartDateTime as shiftActualStartDateTime
	,so.actualShiftEndDateTime as shiftActualEndDateTime
    ,so.isFlexibleShiftTime
    ,so.shiftEndTimeType
	,so.shiftEndTimeValue
	FROM candidateShiftOffer so
	INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId
	INNER JOIN statusLookup sl ON ct.status=sl.statusId
	WHERE so.shiftOfferId=shiftOffer_Id 
		AND so.isDeleted=0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTimeSheetFormat` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTimeSheetFormat`( IN language_Id bigint(20) )
BEGIN
/*
 Author		: Tijo
 Date  		: 11-11-2015
 Description: time sheet format
 */
	select   timeSheetFormatId ,   timeSheetFormat
	from timeSheetFormatLocale where languageId =language_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTimeSheetWeekEnd` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTimeSheetWeekEnd`( IN language_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : time sheet wwek end
 call GetTimeSheetWeekEnd(264)
*/

	select ts.weekEndDayId
		  ,weekEndDay
		from timeSheetweekEnd ts
        inner join timeSheetweekEndLocale l on l.weekEndDayId = ts.weekEndDayId
        where languageId =language_Id 
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTimeZone` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTimeZone`( IN language_Id bigint(20) )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Time zone details
*/
	select t.timeZoneId
		  ,tl.timeZoneName
          ,timeZoneGMT
          ,tl.timeZoneFormat
		from timeZone t
        inner join timeZoneLocale tl on t.timeZoneId = tl.timeZoneId
        where languageId =language_Id 
        order by sortOrder 
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTotalRecord` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTotalRecord`(
	IN Id	 bigint(20)
   ,IN documentType_Id	smallint(6) 
   ,IN type_Id	tinyInt
)
BEGIN
	/*
	 Author: James
	 Date  : 12/12/2014
	 Description : Get Candidate Document count
	
    Type_id 1-- candidate document
			2-- Candidate Qualification Document
            3-- candidate prefered country document            
			4--	Experience skills
            5-- Soft skills
            6-- Candidate Experience
            7-- candidate Qualification
            8-- Candidate Preference
            9-- Career
            10-- Candidate Profile Document
            11-- DL , SSnNo & other
            12-- Job Qualification
            13-- candidate prefered country 
    */ 

select Total from (
			select count(1)Total, 1 as typeId from candidateDocument
			where candidateUserId=Id and documentTypeId=documentType_Id and isDeleted=0 and fileStatus=1
				union all 
			select count(1)Total, 2 as typeId  from candidateQualificationDocument cqd 
			inner join candidateQualification cq on cqd.candidateQualificationId=cq.candidateQualificationId
			where cq.candidateUserId=Id and cqd.isDeleted=0 
				union all  
			select count(1)Total, 3 as typeId  from candidatePreferredCountryDocument cpd 
			inner join candidatePreferredCountry cpc on cpd.candidatePreferredCountryId=cpd.candidatePreferredCountryId
			where cpc.candidateUserId=Id and cpd.isDeleted=0 
				union all 
			select count(1)Total, 4 as typeId  from candidateEmpProfileExpSkill
			where  candidateEmpProfileExpId=Id and isDeleted=0
				union all 
			select count(1)Total, 5 as typeId  from candidateEmpDefinedSkill
			where  candidateUserId=Id and isDeleted=0
				union all
			select count(1)Total, 6 as typeId  from candidateEmpProfileExperience
			where  candidateEmpProfileId=Id and isDeleted=0 
				union all
			select count(1)Total, 7 as typeId  from candidateQualification
			where  candidateUserId=Id and isDeleted=0 
				union all
			select count(1)Total , 8 as typeId  from candidateEmpProfilePreference cpp 
			where cpp.candidateUserId=Id and cpp.isDeleted=0  
				union all
			select count(1) Total, 9 as typeId  from candidateEmpProfile cep 
			where cep.candidateUserId=Id and cep.isDeleted=0 
				union all
			select count(1) Total, 10 as typeId  from   candidateEmpProfileDocument
			where candidateEmpProfileId=Id and isDeleted=0 
                 union all
			select count(1)Total, 11 as typeId  from candidateDocument
			where candidateUserId=Id and documentTypeId  in(2,3,8) and isDeleted=0  
				union all
			select count(1)Total, 12 as typeId  from jobProfileQualification
			where jobProfileId=Id 
                union all 
			select count(1)Total, 13 as typeId  from candidatePreferredCountry
			where candidateUserId=Id and isDeleted=0   
)a where typeId=type_Id 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetTypeOfVisa` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetTypeOfVisa`( IN country_Id bigint(20) , IN language_Id bigint(20) )
BEGIN
/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Type of visa details
*/
	select typeOfVisaId
		  ,typeOfVisaName
		from typeOfVisa where languageId =language_Id and countryId= country_Id
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUnavailabilityForCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUnavailabilityForCandidate`(
IN candidateUser_Id BIGINT(20),
in unavailable_Date date
)
BEGIN

/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get unavailability for candidate
*/
	IF unavailable_Date IS NULL THEN
		SELECT unavailabilityId,candidateId,unavailableDate,startTime,endTime,reason,
		CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 1
			ELSE 0
		END AS isAllDay,'UNAVAILABLE' AS STATUS
		FROM candidateUnavailability
		WHERE candidateId=candidateUser_Id AND isDeleted=0
		UNION
		SELECT shiftOfferId,candidateId,DATE(shiftStartDateTime) AS unavailableDate,TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime,
		'' AS reason,0 AS isAllDay,'SHIFT' AS STATUS
		FROM candidateShiftOffer
		WHERE candidateId=candidateUser_Id AND STATUS NOT IN (3,10,19,33,36,38,42,47,60,62) AND isDeleted=0
	ELSE
		SELECT unavailabilityId,candidateId,unavailableDate,startTime,endTime,reason,
		CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 1
			ELSE 0
		END AS isAllDay,'UNAVAILABLE' AS STATUS
		FROM candidateUnavailability
		WHERE candidateId=candidateUser_Id AND unavailableDate=unavailable_Date AND isDeleted=0
		UNION
		SELECT shiftOfferId,candidateId,DATE(shiftStartDateTime) AS unavailableDate,TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime,
		'' AS reason,0 AS isAllDay,'SHIFT' AS STATUS
		FROM candidateShiftOffer
		WHERE candidateId=candidateUser_Id AND STATUS NOT IN (3,10,19,33,36,38,42,47,60,62) AND DATE(shiftStartDateTime)=unavailable_Date AND isDeleted=0
	END IF
	-- and weekStartDate<=endDateTime and weekEndDate>=startDateTime
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUnavailabilityForCandidateWithinDateRange` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUnavailabilityForCandidateWithinDateRange`(
IN candidateUser_Id BIGINT(20),
in unavailable_Start_Date date,
in unavailable_End_Date date
)
BEGIN
/*
 Author: Gomtesh
 Date  : 05/02/2016
 Description : Get unavailability for candidate between given date range
*/

SELECT unavailabilityId,candidateId,unavailableDate,startTime,endTime,reason,
CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 1
			ELSE 0
END AS isAllDay,'UNAVAILABLE' AS STATUS
FROM candidateUnavailability
WHERE candidateId=candidateUser_Id 
AND isDeleted=0
AND CASE
		WHEN unavailable_Start_Date IS NULL AND unavailable_End_Date IS NULL THEN 1=1
		WHEN unavailable_Start_Date IS NOT NULL AND unavailable_End_Date IS NULL THEN unavailableDate >= unavailable_Start_Date
		WHEN unavailable_Start_Date IS NULL AND unavailable_End_Date IS NOT NULL THEN unavailableDate <= unavailable_End_Date
		ELSE  (unavailableDate >= unavailable_Start_Date AND unavailableDate <= unavailable_End_Date)
      END
UNION
SELECT shiftOfferId,candidateId,DATE(shiftStartDateTime) AS unavailableDate,TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime,
'' AS reason,0 AS isAllDay,'SHIFT' AS STATUS
FROM candidateShiftOffer
WHERE candidateId=candidateUser_Id AND STATUS NOT IN (3,10,19,33,36,38,42,47,60,62) AND isDeleted=0
AND CASE
		WHEN unavailable_Start_Date IS NULL AND unavailable_End_Date IS NULL THEN 1=1
		WHEN unavailable_Start_Date IS NOT NULL AND unavailable_End_Date IS NULL THEN DATE(shiftStartDateTime) >= unavailable_Start_Date
		WHEN unavailable_Start_Date IS NULL AND unavailable_End_Date IS NOT NULL THEN DATE(shiftStartDateTime) <= unavailable_End_Date
		ELSE DATE(shiftStartDateTime) BETWEEN unavailable_Start_Date AND unavailable_End_Date
      END
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUnavailabilityOfCandidateForMonth` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUnavailabilityOfCandidateForMonth`(
IN candidateUser_Id BIGINT(20),
in monthDate date
)
BEGIN

/*
 Author: Gomtesh
 Date  : 08/02/2016
 Description : Get unavailability for candidate between given date range
*/

DECLARE monthStartDate DATE
DECLARE monthEndDate DATE

SET monthStartDate=DATE_ADD(DATE_ADD(LAST_DAY(monthDate),INTERVAL 1 DAY),INTERVAL -1 MONTH)
SET monthEndDate=LAST_DAY(monthDate)

SELECT unavailabilityId,candidateId,unavailableDate,startTime,endTime,reason,
CASE WHEN ADDTIME(TIMEDIFF(endTime, startTime),'00:01:00')='24:00:00' THEN 1
			ELSE 0
END AS isAllDay,'UNAVAILABLE' AS STATUS
FROM candidateUnavailability
WHERE candidateId=candidateUser_Id 
AND isDeleted=0
AND unavailableDate BETWEEN monthStartDate AND monthEndDate

UNION
SELECT shiftOfferId,candidateId,DATE(shiftStartDateTime) AS unavailableDate,TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime,
'' AS reason,0 AS isAllDay,'SHIFT' AS STATUS
FROM candidateShiftOffer
WHERE
candidateId=candidateUser_Id AND STATUS NOT IN (3,10,19,33,36,38,42,47,60)
AND isDeleted=0
AND DATE(shiftStartDateTime) BETWEEN monthStartDate AND monthEndDate


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUploadedCandidateDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUploadedCandidateDetails`(in file_Id bigint(20)  , IN is_Processed tinyint(6))
BEGIN

/*
 Author: James
 Date  : 02/12/2014
 Description : Updating scUserTemp
*/

/*
	IsProcessed code
		0 - insert
        1 - error
        2 - processed
        
  */



		select 	
            	firstName
			,	middleName
			,	lastName
            ,	emailId			
            ,   password
            ,   userUIId
            , 	recordStatus
         
			,	gender
			,	mobileNo
			,	dob            
			,	streetAddressLine1
			,	streetAddressLine2
			,	city
			,	state
			,	postCode
			,	country
            ,  case when recordStatus=1 then "Error" when recordStatus=2 then "Successfull" end ProcesStatus
			,	errorMessage
            ,userId
            ,encryptionKey
	from candidateTemp
	where fileId=file_Id and recordStatus=coalesce( is_Processed, recordStatus)
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserBusinessClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserBusinessClaim`(
	 IN user_Id		Bigint
	,IN Id		bigint
	,IN claim_Id	bigint
    ,IN type_Id tinyint
)
BEGIN

/*
Type_Id -- 1 - businessId, 2-- Site_Id , 3 -- JobProfileHireRequestId, 4 -- Site_Id Null for Job Profile
5--userRoleSite_Id
*/

declare roleCategory_Id bigint
declare site_Id bigint

set roleCategory_Id=(select RoleCategoryId from scUser where userId=user_Id)

	if roleCategory_Id=3 then

	-- 	set site_Id=( select businessSiteId from businessSite where businessId=Id and parentBusinessSiteId is null)

		select claimId  from userRoleBusinessSite urbs 
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and urbs.isDeleted=0 -- and ur.isDeleted=0
		inner join businessSiteRoleClaim bsrc on urbs.businessSiteId=bsrc.businessSiteId and bsrc.roleId=ur.roleId  and bsrc.isDeleted=0
		where userId=user_Id 
        and case when type_Id=1 then urbs.businessSiteId=coalesce(( select businessSiteId from businessSite where businessId=Id and parentBusinessSiteId is null), urbs.businessSiteId) 
				 when type_Id=2 then  urbs.businessSiteId=coalesce(Id, urbs.businessSiteId) 
                 when type_Id=3 then urbs.businessSiteId=( select jpbs.businessSiteId from jobProfileHireRequest jphr inner join jobProfileBusinessSite jpbs on jphr.jobProfilBusinessSiteId=jpbs.jobProfilBusinessSiteId where jobProfileHireRequestId=Id)
                 when type_Id=4 then urbs.businessSiteId=urbs.businessSiteId
                 when type_Id=5 then urbs.businessSiteId=(select businessSiteId from userRoleBusinessSite  where userRoleBusinessSiteId =Id)
                 
                 end
        and claimId=coalesce(claim_Id, claimId)

	elseif roleCategory_Id=4 then
	-- 	set site_Id=( select agencySiteId from agencySite where agencyId=Id and parentAgencySiteId is null)
        
		select claimId  from userRoleAgencySite uras 
		inner join userRole ur on uras.userRoleId=ur.userRoleId and uras.isDeleted=0 -- and ur.isDeleted=0
		inner join agencySiteRoleClaim asrc on uras.agencySiteId=asrc.agencySiteId and asrc.roleId=ur.roleId  and asrc.isDeleted=0
		where userId=user_Id 
        and case when type_Id=1 then uras.agencySiteId=coalesce(( select agencySiteId from agencySite where agencyId=Id and parentAgencySiteId is null), uras.agencySiteId) 
				 when type_Id=2 then   uras.agencySiteId=coalesce(Id, uras.agencySiteId) 
                 
                 when type_Id=4 then   uras.agencySiteId=uras.agencySiteId
                 when type_Id=5 then   uras.agencySiteId=(select agencySiteId from userRoleAgencySite  where userRoleAgencySiteId =Id)
                 end
         
        and claimId=coalesce(claim_Id, claimId)

	end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserClaim`(
 IN user_Id		Bigint
,IN site_Id		bigint
,IN businessFunction_Id	bigint
)
BEGIN

/*
Author		: Tijo
Date  		: 02/12/2014
Description : user busines functions for partcular site
call est_skillsconnect.GetUserClaim(88)
*/

		select rbf.businessFunctionId , isSpecificToBusiness, urbs.businessSiteId
        from userRoleBusinessSite urbs 
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and urbs.isDeleted=0 -- and ur.isDeleted=0
        inner join roleInfo r on ur.roleId = r.roleId
        inner join businessSite bs on urbs.businessSiteId = bs.businessSiteId
		inner join roleBusinessFunction rbf on bs.businessId=rbf.businessId and rbf.roleId=ur.roleId  and rbf.isDeleted=0    
        inner join businessFunction bf on bf.businessFunctionId = rbf.businessFunctionId
		where userId=user_Id and urbs.businessSiteId=coalesce(site_Id, urbs.businessSiteId) and rbf.businessFunctionId=coalesce(businessFunction_Id, rbf.businessFunctionId)
        and urbs.status =2 and bs.IsDeleted=0 and rbf.isDeleted=0

	


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserClaimSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserClaimSite`(
	IN 	user_Id		bigint
   ,IN 	businessFunction_Ids	nvarchar(2000)
   ,IN  site_Id		bigint
   ,IN  typeId tinyint
)
BEGIN

/*
 Author: James
 Date  : 12/03/2015
 Description : user business function for different site
 call est_skillsconnect.GetUserClaimSite(61, 7, null) 
 call est_skillsconnect.GetUserClaimSite(1, null, 80)

type 1 - with BF, 2- without BF

*/
declare role_CategoryId tinyint 
set role_CategoryId=(select roleCategoryId from scUser where userId=user_Id)


if (typeId =1) then
	if role_CategoryId=3 then
		select distinct urbs.businessSiteId as siteId, bs.siteName , rbf.businessFunctionId
		from userRoleBusinessSite urbs 
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and urbs.isDeleted=0 
        inner join roleInfo r on ur.roleId = r.roleId
        inner join businessSite bs on urbs.businessSiteId = bs.businessSiteId
		inner join roleBusinessFunction rbf on bs.businessId=rbf.businessId and rbf.roleId=ur.roleId  and rbf.isDeleted=0    
        inner join businessFunction bf on bf.businessFunctionId = rbf.businessFunctionId
		where userId=user_Id and urbs.businessSiteId=coalesce(site_Id, urbs.businessSiteId) and find_in_set(rbf.businessFunctionId ,coalesce(businessFunction_Ids, rbf.businessFunctionId))
        and bs.IsDeleted =0 and urbs.IsDeleted =0 and ur.IsDeleted =0 and r.IsDeleted =0 and rbf.IsDeleted =0

	elseif 	role_CategoryId=4 then
		select distinct urbs.agencySiteId as siteId, bs.siteName , rbf.businessFunctionId
        from userRoleAgencySite urbs 
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and urbs.isDeleted=0 
        inner join roleInfo r on ur.roleId = r.roleId
        inner join agencySite bs on urbs.businessSiteId = bs.agencySiteId
		inner join roleBusinessFunction rbf on bs.agencyId=rbf.businessId and rbf.roleId=ur.roleId  and rbf.isDeleted=0    
        inner join businessFunction bf on bf.businessFunctionId = rbf.businessFunctionId
		where userId=user_Id and urbs.agencySiteId=coalesce(site_Id, urbs.agencySiteId) and find_in_set(rbf.businessFunctionId ,coalesce(businessFunction_Ids, rbf.businessFunctionId))
        and bs.IsDeleted =0 and urbs.IsDeleted =0 and ur.IsDeleted =0 and r.IsDeleted =0 and rbf.IsDeleted =0
    end if
else
	if role_CategoryId=3 then
		select distinct urbs.businessSiteId as siteId, bs.siteName 
		from userRoleBusinessSite urbs 
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and urbs.isDeleted=0 
        inner join roleInfo r on ur.roleId = r.roleId
        inner join businessSite bs on urbs.businessSiteId = bs.businessSiteId
		inner join roleBusinessFunction rbf on bs.businessId=rbf.businessId and rbf.roleId=ur.roleId  and rbf.isDeleted=0    
        inner join businessFunction bf on bf.businessFunctionId = rbf.businessFunctionId
		where userId=user_Id and urbs.businessSiteId=coalesce(site_Id, urbs.businessSiteId) and find_in_set(rbf.businessFunctionId ,coalesce(businessFunction_Ids, rbf.businessFunctionId))
        and bs.IsDeleted =0 and urbs.IsDeleted =0 and ur.IsDeleted =0 and r.IsDeleted =0 and rbf.IsDeleted =0

	elseif 	role_CategoryId=4 then
		select distinct urbs.agencySiteId as siteId, bs.siteName 
        from userRoleAgencySite urbs 
		inner join userRole ur on urbs.userRoleId=ur.userRoleId and urbs.isDeleted=0 
        inner join roleInfo r on ur.roleId = r.roleId
        inner join agencySite bs on urbs.agencySiteId = bs.agencySiteId
		inner join roleBusinessFunction rbf on bs.agencyId=rbf.businessId and rbf.roleId=ur.roleId  and rbf.isDeleted=0    
        inner join businessFunction bf on bf.businessFunctionId = rbf.businessFunctionId
		where userId=user_Id and urbs.agencySiteId=coalesce(site_Id, urbs.agencySiteId) and find_in_set(rbf.businessFunctionId ,coalesce(businessFunction_Ids, rbf.businessFunctionId))
        and bs.IsDeleted =0 and urbs.IsDeleted =0 and ur.IsDeleted =0 and r.IsDeleted =0 and rbf.IsDeleted =0
    end if
end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserContact` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserContact`( IN user_ID bigint(20) )
BEGIN

/*
Author		: Tijo
Date  		: 02/12/2014
Description : user contact details
*/	 

select homePhone,workPhone,mobilePhone,fax,u.secondaryEmail,u.emailId ,u.userUIId,u.encryptionKey
from scUser u left join  userContact uc
on uc.userId=u.userId
where u.userId = user_ID AND u.isDeleted=0



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserDefaultCurrency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserDefaultCurrency`( In User_Id bigint, IN language_Id bigint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description :  user default currency depends on the country selected
 call GetUserDefaultCurrency(1,264)
*/

declare role_CategoryId int

set role_CategoryId = (select roleCategoryId from scUser where userId=User_Id)
 
		select distinct c.countryId , c.currencyId, currencyName, code as currencyCode, countryDateFormat,weekStartDayId,countryName
		from candidateDetail	cd
		inner join currency c on c.countryId = cd.countryId
		inner join currencyLocale cl on c.currencyId = cl.currencyId and cl.languageId = language_Id
		inner join country co on co.countryId = cd.countryId
        inner join countryLocale ccl on ccl.countryId=cd.countryId and ccl.languageId = language_Id
		and cd.candidateUserId =User_Id and role_CategoryId =2 
	union all 
		select distinct c.countryId , c.currencyId, currencyName, code as currencyCode , countryDateFormat,weekStartDayId,countryName
		from userRole ucs left join userRoleBusinessSite ucsb 	on ucs.userRoleId=ucsb.userRoleId
		left join businessSite bs on bs.businessSiteId=ucsb.businessSiteId
		left join business b on bs.businessId=b.businessId
		inner join currency c on c.countryId = b.countryId
		inner join currencyLocale cl on c.currencyId = cl.currencyId and cl.languageId = language_Id
		inner join country co on b.countryId = co.countryId
        inner join countryLocale ccl on ccl.countryId=b.countryId and ccl.languageId = language_Id
		where userId=User_Id and role_CategoryId =3 
	union all 
		select distinct c.countryId , c.currencyId, currencyName, code as currencyCode , countryDateFormat,weekStartDayId,countryName
		from userRole ucs left join userRoleAgencySite ucsa	on ucs.userRoleId=ucsa.userRoleId
		left join agencySite ags on ags.agencySiteId=ucsa.agencySiteId
		left join agency a on ags.agencyId=a.agencyId
		inner join currency c on c.countryId = a.countryId
		inner join currencyLocale cl on c.currencyId = cl.currencyId and cl.languageId = language_Id
		inner join country co on c.countryId = co.countryId
        inner join countryLocale ccl on ccl.countryId=a.countryId and ccl.languageId = language_Id
		where userId=User_Id and role_CategoryId =4
        
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserDetails`( IN User_Id bigint )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : User details
 call GetUserDetails(1)
*/

		
		  select 
         userUIId 
				,firstName 
				,middleName 
				,lastName  
                ,emailId
                ,encryptionKey
				from scUser    
				where userID = User_ID
			

			


		
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserDetailsByName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserDetailsByName`(
 in  first_Name varchar(100)
,in  last_Name varchar(100)
)
BEGIN
/*
 Author: James
 Date  : 17/03/2016
 Description : Get user details
*/

select u.userId
	,firstName
    ,lastName
    ,emailId
    ,genderId
    ,dob 
    ,encryptionKey
    ,nationalityId
    ,middleName
   
from scUser u 
inner join candidateDetail cd  on u.userId=cd.candidateUserId
where firstName=first_Name and lastName=last_Name and u.isDeleted=0


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserDeviceDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserDeviceDetails`(
 IN user_ids nvarchar(2000)
,IN type_id int
,IN roleCategoryId tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : User device details and count for dashboard
*/

declare type_Count int
declare total_Count int

if (roleCategoryId=3) then
	set total_Count =   (select GetCountBusinessCriticalShiftChanges(user_ids)) +
						(select GetCountBusinessDisputedTimesheets(user_ids)) +
						(select GetCountBusinessJobMatch(user_ids)) +
						(select GetCountBusinessJobProfileExpiring(user_ids)) +
						(select GetCountBusinessLastMinuteHireCount(user_ids)) +
						(select GetCountBusinessNewHireRequest(user_ids)) +
						(select GetCountBusinessNewHires(user_ids)) +
						(select GetCountBusinessOutstandingApprovals(user_ids)) +
						(select GetCountBusinessShiftChanges(user_ids)) 
                        
	if (type_id = 1) then
		set type_Count = (select GetCountBusinessCriticalShiftChanges(user_ids))
    else if (type_id = 2) then
		set type_Count = (select GetCountBusinessDisputedTimesheets(user_ids))
    else if (type_id = 3) then
		set type_Count = (select GetCountBusinessJobMatch(user_ids))
    else if (type_id = 4) then
		set type_Count = (select GetCountBusinessJobProfileExpiring(user_ids))
    else if (type_id = 5) then
		set type_Count = (select GetCountBusinessLastMinuteHireCount(user_ids))
    else if (type_id = 6) then
		set type_Count = (select GetCountBusinessNewHireRequest(user_ids))
    else if (type_id = 7) then
		set type_Count = (select GetCountBusinessNewHires(user_ids))
    else if (type_id = 8) then
		set type_Count = (select GetCountBusinessOutstandingApprovals(user_ids))
    else if (type_id = 9) then
		set type_Count = (select GetCountBusinessShiftChanges(user_ids))
    
    end if
    end if
    end if
    end if
    end if
    end if
    end if
    end if
    end if
                  
else if (roleCategoryId=2) then
	set total_Count =   (select GetCountCandidateJobMatches(user_ids)) +
						(select GetCountCandidateLastMinuteHire(user_ids)) +
						(select GetCountCandidateShiftOffer(user_ids)) +
						(select GetCountCandidateTimeSheet(user_ids)) 
                        
	 if (type_id = 10) then
		set type_Count = (select GetCountCandidateJobMatches(user_ids))
    else if (type_id = 11) then
		set type_Count = (select GetCountCandidateLastMinuteHire(user_ids))
    else if (type_id = 12) then
		set type_Count = (select GetCountCandidateShiftOffer(user_ids))
	else if (type_id = 13) then
		set type_Count = (select GetCountCandidateTimeSheet(user_ids))
        
	end if
    end if
    end if
    end if
    
end if
end if



/*
	select   userID 
			,deviceTypeID 
			,deviceToken
            ,type_Count
            ,total_Count
    from userDevice
    where find_in_set(userID, user_ids) and isDeleted =0
 */   
select u.userId 
	,deviceTypeID 
	,deviceToken 
	,type_Count
	,total_Count
    ,uc.mobilePhone
    ,u.encryptionKey
    ,u.emailId
    ,u.firstName
    ,u.lastName
    ,deviceId
    ,shiftOfferNFSentTime
    ,viewShiftOffers
from scUser u 
left join userDevice ud on u.userId=ud.userID and ud.isDeleted=0
left join userContact uc on u.userId=uc.userID and uc.isDeleted=0
where find_in_set(u.userId, user_ids) and u.isDeleted=0 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserForceLogOut` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserForceLogOut`(
 IN user_Id bigint(20)
,IN deviceType_Id smallint(6)
,IN device_Id varchar(200)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 21/04/2016
 Description : Get User ForceLogOut latch
 call GetUserForceLogOut(3897,1,'00000000-2c5e-cef0-ffff-ffffdae32e69')
*/
	SELECT 
    isForceLogOut
FROM
    userDevice
WHERE
    userID = user_Id
        AND deviceTypeID = deviceType_Id
        AND deviceId = device_Id
        AND isDeleted = 0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserLastLogin` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserLastLogin`(
 in user_Id varchar(10000)
,in businessSite_Id bigint(20)
, in language_Id bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 12/04/2016
 Description : insert & update user last login details
*/
DECLARE timeDiff_InMinutes INT(11)

	select tz.timeDiffInMinutes into timeDiff_InMinutes from businessSite bs  
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
    where bs.businessSiteId=businessSite_Id

	select userId,ul.deviceTypeId,dt.deviceType,DATE_ADD(lastLoginTime, INTERVAL timeDiff_InMinutes MINUTE) as lastLoginTime
    from userLastLogin ul
	inner join deviceTypeLocale dt on dt.deviceTypeID=ul.deviceTypeId and dt.languageId=language_Id
	where find_in_set(userId,user_Id )
	order by userId,lastLoginTime desc  


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserName`(
IN UserIds nvarchar(5000)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  :  16-01-2015
 Description :  User name details
 call GetUserName('1,2,3,4')
*/

	select 
     firstName 
	,middleName 
	,lastName 
	,emailId
	from
    scUser where find_in_set(userId, UserIds) and isDeleted =0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserProfilePicture` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserProfilePicture`(
IN user_Id varchar(10000) 
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : User profile picture
 call GetUserProfilePicture(1)
*/

select userId ,imageName  ,imagePath ,imageMimeType ,eTag ,fileStatus 
from userProfileImage
where  find_in_set( userId, user_Id) and isDeleted = 0

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserRoleCategory` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserRoleCategory`(IN user_Id bigint(20))
BEGIN


/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : User role category
*/

	select RoleCategoryId from scUser where userId= user_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserRoleCategoryPassword` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserRoleCategoryPassword`( 
IN Email_ID varchar(200) 
,IN user_Id	bigint
,IN deviceType_Id smallint(6)
,IN device_Id varchar(200)
)
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Used for caching
*/


		
		  select 
				 u.RoleCategoryId
				,rc.RoleCategory
				,u.UserPassword
                ,u.userId
                ,ud.isForceLogOut
				from scUser u
				inner join roleCategory rc on u.RoleCategoryId = rc.RoleCategoryId
                left join userDevice ud on (u.userId = ud.userID AND ud.deviceTypeID = deviceType_Id AND ud.deviceId = device_Id
                AND ud.isDeleted = 0)
				where EmailId = coalesce(Email_ID,EmailId) and u.userId=coalesce(user_Id,u.userId) 
                and u.isDeleted=0 and u.status=2  
		
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserSiteAcess` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserSiteAcess`(
in user_Id bigint
,IN language_Id bigint(20))
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : User Site Acess
 call GetUserSiteAcess(29)
*/
declare departmentGroupName_Id tinyint(4)

    SELECT   distinct  ucs.RoleId as claimSetId 
			, a.agencyId as BusinessId
            , ag.agencyName as BusinessName
			, cas.agencySiteId  as SiteId 
			, a.siteName
            , null as workFlowId
            , ag.haveSite
            , case when (ag.isOtherGroupName =1) then ag.otherGroupName else groupName end as groupName
            , ag.groupNameId
            , roleName
            , departmentGroupName_Id as departmentGroupNameId
            , null as departmentGroupName
			, null as jobClassificationId
            , null as otherJobClassification
            , null as jobClassification
            , null as departmentIdForGeneral 
	from userRole ucs 
	inner join userRoleAgencySite cas on cas.userRoleId = ucs.userRoleId and ucs.RoleCategoryId = 4 and cas.status=2
	inner join agencySite a on a.agencySiteId = cas.agencySiteId
    inner join agency ag on a.agencyId = ag.agencyId
    left join groupNameLocale gn on gn.groupNameId = ag.groupNameId and gn.languageId=language_Id
    left join roleInfoLocale rl on ucs.RoleId = rl.RoleId and rl.languageId = language_Id
	where ucs.userId = user_Id 
    and ucs.RoleCategoryId = 4 and ucs.isDeleted = 0 and cas.isDeleted = 0 and a.isDeleted =0 and ag.isDeleted = 0 and cas.isDeleted =0

	union all

	SELECT    ucs.RoleId as claimSetId 
			, bs.businessId as BusinessId
            , b.businessName as BusinessName
			, cbs.businessSiteId as SiteId 
			, bs.siteName
            , workFlowId
            , b.haveSite
            , case when (b.isOtherGroupName =1) then b.otherGroupName else groupName end as groupName
            , b.groupNameId
            , roleName
            , b.departmentGroupNameId
            , dg.departmentGroupName
            , b.jobClassificationId
            , b.otherJobClassification
            , jcl.jobClassification
            , bd.departmentId as departmentIdForGeneral 
	from userRole ucs 
	inner join userRoleBusinessSite cbs on cbs.userRoleId = ucs.userRoleId and ucs.RoleCategoryId = 3 and cbs.status=2
	inner join businessSite bs on bs.businessSiteId = cbs.businessSiteId
	inner join business b on b.businessId = bs.businessId
    left join groupNameLocale gn on gn.groupNameId = b.groupNameId and gn.languageId=language_Id
    left join roleInfoLocale rl on ucs.RoleId = rl.RoleId and rl.languageId = language_Id
    left join departmentGroupNameLocale dg on dg.departmentGroupNameId=b.departmentGroupNameId and dg.languageId=language_Id
	left join jobClassificationLocale jcl on b.jobClassificationId=jcl.jobClassificationId and jcl.languageId=language_Id
    left join businessDepartment bd on bd.businessId=b.businessId and bd.departmentName='general'
    where ucs.userId = user_Id and ucs.RoleCategoryId = 3
    and ucs.isDeleted = 0 and cbs.isDeleted = 0 and bs.isDeleted =0 and b.isDeleted = 0 and cbs.isDeleted =0 

	


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserStatus`(
IN user_Id bigint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : User status
*/


select status from scUser
where userId=user_Id and  isDeleted=0 and status=2 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserStep` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserStep`(IN User_Id bigint)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : User step
*/


declare userRoleCategory TINYINT
declare site_Id bigint
set userRoleCategory = (select RoleCategoryId from scUser where userId = User_Id)
 

set site_Id=(    
		select distinct  s.businessId from userRole ucs 
		inner join userRoleBusinessSite cas on cas.userRoleId = ucs.userRoleId and ucs.userId = User_Id and cas.isDeleted =0
		inner join businessSite s on s.businessSiteId = cas.businessSiteId
		where userRoleCategory = 3
			union all     
		select distinct  s.agencyId from userRole ucs 
		inner join userRoleAgencySite cas on cas.userRoleId = ucs.userRoleId and ucs.userId = User_Id and cas.isDeleted =0
		inner join agencySite s on s.agencySiteId = cas.agencySiteId
		where userRoleCategory = 4
		)
 
	 
	 select step2,step3,step4,step5,step6 from (
		select businessId, case when stepNo=1 then 2 else 0 end as step1
		,max(case when stepNo=2 then 2 else 0 end) as step2
		,max(case when stepNo=3 then 2 else 0 end) as step3
		,max(case when stepNo=4 then 2 else 0 end) as step4
		,max(case when stepNo=5 then 2 else 0 end) as step5
		,max(case when stepNo=6 then 2 else 0 end) as step6 
		from businessStepCompletion 
		where businessId=site_Id and isCompleted=1 and userRoleCategory = 3
		group by businessId )a
 
 union all 
    
	select step2,step3,step4,step5,step6 from (
		select agencyId, case when stepNo=1 then 2 else 0 end as step1
		,max(case when stepNo=2 then 2 else 0 end) as step2
		,max(case when stepNo=3 then 2 else 0 end) as step3
		,max(case when stepNo=4 then 2 else 0 end) as step4
		,max(case when stepNo=5 then 2 else 0 end) as step5
		,max(case when stepNo=6 then 2 else 0 end) as step6 
		from agencyStepCompletion 
		where agencyId=site_Id and isCompleted=1 and userRoleCategory = 4
		group by agencyId )a
	
 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserTimeSheetDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserTimeSheetDetails`( IN timeSheet_Id bigint(20) , IN user_Id bigint(20) , IN job_Id bigint(20) , IN timeSheet_StartDate bigint(20) , IN timeSheet_EndDate bigint(20) )
BEGIN

/*
 Author: Ecanarys
 Date  : 
 Description : 
 */
	
	select   timeSheetId 
			,userId 
			,jobId  
			,businessSiteId  
			,agencySiteId  
			,timeSheetDate 
			,timeSheetDateOffset  
			,timeSheetDateTimeZoneId 
			,timeSheetStartTime 
			,timeSheetEndTime  
			,approvedBy  
			,approvedDate 
			,approvedDateOffset  
			,approvedDateTimeZoneId 
			,timeSheetStatusId 
			,timeSheetCreatedOn 
			,timeSheetCreatedOffset 
			,timeSheetCreatedTimeZoneId 
	from timeSheet t
	where userId =user_Id and jobId =job_Id and timeSheetDate between timeSheet_StartDate and timeSheet_EndDate
	and timeSheetId = coalesce(timeSheet_Id,t.timeSheetId)

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetUserTimeSheetDetailsMobile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetUserTimeSheetDetailsMobile`( IN user_Id bigint(20) , IN timeSheet_Date bigint(20) )
BEGIN
/*
 Author: Ecanarys
 Date  : 
 Description : 
 */	
	select   timeSheetId 
			,userId 
			,jobId  
			,businessSiteId  
			,agencySiteId  
			,timeSheetDate 
			,timeSheetDateOffset  
			,timeSheetDateTimeZoneId 
			,timeSheetStartTime 
			,timeSheetEndTime  
			,approvedBy  
			,approvedDate 
			,approvedDateOffset  
			,approvedDateTimeZoneId 
			,timeSheetStatusId 
			,timeSheetCreatedOn 
			,timeSheetCreatedOffset 
			,timeSheetCreatedTimeZoneId 
	from timeSheet t
	where userId =user_Id and timeSheetCreatedOn > timeSheet_Date

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWageTotal` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWageTotal`(
 in  businessSite_Id bigint(20)
,in  department_Id bigint(20)
,in  start_Date date
,in  end_Date date 
)
BEGIN

/*
 Author: James
 Date  : 09/06/2016
 Description : Get day wise wage total
*/



select date(shiftStartDateTime)shiftDate,subClassificationId,sum(wage)TotalWage from candidateShiftOffer 
where businessSiteId=businessSite_Id and departmentId=department_Id
and date(shiftStartDateTime) between start_Date and end_Date and status NOT IN (19,33,36) and isDeleted=0 
group by date(shiftStartDateTime),subClassificationId 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWeekData` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWeekData`(
IN shift_Date date
,in week_startDay tinyint
)
BEGIN

-- set @shift_Date='2016-01-17'

    SET @week_number=WEEK(shift_Date,1)
	    
	SET @x_weeks_after_new_year=DATE_ADD(MAKEDATE(YEAR(shift_Date), 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(YEAR(shift_Date), 1))>50 , 0 , -1))+@week_number WEEK)
		   
	SET @week_StartDate=DATE_SUB(@x_weeks_after_new_year, INTERVAL WEEKDAY(@x_weeks_after_new_year) DAY)
	SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY)        
 
	
 if shift_Date between @week_StartDate and @week_EndDate and week_startDay<>1 then
		-- select 1
        if @week_EndDate=shift_Date and WEEKDAY(shift_Date)+1=week_startDay then
			SET @week_StartDate=shift_Date
            SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY) 
        elseif shift_Date >=(DATE_add(@week_StartDate, INTERVAL week_startDay-1 DAY)) then
			set @week_StartDate= DATE_add(@week_StartDate, INTERVAL week_startDay-1 DAY) 			
			SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY)  
		else 
			set @week_StartDate= DATE_ADD((DATE_sub(@week_StartDate, INTERVAL 7 DAY)), INTERVAL week_startDay-1 DAY) 			
			SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY) 
        end if
        
elseif week_startDay=1 then
		SET @week_StartDate=DATE_SUB(@x_weeks_after_new_year, INTERVAL WEEKDAY(@x_weeks_after_new_year) DAY)
		SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY)    

else 
	-- select 2
		SET @week_StartDate=shift_Date
		SET @week_EndDate=DATE_ADD(@week_StartDate, INTERVAL 6 DAY) 
 end if

select @week_StartDate as weekStartDate,@week_EndDate as weekEndDate

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWorkerCompensationIds` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWorkerCompensationIds`(IN Id bigint, Role_CategoryId tinyint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Get Worker Compensation Ids
 call GetWorkerCompensationIds(11,3)
*/

 
		select businessWorkerCompId as CompId  
        from businessWorkerCompensation  where businessId = Id and Role_CategoryId = 3
    union all
		select agencyWorkerCompId as CompId 
        from agencyWorkerCompensation where AgencyId =  Id and Role_CategoryId = 4
 
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWorkFlow` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWorkFlow`()
BEGIN

/*
 Author: Tijo Joseph	
 Date  : 16-01-2015
 Description : Work flow details
 */

select workFlowId,workFlowName,parentWorkFlowId,initialStateId from businessWorkFlow
where isDeleted=0


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWorkFlowEvent` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWorkFlowEvent`()
BEGIN

	/*
	 Author: James
	 Date  : 26/02/2015
	 Description : Get workflow Event      
	call GetWorkFlowEvent 
	*/

	select eventId,eventName from workFlowEvent 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWorkFlowInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWorkFlowInstance`(
	IN	businessSite_Id	bigint(20)
,	IN	jobProfileHireRequest_Id	bigint(20)
)
BEGIN
	/*
	 Author: James
	 Date  : 26/02/2015
	 Description : Get workflow instance
	call est_skillsconnect.GetWorkFlowInstance(2, null)
	*/
    
    

select 	workflowInstanceId
	,	workFlowId
	,	currentStateId
	,	parentWorkflowInstanceId
	,	businessSiteId
	,	jobProfileHireRequestId
from workFlowInstance
where  jobProfileHireRequestId =coalesce(jobProfileHireRequest_Id,jobProfileHireRequestId) 
and coalesce(businessSiteId,0)=coalesce(businessSite_Id,coalesce(businessSiteId,0)) 

 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWorkFlowState` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWorkFlowState`(
)
BEGIN

	/*
	 Author: James
	 Date  : 26/02/2015
	 Description : Get workflow State 
	*/

select stateId,stateName from workFlowState
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetWorkFlowStateTransition` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetWorkFlowStateTransition`(
-- IN workFlow_Id tinyint
)
BEGIN


	/*
	 Author: James
	 Date  : 26/02/2015
	 Description : Get workflow state transition
	*/

select transitId
	  ,tr.stateId
      ,ws.stateName
      ,tr.eventId
      ,we.eventName
      ,tr.transitStateId
      ,tws.stateName as transistStateName 
   --    ,tr.workFlowId
from workFlowStateTransition  tr left join workFlowState ws on tr.stateId=ws.stateId
left join workFlowEvent we on tr.eventId=we.eventId
left join workFlowState tws on tr.transitStateId=tws.stateId
-- where tr.workFlowId=coalesce(workFlow_Id,tr.workFlowId)
order by tr.stateId 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetYearDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetYearDetails`()
BEGIN
 

/*
 Author: James
 Date  : 20/11/2014
 Description : Get year details
*/

select  yearId,yearName from scYear
 
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetZipCodeDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetZipCodeDetails`( IN ZipCode varchar(10) , IN Country_Id bigint(20), IN language_Id bigint(20))
BEGIN

             
/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Get zipcode details
*/      
	select distinct  0 as zipCodeId 
			,zc.stateId 
			,sl.stateName
			,zc.cityId  
			,cl.cityName
			,zc.zCode 
			from zipCode zc 
            inner join stateLocale sl on zc.stateId=sl.stateId  and  sl.languageId=language_Id         
            inner join cityLocale cl on zc.cityId=cl.cityId and cl.languageId=language_Id  
			where zc.zCode = ZipCode          
            and zc.countryId = Country_Id 
            
           

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `GetZipCodeForCity` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `GetZipCodeForCity`( IN city_Id bigint(20) )
BEGIN


/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Get zipcode for city
*/   
	select   0 as zipCodeId 
			,zc.zCode 
			from zipCode zc 
			where zc.cityId = city_Id limit 1

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertBeaconBusinessSites` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertBeaconBusinessSites`(
 IN beacon_Id bigint(20)
, IN businessSite_Id bigint(20)
, IN user_Id bigint(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 06/06/2016
 Description : Insert Update BeaconBusinessSites
 call est_skillsconnect_dev.InsertBeaconBusinessSites(1, 10, 136)
*/
	INSERT INTO  beaconBusinessSite (beaconId,businessSiteId,createdBy,createdOn) 
        VALUES (beacon_Id,businessSite_Id,user_Id,utc_timestamp())
		
	IF ROW_COUNT() > 0 THEN
		select beacon_Id
	END IF
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertBeaconDepartment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertBeaconDepartment`(
 IN beacon_Id bigint(20)
 , IN department_Id bigint(20)
 , IN user_Id bigint(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 06/06/2016
 Description : Insert BeaconDepartment
 call est_skillsconnect_dev.InsertBeaconDepartment(1, 10, 136)
*/
	INSERT INTO  beaconDepartment (beaconId,departmentId,createdBy,createdOn) 
        VALUES (beacon_Id,department_Id,user_Id,utc_timestamp())
		
	IF ROW_COUNT() > 0 THEN
		select beacon_Id
	END IF
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertBeaconGPSLocation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertBeaconGPSLocation`(
 IN beacon_Id bigint(20)
, IN latitude_coordinate	decimal(21,17)
, IN longitude_coordinate	decimal(21,17)
, IN max_Locations tinyint(4)
, IN user_Id bigint(20)
)
BEGIN

/*
 Author: Sravanthi M
 Date  : 19/05/2016
 Description : Insert BeaconGPSLocation
 call est_skillsconnect_dev.InsertBeaconGPSLocation(6, '29.98088660000000000', '-92.14077569999999000',136)
 status_type: 0 - Failure
			  1 - Success
			  2 - Max Locations Exeeded
*/

	DECLARE location_Count tinyint(4)
    DECLARE status_type tinyint(4)
    SET status_type = 0
    
    SELECT COUNT(beaconGPSLocationId) INTO location_Count from beaconGPSLocation WHERE beaconId = beacon_Id
    
    IF location_Count < max_Locations THEN
		
        INSERT INTO  beaconGPSLocation (beaconId,latitude,longitude,preference,createdBy,createdOn) 
        VALUES (beacon_Id,latitude_coordinate,longitude_coordinate,location_Count+1,user_Id,utc_timestamp())
        
        SET status_type = 1
	ELSE 
		SET status_type = 2
	END IF
    
    SELECT status_type
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertBeaconSubClassification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertBeaconSubClassification`(
 IN beacon_Id bigint(20)
 , IN subClassification_Id bigint(20)
 , IN user_Id bigint(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 06/06/2016
 Description : Insert BeaconSubClassification
 call est_skillsconnect_dev.InsertBeaconSubClassification(1, 10, 136)
*/
	INSERT INTO  beaconSubClassification (beaconId,subClassificationId,createdBy,createdOn) 
        VALUES (beacon_Id,subClassification_Id,user_Id,utc_timestamp())
		
	IF ROW_COUNT() > 0 THEN
		select beacon_Id
	END IF
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertBeaconTimeDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertBeaconTimeDetails`(
IN beacon_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN clock_Time DATETIME,
IN clock_Mode tinyint(4),
IN user_Id BIGINT(20)
)
BEGIN

/*
 Author: Sravanthi M
 Date  : 03/06/2016
 Description : InsertBeaconTime
 call est_skillsconnect_dev.InsertBeaconTime(6, 123, '03-06-2016 12:00:00', 1, 3678)
*/
	DECLARE timeSheet_Id BIGINT(20)
    DECLARE status_value bit(1)
    SET status_value = 0
    SET SQL_SAFE_UPDATES = 0
    
    SELECT timeSheetId INTO timeSheet_Id
	FROM candidateTimesheet 
	WHERE shiftOfferId = shiftOffer_Id and candidateId=user_Id
    
    if coalesce(timeSheet_Id,0)=0 then 
			insert into candidateTimesheet(
							shiftOfferId 
						,	candidateId
						,	status
						,	actionBy
						,	actionOn
						,	createdBy
						,	createdOn
						,	isTSSubmitedByBeacon )
			select shiftOffer_Id ,user_Id,1 ,user_Id,utc_timestamp(),user_Id,utc_timestamp(),0
			if row_count()>0 then
				set timeSheet_Id=last_insert_Id()
			end if
    end if 
     
        update candidateTimesheet 
			set shiftStartDateTime = case when clock_Mode = 1 then  clock_Time else shiftStartDateTime end
              ,shiftEndDateTime = case when clock_Mode = 2 then  clock_Time else shiftEndDateTime end
              ,status=case when clock_Mode = 1  then 1 when  clock_Mode = 2 then 34 else status end 
              ,actionBy=user_Id
              ,actionOn=utc_timestamp()
              ,createdBy=user_Id
              ,createdOn=utc_timestamp()
              ,isTSSubmitedByBeacon =case when clock_Mode = 2 then 1 else isTSSubmitedByBeacon end 
		where timeSheetId =  timeSheet_Id 
        
		IF ROW_COUNT() > 0 THEN
			 SET status_value = 1
		END IF       
			
            if not exists(select timesheetId from timesheetBeaconDetail where timeSheetId =timeSheet_Id and beaconId=beacon_Id and clockMode=clock_Mode) then
				insert into timesheetBeaconDetail (timesheetId,beaconId,clockMode,clockTime,createdBy,createdOn)
				values (timeSheet_Id,beacon_Id,clock_Mode,clock_Time,user_Id,utc_timestamp())
			end if
        
    select status_value 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertBusinessCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertBusinessCandidate`(
 in business_Id	bigint(20)
,in business_SiteId	bigint(20)
,in candidate_UserId	bigint(20)
,in created_By	bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 22/03/2016
 Description : insert business hired candidate
*/

declare status_Value bit(1)
set status_Value=0

if not exists(select businessCandidateId from businessCandidate where businessId=business_Id and candidateUserId=candidate_UserId) then 
		insert into businessCandidate
		(	 businessId
			,businessSiteId
			,candidateUserId
			,createdBy
			,createdOn)
		values (
			 business_Id
			,business_SiteId
			,candidate_UserId
			,created_By
			,utc_timestamp())
		if row_count()>0 then
			set status_Value=1
		end if
end if

select status_Value

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertCandidateShiftCancel` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertCandidateShiftCancel`(
 IN shiftOffer_Id  bigint 
,IN shift_Status tinyint
,IN Accepted_CandidateUserId bigint
,IN created_By bigint
, IN shift_Comment varchar(2000)
, IN candidate_UserId varchar(5000)
)
BEGIN
/*
 Author: James
 Date  : 08/12/2015
 Description : Cancel shift details
*/

	if shift_Status=55 then -- give request manager declined
		insert into candidateShiftCancel (
		shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime,status,isNotified,AcceptedCandidateUserId,createdBy,createdOn,comment)
		select so.shiftOfferId,cg.candidateId,shiftStartDateTime,shiftEndDateTime,shift_Status,0,Accepted_CandidateUserId,created_By,utc_timestamp() ,shift_Comment
		from candidateShiftOffer so inner join candidateGiveAwayRequests cg 
		on so.shiftOfferId=cg.shiftOfferId and cg.status=21 
		where so.shiftOfferId=shiftOffer_Id 
	elseIf shift_Status=56 then -- give request manager approved
		insert into candidateShiftCancel (
		shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime,status,isNotified,AcceptedCandidateUserId,createdBy,createdOn,comment)
        select so.shiftOfferId,so.candidateId,shiftStartDateTime,shiftEndDateTime,shift_Status,0,Accepted_CandidateUserId,created_By,utc_timestamp() ,shift_Comment
		from candidateShiftOffer so
		where so.shiftOfferId=shiftOffer_Id 
	elseif shift_Status=57 then -- shift taken by 
		insert into candidateShiftCancel (
		shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime,status,isNotified,AcceptedCandidateUserId,createdBy,createdOn,comment)
        select so.shiftOfferId,cg.candidateId,shiftStartDateTime,shiftEndDateTime,shift_Status,0,Accepted_CandidateUserId,created_By,utc_timestamp() ,shift_Comment
		from candidateShiftOffer so inner join candidateGiveAwayRequests cg 
		on so.shiftOfferId=cg.shiftOfferId  -- and cg.status in(1,39,41,49) 
		where so.shiftOfferId=shiftOffer_Id and cg.candidateStatus =1 and cg.candidateId<>Accepted_CandidateUserId 
	elseif shift_Status=58 then -- cantwork offers
		insert into candidateShiftCancel (
		shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime,status,isNotified,AcceptedCandidateUserId,createdBy,createdOn,comment)
		select so.shiftOfferId,cg.candidateId,shiftStartDateTime,shiftEndDateTime,shift_Status,0,Accepted_CandidateUserId,created_By,utc_timestamp() ,shift_Comment
		from candidateShiftOffer so inner join candidateGiveAwayRequests cg 
		on so.shiftOfferId=cg.shiftOfferId 
		where so.shiftOfferId=shiftOffer_Id and so.isCantWork =1 and so.status in(1,38,40,46,60) and cg.candidateStatus =1
		and (cg.candidateId in (
			select userId from scUser where find_in_set(userId,candidate_UserId)) or candidate_UserId is null) 
	elseif shift_Status=59 then -- last minute
		insert into candidateShiftCancel (
		shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime,status,isNotified,AcceptedCandidateUserId,createdBy,createdOn,comment)
		select so.shiftOfferId,cg.candidateId,shiftStartDateTime,shiftEndDateTime,shift_Status,0,Accepted_CandidateUserId,created_By,utc_timestamp() ,shift_Comment
		from candidateShiftOffer so inner join candidateGiveAwayRequests cg 
		on so.shiftOfferId=cg.shiftOfferId 
		where so.shiftOfferId=shiftOffer_Id  and so.status in(46) and cg.candidateStatus =1
		and (cg.candidateId in (
			select userId from scUser where find_in_set(userId,candidate_UserId)) or candidate_UserId is null) 
	elseif shift_Status=10 then -- cantWork	
		if not exists(select shiftOfferId from candidateShiftCancel where shiftOfferId=shiftOffer_Id and status=10 ) then 
						insert into candidateShiftCancel (
						shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime,status,isNotified,AcceptedCandidateUserId,createdBy,createdOn,comment)
						select so.shiftOfferId,so.candidateId,shiftStartDateTime,shiftEndDateTime,shift_Status,0,Accepted_CandidateUserId,created_By,utc_timestamp() ,shift_Comment
						from candidateShiftOffer so
						where so.shiftOfferId=shiftOffer_Id and so.status=10 
		end if
	else -- normal unassign 
		insert into candidateShiftCancel (
		shiftOfferId,candidateUserId,shiftStartDateTime,shiftEndDateTime,status,isNotified,AcceptedCandidateUserId,createdBy,createdOn,comment)
		select shiftOfferId,candidateId,shiftStartDateTime,shiftEndDateTime,shift_Status,0,Accepted_CandidateUserId,created_By,utc_timestamp() ,shift_Comment
		from candidateShiftOffer where shiftOfferId=shiftOffer_Id and candidateId<>0     
	end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertCandidateShiftOfferHistory` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertCandidateShiftOfferHistory`(
 IN shiftOffer_Id bigint
,IN shift_Status tinyint
)
BEGIN



	insert into candidateShiftOfferHistory
	(shiftOfferId,candidateUserId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,status,createdBy,createdOn,isDeleted)
	select shiftOfferId,candidateId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,coalesce(shift_Status,status),createdBy,utc_timestamp(),0 from candidateShiftOffer
	where `shiftOfferId`=shiftOffer_Id and candidateId<>0
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertCandidateShiftUnassign` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertCandidateShiftUnassign`(
 IN shiftOffer_Id  bigint
,IN candidate_UserId varchar(5000)
,IN created_By bigint
)
BEGIN
/*
 Author: James
 Date  : 08/12/2015
 Description : Insert shift cancelled details
*/


declare old_CandidateId bigint
declare old_status tinyint
declare cant_work bit
declare row_cnt bigint
set row_cnt=0
SET SQL_SAFE_UPDATES = 0
	select candidateId,status,isCantWork into old_CandidateId,old_status,cant_work from candidateShiftOffer 
	where shiftOfferId=shiftOffer_Id 
    
	if old_status in(2,20,27,16,29,15,24,48,4,7,9,14,17,19,22,25,26,28,30,31,32,33,61) and candidate_UserId is null then
		-- Accepted, giveaway, swap & LMH
        call InsertCandidateShiftOfferHistory (shiftOffer_Id,54)  
        
        call InsertCandidateShiftCancel(shiftOffer_Id,54,null,created_By,null,null)    
        
		update  candidateShiftOffer set status=26,updatedBy=created_By,updatedOn=utc_timeStamp()
		where  (shiftOfferId=shiftOffer_Id  or  exchangedShiftOfferId=shiftOffer_Id)
		and status=7 
		
		update  candidateShiftOffer set status=2,updatedBy=created_By,updatedOn=utc_timeStamp()
		where  (shiftOfferId=shiftOffer_Id  or  exchangedShiftOfferId=shiftOffer_Id)
		and status=14  		    
        
        update candidateShiftOffer set status=28  ,updatedBy=created_By,updatedOn=utc_timeStamp()
		where shiftOfferId=shiftOffer_Id and  status in(4,28,31)          
			if row_count()>0 then
				delete from candidateGiveAwayRequests 
				where shiftOfferId=shiftOffer_Id 
			end if            
            
		update candidateShiftOffer set status=1,candidateId=0  ,updatedBy=created_By,updatedOn=utc_timeStamp()
		where shiftOfferId=shiftOffer_Id and status in(2,4,7,9,15,16,19,20,22,24,25,26,27,28,29,31,32,33,48,61)
			if row_count()>0 then
				delete from candidateGiveAwayRequests 
				where shiftOfferId=shiftOffer_Id 
               
               DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
			end if 
        
	elseif old_status in(4,19,20,27,28,31,33) and candidate_UserId is not null then
    -- giveaway
		delete from candidateGiveAwayRequests 
		where shiftOfferId=shiftOffer_Id and find_in_set(candidateId ,coalesce(candidate_UserId,candidateId)) 
		and status in (18,6,23,21) 
        set row_cnt=row_cnt + row_count()
        
        if not exists(select shiftOfferId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and status in (18,23)) and row_count()>0 then
			update candidateShiftOffer set status=28  ,updatedBy=created_By,updatedOn=utc_timeStamp()
			where shiftOfferId=shiftOffer_Id and status=4        
		end if  
        
		   if exists(  select shiftOfferId from candidateShiftOffer where shiftOfferId=shiftOffer_Id 
					  and find_in_set(candidateId,candidate_UserId) ) then
			
				call InsertCandidateShiftOfferHistory (shiftOffer_Id,54)  
			
				call InsertCandidateShiftCancel(shiftOffer_Id,54,null,created_By,null,null)  
                
                delete from candidateGiveAwayRequests 
				where shiftOfferId=shiftOffer_Id
                set row_cnt=row_cnt + row_count()
        
			end if 
		
    elseif old_status in(2,7,9,14,15,16,17,22,24,25,26,29,30,61)  then 
		-- Accepted & Swap Request
    	update  candidateShiftOffer set status=25,updatedBy=created_By,updatedOn=utc_timeStamp()
		where  (shiftOfferId=shiftOffer_Id  or  exchangedShiftOfferId=shiftOffer_Id)
		and status=7 
		
		update  candidateShiftOffer set status=2,updatedBy=created_By,updatedOn=utc_timeStamp()
		where  (shiftOfferId=shiftOffer_Id  or  exchangedShiftOfferId=shiftOffer_Id)
		and status=14  	

		call InsertCandidateShiftOfferHistory (shiftOffer_Id,54)  
	
		call InsertCandidateShiftCancel(shiftOffer_Id,54,null,created_By,null,null)  
        
        DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id 
	elseif old_status in(1,3,38,40,46,60,62,63)  then 
			-- cantwork, offer to staff, LMH
			if cant_work=1 and old_status in(1,38,40,46,60)then 
				call InsertCandidateShiftCancel(shiftOffer_Id,58,null,created_By,null,candidate_UserId) 
              
			elseif old_status=46 then
				call InsertCandidateShiftCancel(shiftOffer_Id,59,null,created_By,null,candidate_UserId)  
			end if 
            
			delete from candidateGiveAwayRequests 
			where shiftOfferId=shiftOffer_Id and find_in_set(candidateId ,coalesce(candidate_UserId,candidateId))   
            set row_cnt=row_cnt + row_count()       
            
            update candidateShiftOffer set status=1,candidateId=0  ,updatedBy=created_By,updatedOn=utc_timeStamp()
            where shiftOfferId=shiftOffer_Id and find_in_set(candidateId ,coalesce(candidate_UserId,candidateId))  
	end if
         
		update candidateShiftOffer set status=1,candidateId=0  ,updatedBy=created_By,updatedOn=utc_timeStamp()
		where shiftOfferId=shiftOffer_Id and status in(2,4,7,9,15,16,19,20,22,24,25,26,27,28,29,31,32,33,48,14,17,21,22,30,61)
		if row_count()>0 then
			delete from candidateGiveAwayRequests 
			where shiftOfferId=shiftOffer_Id 
            
			DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id 
		end if 
        
        update candidateShiftOffer set updatedBy=created_By,updatedOn=utc_timeStamp()
		where shiftOfferId=shiftOffer_Id and row_cnt>0 	        
SET SQL_SAFE_UPDATES = 1
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertCandidateUnavailableTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertCandidateUnavailableTime`(
in candidate_UserId BIGINT(20),
in startDateTime datetime,
in endDateTime datetime,
in unavailreason varchar(2000))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert candidate unavailable time
*/
	INSERT INTO `est_skillsconnect`.`candidateUnavailability` (
	  `candidateId`,`startDateTime`,`endDateTime`,`reason`) 
	VALUES
	  (candidate_UserId,startDateTime,endDateTime,unavailreason)
	  
	SELECT LAST_INSERT_ID() AS unavailabilityId,candidate_UserId AS candidateId
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertFileUpload` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertFileUpload`(

 IN file_Id bigint(20)
,IN file_Name varchar(500) 
,IN roleCategory_Id tinyint(4) 
,IN business_Id bigint(20) 
,IN site_Id bigint(20) 
,IN created_By bigint(20)
,IN file_Status tinyint
,IN jobProfile_HireRequestId bigint(20)
,IN candidate_HRStatus tinyint
,IN document_TypeId smallint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : File Upload
 call est_skillsconnect.InsertFileUpload(0, '123456', 'test', 3, 1, 1, 1, 1)
*/

	if (file_Id = 0) then
		insert into fileUpload (fileName ,roleCategoryId ,businessId ,siteId ,createdBy ,createdOn ,fileStatus,documentTypeId )
        values (file_Name ,roleCategory_Id ,business_Id ,site_Id ,created_By ,utc_timestamp() ,file_Status,document_TypeId)
        
        IF ROW_COUNT() > 0 THEN
			set file_Id =  LAST_INSERT_ID()
            
						insert into hireRequestFileUpload (fileId,jobProfileHireRequestId,hireRequestStatus,createdBy,createdOn)
									values(file_Id,jobProfile_HireRequestId,candidate_HRStatus,created_By ,utc_timestamp())
						
            select file_Id
            
            
		end if
	else
			update fileUpload set updatedOn = utc_timestamp() 
								,  updatedBy=created_By
								, fileStatus = file_Status
                                where fileId = file_Id
                                
								
			 IF ROW_COUNT() > 0 THEN
				select file_Id
			 end if
		end if
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertFixedShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertFixedShift`(
IN jobProfile_HireRequestId bigint
,IN candidate_UserId bigint
,In shift_StartDate date
,in shift_EndDate	date 
,in jobProfile_Id bigint
,in department_Id bigint
,in subClassification_Id bigint
,in businessSite_Id bigint
)
BEGIN

    DECLARE isCandidateAckReq BIT
    DECLARE is_TimeSheetSubmitRequired BIT
    
    SELECT candidateAcknowledgeReq,approveHoursReq INTO isCandidateAckReq,is_TimeSheetSubmitRequired FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
		
    
WHILE shift_StartDate <= shift_EndDate DO 
	 
    INSERT INTO candidateShiftOffer(candidateId,jobProfileId,departmentId,subClassificationId,
			businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,STATUS,COMMENT,sourceModule,createdBy,createdOn, isShiftAcceptRequired, isTimeSheetSubmitRequired,isNotified) 			
	select distinct candidate_UserId,null,department_Id,subClassification_Id
		,businessSite_Id,a.shift_StartTime,a.shift_EndTime,a.shift_StartTime,a.shift_EndTime, 2,null,'FIXED',null,utc_timestamp(), isCandidateAckReq, is_TimeSheetSubmitRequired,1
    from (
		select concat(shift_StartDate,' ', shiftStartTime) as shift_StartTime,addtime(concat(shift_StartDate,' ', shiftStartTime),shiftDuration) as shift_EndTime , shiftStartTime,shiftEndTime from hireRequestShift hrs 
		inner join hireRequestShiftDays hrd on hrs.hireRequestShiftId=hrd.hireRequestShiftId and hrd.isDeleted=0 and hrs.isDeleted=0
		where hrs.jobProfileHireRequestId=jobProfile_HireRequestId and hrd.weekDayId=(weekday(shift_StartDate)+1) 
	)a -- where CheckCandidateAvailability(candidate_UserId,0,shift_StartTime,shift_EndTime)=1 
    left join candidateShiftOffer so
	on  so.candidateId=candidate_UserId and so.shiftEndDateTime >shift_StartTime AND so.shiftStartDateTime<shift_EndTime AND so.STATUS NOT IN (3,19,33,36) AND isDeleted=0 
	where so.shiftOfferId is null  
 
	INSERT INTO `candidateTimesheet` (`shiftOfferId`, `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
		  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 	 
	select so.shiftOfferId,so.candidateId,1,NULL,NULL,NULL,NULL,so.candidateId,utc_timestamp(),so.candidateId,utc_timestamp()
    from candidateShiftOffer so left join candidateTimesheet ct on so.shiftOfferId=ct.shiftOfferId
	where ct.shiftOfferId is null and so.status=2 and so.sourceModule='FIXED' 
	 
	SET shift_StartDate = adddate(shift_StartDate,1)
END WHILE


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertSampleDataForBusinessSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertSampleDataForBusinessSettings`( 
IN businessSite_Id bigint(20),
IN department_Id BIGINT(20),
IN subClassification_Id BIGINT(20),
IN user_Id BIGINT(20)
)
BEGIN 
	/*Data for the table `businessSettings` */
	INSERT  INTO `businessSettings`(`businessSiteId`,`departmentId`,`candidateAcknowledgeReq`,`approveHoursReq`,`maxTimeToConfirm`,`allowSwap`,`reqManagerApproval`,`useOvertimeIndicator`,`fullTimeOTLimit`,`partTimeOTLimit`,`casualOTLimit`,`settingStatus`,`createdBy`,`createdOn`,`updatedBy`,`updatedOn`) 
	VALUES (businessSite_Id,department_Id,'','\0',NULL,'','','',8,6,4,3,user_Id,'2015-03-14 14:27:40',NULL,NULL)
	
	/*Data for the table `businessShiftTemplate` */
	INSERT  INTO `businessShiftTemplate`(`businessSiteId`,`departmentId`,`subClassificationId`,`weekDayName`,`shiftStartTime`,`shiftEndTime`,`longBreak1Start`,`longBreak2Start`,`shortBreak1Start`,`shortBreak2Start`,`createdBy`,`createdOn`,`updatedBy`,`updatedOn`,`isDeleted`) 
	VALUES (businessSite_Id,department_Id,subClassification_Id,'Monday','08:00:00','17:00:00','12:00:00',NULL,'10:30:00','14:30:00',user_Id,'2015-03-16 16:04:12',user_Id,'2015-03-17 09:48:06','\0'),
	(businessSite_Id,'Tuesday','08:00:00','17:00:00','12:00:00',NULL,'10:30:00','14:30:00',user_Id,'2015-03-16 16:04:12',user_Id,'2015-03-17 09:48:06','\0')
	
	/*Data for the table `shiftBreakRuleSettings` */
	INSERT  INTO `shiftBreakRuleSettings`(`businessSiteId`,`departmentId`,`subClassificationId`,`longBreakDuration`,`shortBreakDuration`,`minShortShiftHours`,`maxShortShiftHours`,`minMediumShiftHours`,`maxMediumShiftHours`,`minLongShiftHours`,`maxLongShiftHours`,`longerShiftHours`,`createdBy`,`createdOn`,`updatedBy`,`updatedOn`) 
	VALUES (businessSite_Id,department_Id,subClassification_Id,30,15,4,5,5,7,7,10,10,user_Id,'2015-03-14 14:30:49',NULL,NULL)
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertShiftOffersForFixedShifts` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertShiftOffersForFixedShifts`(
IN candidate_Id BIGINT(20),
IN businessSite_Id BIGINT(20),
IN jobProfile_Id BIGINT(20),
in shift_StartDateTime datetime,
IN shift_EndDateTime DATETIME,
in created_By BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Get shift offers for fixed shifts
*/
	
	DECLARE iCount INT
	DECLARE shiftOffer_Id BIGINT(20)
	DECLARE department_Id BIGINT(20)
	DECLARE subClassification_Id INT(11)
    DECLARE isCandidateAckReq BIT
    DECLARE is_TimeSheetSubmitRequired BIT
	
	SELECT COUNT(candidateId) INTO iCount FROM (
	    SELECT candidateId
	    FROM candidateShiftOffer
	    WHERE candidateId=candidate_Id AND shiftEndDateTime>shift_StartDateTime AND shiftStartDateTime<shift_EndDateTime AND STATUS NOT IN (3,19,33,36) AND isDeleted=0 -- and status<>1
	    UNION
	    SELECT cg.candidateId
	    FROM candidateGiveAwayRequests cg
	    INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
	    WHERE cg.candidateId=candidate_Id AND so.shiftEndDateTime>shift_StartDateTime AND so.shiftStartDateTime<shift_EndDateTime AND so.status NOT IN (3,19,33,36) AND cg.status NOT IN (6,12,42,41,18,39) AND so.isDeleted=0
	) AS t1
	
	IF iCount>0 THEN 
		SELECT 37 AS statusId,'SHIFTOVERLAP' AS statusName
	ELSE
		SELECT departmentId,jobSubClassificationId INTO department_Id,subClassification_Id 
		FROM jobProfile WHERE jobProfileId=jobProfile_Id
		
        SELECT candidateAcknowledgeReq,approveHoursReq INTO isCandidateAckReq,is_TimeSheetSubmitRequired FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
		
        SELECT MAX(shiftOfferId) INTO shiftOffer_Id FROM candidateShiftOffer
			
		IF shiftOffer_Id IS NULL OR shiftOffer_Id=0 THEN
			SET shiftOffer_Id=1
		ELSE
			SET shiftOffer_Id=shiftOffer_Id+1
		END IF
		
		INSERT INTO candidateShiftOffer(shiftOfferId,candidateId,jobProfileId,departmentId,subClassificationId,
			businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,STATUS,COMMENT,sourceModule,createdBy,createdOn, isShiftAcceptRequired, isTimeSheetSubmitRequired)
		VALUES(shiftOffer_Id,candidate_Id,NULL,department_Id,subClassification_Id,
			businessSite_Id,shift_StartDateTime,shift_EndDateTime,shift_StartDateTime,shift_EndDateTime,2,NULL,'FIXED',created_By,utc_timestamp(), isCandidateAckReq, is_TimeSheetSubmitRequired)
			
		INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
		  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
		  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
		VALUES
		  (shiftOffer_Id,/*shift_StartDateTime,shift_EndDateTime,*/
		    candidate_Id,1,NULL,NULL,NULL,NULL,
		    candidate_Id,utc_timestamp(),candidate_Id,utc_timestamp()
		  ) 
		  
		SELECT 0 AS statusId,'SUCCESS' AS statusName
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgency`( 
  IN agency_Id bigint(20) 
, IN agency_Name varchar(200) 
, IN industry_Id bigint(20) 
, IN areaOf_expertiseId int(11)
, IN agency_Reg_Id varchar(30) 
, IN phone_No varchar(20) 
, IN fax_No varchar(20) 
, IN timeSheetWeekEndDay_Id tinyint(4) 
, IN address_Line1 varchar(1000) 
, IN address_Line2 varchar(1000) 
, IN country_Id bigint(20) 
, IN state_Id bigint(20) 
, IN city_Id bigint(20) 
, IN zip_Code varchar(20) 
, IN User_ID bigint(20)  
, IN privacy_Policy text
, IN termsAnd_Condition text
, in agency_Url varchar(150)
, IN agency_Description varchar(1200)
, IN lang_Id int
,	IN	latitude_coordinate	decimal(21,17)
,	IN	longitude_coordinate	decimal(21,17)
, IN timeZone_Id int
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting and Updating Agency
*/


declare primary_agencySite_Id bigint
DECLARE userclaimSet_Id bigint
DECLARE agencySite_Id bigint
DECLARE primary_agency bigint
DECLARE city_name nvarchar(200)

 set city_name = (select cityName from cityLocale where cityId =city_Id and languageId =lang_Id )

 -- set userclaimSet_Id = (select userRoleId from userRole where userId=User_ID and RoleId =4)

	if (agency_Id=0) then
		-- if not exists (select 1 from userRoleAgencySite where userRoleId =userclaimSet_Id )then
			insert into agency (agencyRegId ,agencyName ,createdBy ,createdOn ,isDeleted ,status , timeSheetWeekEndDayId,areaOfexpertiseId ,countryId ,stateId ,cityId ,phone ,fax  ,addressLine1 ,addressLine2, zipCode, privacyPolicy , termsAndCondition,agencyUrl,agencyDescription,latitude,longitude,timeZoneId)
			values (agency_Reg_Id ,agency_Name ,User_ID ,utc_timestamp(),0,1,timeSheetWeekEndDay_Id,areaOf_expertiseId,country_Id ,state_Id ,city_Id ,phone_No ,fax_No  ,address_Line1 ,address_Line2, zip_Code,privacy_Policy, termsAnd_Condition,agency_Url,agency_Description,latitude_coordinate,longitude_coordinate,timeZone_Id)

				IF ROW_COUNT() > 0 THEN
					set agency_Id = LAST_INSERT_ID()              
                    
					
                    
                     insert into agencySite (agencyId,siteName,countryId,stateId,cityId,phone,addressLine1,addressLine2,fax,zipCode,createdBy,createdOn,isDeleted,latitude,longitude,timeZoneId)
					 values(agency_Id,city_name,country_Id ,state_Id ,city_Id ,phone_No ,address_Line1 ,address_Line2,fax_No,zip_Code,User_ID ,utc_timestamp(),0,latitude_coordinate,longitude_coordinate,timeZone_Id )
					 set agencySite_Id = LAST_INSERT_ID()
                    
                     insert into userRoleAgencySite (userRoleId, agencySiteId,createdBy,createdOn, isDeleted,status)
                     values (userclaimSet_Id,agencySite_Id,User_ID ,utc_timestamp(), 0,2)
                     
                     
                     call InsertUpdateAgencyIndustry(User_ID,agency_Id,industry_Id)
					
					 select agency_Id, agencySite_Id , 1 as StatusValue
				end if
		-- else
			-- select agency_Id, 0 as agencySite_Id, 2 as StatusValue 
		-- end if
	else
    
		update agency set 
						 agencyRegId = agency_Reg_Id
						,agencyName = agency_Name
						,updatedBy = User_ID
						,updatedOn = utc_timestamp()
						,timeSheetWeekEndDayId = timeSheetWeekEndDay_Id
                        ,areaOfexpertiseId = areaOf_expertiseId
                        ,countryId  = country_Id
						,stateId = state_Id
						,cityId = city_Id
						,phone = phone_No
						,fax  = fax_No
						,addressLine1 = address_Line1
						,addressLine2 = address_Line2
                        ,zipCode = zip_code
                        ,privacyPolicy =privacy_Policy
                        ,termsAndCondition =termsAnd_Condition
                        ,agencyUrl=agency_Url
                        ,agencyDescription=agency_Description
                        ,latitude	=	latitude_coordinate
						,longitude	=	longitude_coordinate
						,timeZoneId = timeZone_Id
						where agencyId = agency_Id

				IF ROW_COUNT() > 0 THEN
				 set agencySite_Id = (select agencySiteId from agencySite  where agencyId =agency_Id and parentAgencySiteId is null)
                update agencySite set 
								-- siteName  	= city_name
								-- ,
                                countryId  = country_Id
								,stateId 	= state_Id
								,cityId   	= city_Id
								,phone  	= phone_No
								,addressLine1 = address_Line1
								,addressLine2 = address_Line2
								,fax  		= fax_No
								,zipCode 	= zip_code
								,updatedBy 	= User_ID
								,updatedOn  = utc_timestamp()
								,latitude	=	latitude_coordinate
								,longitude	=	longitude_coordinate
								,timeZoneId = timeZone_Id
                                 where agencySiteId = agencySite_Id
					
					call InsertUpdateAgencyIndustry(User_ID,agency_Id,industry_Id)

					select agency_Id, agencySite_Id , 1 as StatusValue
				end if

	 end if
		

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencyDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencyDocument`( 
 IN agencyDocument_Id bigint(20)  
,IN agency_Id bigint(20) 
,IN documentType_Id smallint(6) 
,IN file_Name varchar(1000) 
,IN fileMime_Type varchar(10) 
,IN file_ETag varchar(1000) 
,IN file_Url varchar(1000) 
,IN created_By bigint(20) 
,IN file_Status tinyint(4) 
,IN is_Deleted bit(1)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Agency Doc
 call InsertUpdateAgencyDocument(0, 1, 1, 'file name', 'doc', 'etag', 'www.tijo.com', 1, 1, 0)

*/

	if (is_Deleted = 0) THEN
		if (agencyDocument_Id =0) then
			insert into agencyDocument (agencyId ,documentTypeId ,fileName ,fileMimeType ,fileETag ,fileUrl ,createdBy ,createdOn ,fileStatus ,isDeleted)
            value (agency_Id ,documentType_Id ,file_Name ,fileMime_Type ,file_ETag ,file_Url ,created_By ,utc_timestamp() ,file_Status ,is_Deleted)
            
            IF ROW_COUNT() > 0 THEN
				set agencyDocument_Id=last_insert_id()
				select agencyDocument_Id 
			end if
        else
			update agencyDocument set  documentTypeId = coalesce(documentType_Id, documentTypeId)
										,fileName = coalesce(file_Name,fileName)
										,fileMimeType = coalesce(fileMime_Type, fileMimeType)
										,fileETag = coalesce(file_ETag, fileETag)
										,fileUrl = file_Url
										,updatedBy = coalesce(created_By, updatedBy ,createdBy)
										,updatedOn = utc_timestamp()
										,fileStatus = file_Status
										where agencyDocumentId = agencyDocument_Id
                                        
			 IF ROW_COUNT() > 0 THEN
				select agencyDocument_Id 
			 end if
        end if
    else
		update agencyDocument set  isDeleted =is_Deleted
									,updatedBy = created_By
									,updatedOn = utc_timestamp()
                                    where agencyDocumentId = agencyDocument_Id
                                    
		 IF ROW_COUNT() > 0 THEN
				select agencyDocument_Id 
		end if
        
    end if

	
    
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencyIndustry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencyIndustry`( IN UserId bigint(20) , IN agency_Id bigint(20) , IN industry_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting Agency
 Not using now
*/


if not exists (select 1 from agencyIndustry where agencyId =agency_Id) then
	insert into agencyIndustry(agencyId,industryId,createdBy,createdOn )
        values(agency_Id,industry_Id,UserId,utc_timestamp())
        
	 IF ROW_COUNT() > 0 THEN
			SELECT 	agency_Id
	END IF
else
	update agencyIndustry set industryId = industry_Id 
    ,updatedBy  = UserId
	,updatedOn = utc_timestamp()
    where agencyId = agency_Id
    
     IF ROW_COUNT() > 0 THEN
		SELECT 	agency_Id
	END IF
end if



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencyPublicLiability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencyPublicLiability`( 
  IN UserId bigint(20) 
, IN Liability_Id bigint(20)
, IN agency_Id bigint(20) 
, IN policy_Provider varchar(3000) 
, IN coverage_Amt decimal(18,2)
, IN policy_No varchar(50) 
, IN expiry_Date datetime
, IN is_Deleted bit
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting Agency PublicLiability
*/

	if (is_Deleted =0) then
		if(Liability_Id =0)then	
			insert into agencyPublicLiability(agencyId,policyProvider,coverageAmt,policyNo,expiryDate,createdBy,createdOn )
			values (agency_Id,policy_Provider,coverage_Amt,policy_No,expiry_Date,UserId,utc_timestamp())
            
            IF ROW_COUNT() > 0 THEN
				SELECT 	agency_Id
			END IF
		else
			update agencyPublicLiability
			set  
				 policyProvider = policy_Provider
				,coverageAmt = coverage_Amt
				,policyNo = policy_No
				,expiryDate = expiry_Date
				,updatedBy  = UserId
				,updatedOn = utc_timestamp()
				 where agencyPublicLiabilityId = Liability_Id
                 
			IF ROW_COUNT() > 0 THEN
				SELECT 	agency_Id
			END IF
		end if
	else
		delete from agencyPublicLiability where agencyPublicLiabilityId = Liability_Id
        
			IF ROW_COUNT() > 0 THEN
				SELECT 	agency_Id
			END IF
    end if
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencySite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencySite`( 
	IN agencySite_Id bigint(20) , 
    IN agency_Id bigint(20) , 
    IN parentAgencySite_Id bigint(20) , 
    IN site_Name varchar(1000) , 
    IN phone_No varchar(20) , 
    IN address_Line1 varchar(1000) , 
    IN address_Line2 varchar(1000) , 
    IN city_Id bigint(20) , 
    IN state_Id bigint(20) , 
    IN country_Id bigint(20) , 
    IN zip_code varchar(10) ,  
    IN created_By bigint(20),
    IN site_Description varchar(1200) ,
	IN	latitude_coordinate	decimal(21,17),
	IN	longitude_coordinate	decimal(21,17)  
    , IN timeZone_Id int
    )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting and Updating Agency site
*/

if (parentAgencySite_Id =0)then
	set parentAgencySite_Id = (select agencySiteId from agencySite where parentAgencySiteId is null and agencyId=agency_Id)
end if


-- if(isDelete = 0)  then
	if (agencySite_Id =0) then
		insert into agencySite	(agencyId  
								,parentAgencySiteId  
								,siteName  
								,phone  
								,addressLine1  
								,addressLine2  
								,cityId  
								,stateId  
								,countryId 
								,zipCode    
								,createdBy  
								,createdOn   
								,isDeleted  
                                ,siteDescription
                                ,latitude,longitude, timeZoneId
                                )
		values 					(agency_Id  
								,parentAgencySite_Id   
								,site_Name  
								,phone_No  
								,address_Line1  
								,address_Line2  
								,city_Id   
								,state_Id  
								,country_Id   
								,zip_code    
								,created_By 
								,utc_timestamp()
								,0
                                ,site_Description
                                ,latitude_coordinate,longitude_coordinate ,timeZone_Id
                                )
				
				IF ROW_COUNT() > 0 THEN
				set agencySite_Id = LAST_INSERT_ID()  
				select 1 as StatusValue , agencySite_Id,parentAgencySite_Id 
                
           
                
				insert into userRoleAgencySite (userRoleId, agencySiteId,createdBy,createdOn,status)
                select distinct ur.userRoleId,agencySite_Id, created_By, utc_timestamp(),2
				from scUser u 
				inner join userRole ur on u.userId = ur.userId
				left join userRoleAgencySite urbs on ur.userRoleId = urbs.userRoleId
				left join agencySite b on urbs.agencySiteId = b.agencySiteId
				where  ur.isDeleted =0 and urbs.isDeleted=0 and ur.isDeleted =0 and b.agencyId = agency_Id and roleId =4
                 
                 
                 insert into userRoleAgencySite (userRoleId, agencySiteId,createdBy,createdOn,status)
                 select a.* from(
					select userRoleId,agencySiteId,created_By, utc_timestamp() ,2 from 
					agencySite 
					cross join
					(
						select distinct ur.userRoleId
						from scUser u 
						inner join userRole ur on u.userId = ur.userId
						left join userRoleAgencySite urbs on ur.userRoleId = urbs.userRoleId
						left join agencySite b on urbs.agencySiteId = b.agencySiteId
						where  ur.isDeleted =0 and urbs.isDeleted=0 and ur.isDeleted =0 and b.agencyId = agency_Id and roleId =3)a
						where agencyId = agency_Id
					)a
				left join 
					(
						select ur.userRoleId,urbs.agencySiteId
						from scUser u 
						inner join userRole ur on u.userId = ur.userId
						left join userRoleAgencySite urbs on ur.userRoleId = urbs.userRoleId
						left join agencySite b on urbs.agencySiteId = b.agencySiteId
						where  ur.isDeleted =0 and urbs.isDeleted=0 and ur.isDeleted =0 and b.agencyId = agency_Id and roleId =3
					) b on a.userRoleId=b.userRoleId and a.agencySiteId=b.agencySiteId
				where b.agencySiteId is null

				end if
				
	else
		update agencySite set   siteName =site_Name
								,parentAgencySiteId=parentAgencySite_Id
							    ,phone = phone_No
								,addressLine1 = address_Line1
								,addressLine2 = address_Line2
								,cityId = city_Id
								,stateid = state_Id
								,countryId = country_Id
								,zipCode = zip_code
								,updatedBy = created_By
								,updatedOn =	utc_timestamp()
                                ,siteDescription =site_Description
							,	latitude	=	latitude_coordinate
							,	longitude	=	longitude_coordinate
                            ,timeZoneId = timeZone_Id
								where agencySiteId = agencySite_Id

				IF ROW_COUNT() > 0 THEN
					select 1 as StatusValue , agencySite_Id,parentAgencySite_Id 
				end if
		
	end if
/* else
	update agencySite set isDeleted =1,updatedBy = created_By
								,updatedOn =	utc_timestamp()  where agencySiteId = agencySite_Id

				IF ROW_COUNT() > 0 THEN
			-- if (callType =1) then
				select 1 as StatusValue 
			-- end if
				end if
end if */



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencySiteClaimsetClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencySiteClaimsetClaim`(
 IN AgencySite_Id bigint(20) 
,IN claimIds nvarchar(3000) 
,IN claimSet_Id bigint(20)  
,IN createdBy bigint(20) 
)
BEGIN
	
    declare StatusValue tinyint
	declare rowCount bigint
    declare i bigint
    declare claim_Id bigint
    set i =1
	DROP TABLE IF EXISTS tmpSplit_Agency
    CREATE TEMPORARY TABLE tmpSplit_Agency ( id bigint PRIMARY KEY auto_increment,variable VARCHAR(1000))

	SET @vars := claimIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSplit_Agency (variable) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
    set rowCount = (select count(1) from tmpSplit_Agency)
    
    update agencySiteClaimsetClaim set isDeleted = 1 ,updatedBy = createdBy
								,updatedOn =	utc_timestamp() where agencySiteId= AgencySite_Id and claimSetId=claimSet_Id
    
    while(i <= rowCount) do
		set claim_Id = (select variable from tmpSplit_Agency where id = i)
        
        if not exists(select 1 from agencySiteClaimsetClaim where agencySiteId= AgencySite_Id and claimId=claim_Id and claimSetId=claimSet_Id)then
			insert into agencySiteClaimsetClaim (agencySiteId,claimId,claimSetId,createdBy,createdOn,isDeleted)
            values(AgencySite_Id,claim_Id,claimSet_Id,createdBy,utc_timestamp(),0)
            
            IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
		else
			update agencySiteClaimsetClaim set isDeleted = 0 
												,updatedBy =createdBy 
												,updatedOn = utc_timestamp()
            where agencySiteId= AgencySite_Id and claimId=claim_Id and claimSetId=claimSet_Id
            
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
        end if
        
        set i = i+1
        
    end while
    
    select StatusValue
    DROP TABLE IF EXISTS tmpSplit_Agency



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencySiteRoleClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencySiteRoleClaim`(
 IN AgencySite_Id bigint(20) 
,IN claimIds nvarchar(3000) 
,IN role_Id bigint(20)  
,IN createdBy bigint(20) 
,IN agency_Id	bigint
)
BEGIN
	
    declare StatusValue tinyint
	declare rowCount bigint
    declare i bigint
    declare claim_Id bigint
    set i =1
	DROP TABLE IF EXISTS tmpSplit_Agency
    CREATE TEMPORARY TABLE tmpSplit_Agency ( id bigint PRIMARY KEY auto_increment,variable VARCHAR(1000))

	SET @vars := claimIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSplit_Agency (variable) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
    set rowCount = (select count(1) from tmpSplit_Agency)
    
    if AgencySite_Id is null then
		set AgencySite_Id=(select agencySiteId from agencySite where agencyId=agency_Id and parentAgencySiteId is null) 
    end if
    
    update agencySiteRoleClaim set isDeleted = 1 ,updatedBy = createdBy
								,updatedOn =	utc_timestamp() where agencySiteId= AgencySite_Id and roleId=role_Id
    
    while(i <= rowCount) do
		set claim_Id = (select variable from tmpSplit_Agency where id = i)
        
        if not exists(select 1 from agencySiteRoleClaim where agencySiteId= AgencySite_Id and claimId=claim_Id and roleId=role_Id)then
			insert into agencySiteRoleClaim (agencySiteId,claimId,roleId,createdBy,createdOn,isDeleted)
            values(AgencySite_Id,claim_Id,role_Id,createdBy,utc_timestamp(),0)
            
            IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
		else
			update agencySiteRoleClaim set isDeleted = 0 
												,updatedBy =createdBy 
												,updatedOn = utc_timestamp()
            where agencySiteId= AgencySite_Id and claimId=claim_Id and roleId=role_Id
            
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
        end if
        
        set i = i+1
        
    end while
    
    select StatusValue
    DROP TABLE IF EXISTS tmpSplit_Agency



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencyUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencyUser`(

IN user_Id bigint(20) 
, IN site_ID bigint(20) 
, IN first_Name varchar(100) 
, IN middle_Name varchar(100) 
, IN last_Name varchar(100) 
, IN User_Password varchar(1000) 
, IN Role_Category_Id smallint(6) 
, IN Role_Id bigint(20)
, IN email_Id varchar(100) 
, IN created_By bigint(20)  
, IN userRole_Id bigint(20)  
, IN userRoleSite_Id bigint(20) 
, IN encryption_Key varchar(100)

)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting and Updating Agency site users
*/

DECLARE userUniqueId nvarchar(75)
DECLARE StatusValue tinyint
DECLARE userRole_Id_new bigint
declare agency_Id bigint 

set agency_Id = (select agencyId from agencySite where agencySiteId = site_ID)
set StatusValue =0

if (user_Id = 0) then -- Insert
		if exists (select 1 from scUser where emailId = email_Id) THEN -- Check email Id is existing or not
			set User_Id = (select userId from scUser where emailId = email_Id)
            set userUniqueId = (select userUIId from scUser where userId = User_Id)

            
            if exists(select 1 from userRoleAgencySite where userRoleId in (select userRoleId from userRole where userId= User_Id and isDeleted=0) and  AgencySiteId =site_ID and isDeleted=0) then
				set StatusValue = 0
			else
				if exists(select 1 from userRole where userId= User_Id and RoleId = Role_Id) then
					set userRole_Id = (select userRoleId from userRole where userId= User_Id and RoleId = Role_Id)
				else
					insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId,isDeleted) 
					values (User_Id,Role_Id,User_Id,utc_timestamp(),Role_Category_Id, 0)
					set userRole_Id = LAST_INSERT_ID()
					set StatusValue =1
				end if
				INSERT INTO userRoleAgencySite(userRoleId,AgencySiteId,createdBy,createdOn, isDeleted)
				VALUES(userRole_Id,site_ID,created_By,utc_timestamp(), 0)
                set StatusValue =1
			end if
            
        ELSE	
			insert into scUser (  firstName ,middleName ,lastName ,RoleCategoryId ,emailId ,UserPassword  ,createdBy ,createdOn ,status ,isDeleted ,isLoggedInOnce,encryptionKey)
			values ( first_Name , middle_Name , last_Name , Role_Category_Id , email_Id , User_Password  , created_By , utc_timestamp(), 1 , 0 , 1,encryption_Key)

				IF ROW_COUNT() > 0 THEN
                
					set StatusValue =1
					set User_Id =  LAST_INSERT_ID()
					set userUniqueId = UUID() 
					set userUniqueId =CONCAT(userUniqueId , '-' , User_Id)  
					update scUser set userUIId = userUniqueId where userId = User_Id
					 
					if not exists(select 1 from userRole where userId= User_Id and RoleId = Role_Id and isDeleted =0) then
						insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId,isDeleted) 
						values (User_Id,Role_Id,User_Id,utc_timestamp(),Role_Category_Id, 0)
						set userRole_Id = LAST_INSERT_ID()
					else
						set userRole_Id = (select userRoleId from userRole where userId= User_Id and RoleId = Role_Id and isDeleted =0)
					end if
					
					if not exists(select 1 from userRoleAgencySite where userRoleId=userRole_Id and  AgencySiteId =site_ID) then
						INSERT INTO userRoleAgencySite(userRoleId,AgencySiteId,createdBy,createdOn, isDeleted)
						VALUES(userRole_Id,site_ID,created_By,utc_timestamp(), 0)
					end if

					
                
                end if  --  End for ROW_COUNT
        end if  --  End for Email Id already exists
	 else
			update scUser set 	 
							 firstName = first_Name
							,middleName = middle_Name
							,lastName = last_Name
							,RoleCategoryId = Role_Category_Id
							,emailId = email_Id
							,updatedBy = created_By
							,updatedOn = utc_timestamp()
							where userId = user_Id

				IF ROW_COUNT() > 0 THEN
					set userUniqueId = (select userUIId from scUser where userId = User_Id)
                    set StatusValue = 1
				end if
                
                
                if not exists(select 1 from userRole where userId= User_Id and RoleId = Role_Id and isDeleted =0) then
					insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId,isDeleted) 
					values (User_Id,Role_Id,User_Id,utc_timestamp(),Role_Category_Id, 0)
					set userRole_Id_new = LAST_INSERT_ID()
                      -- select 1   
                      
					if not exists(select 1 from userRoleAgencySite where userRoleId in (select userRoleId from userRole where userId= userId and isDeleted =0) and AgencySiteId =site_ID and isDeleted = 0) then	
						INSERT INTO userRoleAgencySite(userRoleId,AgencySiteId,createdBy,createdOn, isDeleted)
						VALUES(userRole_Id_new,site_ID,created_By,utc_timestamp(), 0)
                        
                        update userRoleAgencySite set isDeleted=1 where userRoleAgencySiteId = userRoleSite_Id
					else
						  -- select 2   
						update userRoleAgencySite set userRoleId = userRole_Id_new where userRoleAgencySiteId = userRoleSite_Id
					end if
                        
                        -- update userRole set isDeleted = 1 where userRoleId=userRole_Id
				else
                  -- select 3   
					if not exists(select 1 from userRoleAgencySite where userRoleId in (select userRoleId from userRole where userId= user_Id and  isDeleted =0) and  AgencySiteId =site_ID and isDeleted = 0) then	
						-- select 3.1
                        INSERT INTO userRoleAgencySite(userRoleId,AgencySiteId,createdBy,createdOn, isDeleted)
						VALUES(userRole_Id,site_ID,created_By,utc_timestamp(), 0)
                        
                         update userRoleAgencySite set isDeleted = 1 where userRoleAgencySiteId=userRoleSite_Id
					 else if not exists(select 1 from userRoleAgencySite where userRoleId = (select userRoleId from userRole where userId= user_Id and roleId = Role_Id and  isDeleted =0) and  AgencySiteId =site_ID) THEN
						 update userRoleAgencySite set userRoleId = (select userRoleId from userRole where userId= user_Id and roleId = Role_Id and  isDeleted =0)  
                         where userRoleAgencySiteId = userRoleSite_Id
                         
					-- ELSE
						-- update userRoleBusinessSite set BusinessSiteId =site_ID where userRoleBusinessSiteId = userRoleSite_Id
					 end if
					end if
                    
                  
					
				end if 
	end if -- End for user_Id = 0 check
    
select User_Id,userUniqueId,StatusValue 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateAgencyWrkerCompensation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateAgencyWrkerCompensation`( 
  IN UserId bigint(20) 
, IN Compensation_Id bigint(20)
, IN agency_Id bigint(20) 
, IN policy_Provider varchar(3000) 
, IN coverage_Amt decimal(18,2)
, IN policy_No varchar(50) 
, IN expiry_Date datetime
, IN is_Deleted bit
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting and Updating Agency Worker compensation
 call InsertUpdateAgencyWrkerCompensation(1, 26, 1, 'PP', 100, '122', null, 1)
*/




	if (is_Deleted =0) then
		if(Compensation_Id =0)then	
			insert into agencyWorkerCompensation(agencyId,policyProvider,coverageAmt,policyNo,expiryDate,createdBy,createdOn )
			values (agency_Id,policy_Provider,coverage_Amt,policy_No,expiry_Date,UserId,utc_timestamp())
            
            IF ROW_COUNT() > 0 THEN
				SELECT 	agency_Id
			END IF
		else
			update agencyWorkerCompensation
			set  
				 policyProvider = policy_Provider
				,coverageAmt = coverage_Amt
				,policyNo = policy_No
				,expiryDate = expiry_Date
				,updatedBy  = UserId
				,updatedOn = utc_timestamp()
				 where agencyWorkerCompId = Compensation_Id
                 
			IF ROW_COUNT() > 0 THEN
				SELECT 	agency_Id
			END IF
				
		end if
	else
		delete from agencyWorkerCompensation where agencyWorkerCompId = Compensation_Id
			IF ROW_COUNT() > 0 THEN
				SELECT 	agency_Id
			END IF
    end if
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBeacon` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBeacon`(
 IN beacon_Id bigint(20)
, IN uu_Id varchar(200)
, IN beacon_Name  varchar(200)
, IN major_Val bigint(20)
, IN minor_Val bigint(20)
, IN user_Id bigint(20)
, IN is_Enabled bit(1)
, IN is_Deleted bit(1)
, IN business_Id bigint(20)
, IN is_Registered bit(1)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 16/05/2016
 Description : Insert Update Beacon
 call est_skillsconnect_dev.InsertUpdateBeacon(0, '2abcedfghijkl234', 'beacon1', 10, 20, 136, 1, 0)
*/
	IF coalesce(beacon_Id,0)=0 and is_Deleted=0 THEN
    
		INSERT INTO  beacon (businessId,UUID,beaconName,major,minor,isEnabled,createdBy,createdOn,isRegistered) 
        VALUES (business_Id,uu_Id,beacon_Name,major_Val,minor_Val,is_Enabled,user_Id,utc_timestamp(),is_Registered)
		
        IF ROW_COUNT() > 0 THEN
			set beacon_Id = LAST_INSERT_ID()
		END IF
        
       INSERT INTO  beaconSummary (beaconId,GPSLocationDisparityCount,clockOnCount,manualSubmittedTimesheets,createdBy,createdOn) 
				VALUES (beacon_Id,0,0,0,user_Id,utc_timestamp())
	
		IF ROW_COUNT() > 0 THEN
			select beacon_Id
		END IF
        
	ELSEIF is_Deleted=0 THEN
		UPDATE beacon SET 
				uuid=coalesce(uu_id,UUID),
				beaconName=beacon_name,
				major = coalesce(major_val,major),
				minor=coalesce(minor_val,minor),
                isEnabled = is_Enabled,
				updatedBy=user_Id,
				updatedOn=utc_timestamp(),
				isRegistered = is_Registered
			WHERE beaconId = beacon_Id
		
		IF ROW_COUNT() > 0 THEN
			SELECT beacon_Id
            UPDATE beaconSettings SET 
					updatedBy=user_Id,
					updatedOn=utc_timestamp(),
					isDeleted = 0
				WHERE beaconId = beacon_Id AND is_Registered=0
			
            UPDATE beaconSummary set 
					GPSLocationDisparityCount=0,
					clockOnCount=0,
					manualSubmittedTimesheets=0,
                    updatedBy=user_Id,
					updatedOn=utc_timestamp()
                WHERE  beaconId = beacon_Id AND is_Registered=0
                
			DELETE FROM beaconBusinessSite WHERE beaconId = beacon_Id AND is_Registered=0
			DELETE FROM beaconDepartment WHERE beaconId = beacon_Id AND is_Registered=0
			DELETE FROM beaconSubClassification WHERE beaconId = beacon_Id AND is_Registered=0
		END IF
	ELSE 
    
		UPDATE beacon SET 
					isDeleted = 1,
                    updatedBy=user_Id,
                    updatedOn=utc_timestamp()
			WHERE beaconId = beacon_Id and businessId = business_Id
            
		IF ROW_COUNT() > 0 THEN
			select beacon_Id
		END IF
        
	END IF
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBeaconBusinessSites` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBeaconBusinessSites`(
 IN beacon_Id bigint(20)
, IN businessSite_Id bigint(20)
, IN department_Id bigint(20)
, IN subClassification_Id  bigint(20)
, IN user_Id bigint(20)
, IN is_Deleted bit(1)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 16/05/2016
 Description : Insert Update BeaconBusinessSites
 call est_skillsconnect_dev.InsertUpdateBeaconBusinessSites(5, 10, 10, 10, 136, 0)
*/
	IF NOT EXISTS (SELECT 1 FROM beaconBusinessSite WHERE  beaconId=beacon_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id AND businessSiteId=businessSite_Id) THEN
    
		INSERT INTO  beaconBusinessSite (beaconId,departmentId,subClassificationId,businessSiteId,createdBy,createdOn) 
        VALUES (beacon_Id,department_Id,subClassification_Id,businessSite_Id,user_Id,utc_timestamp())
		
        IF ROW_COUNT() > 0 THEN
            select beacon_Id
		END IF
        
	ELSE
    
		UPDATE beaconBusinessSite SET isDeleted = is_Deleted,
				updatedBy = user_Id,
                updatedOn = utc_timestamp()
			WHERE beaconId = beacon_Id
				AND departmentId=department_Id
                AND subClassificationId = subClassification_Id
                AND businessSiteId = businessSite_Id
		
        IF ROW_COUNT() > 0 THEN
			SELECT beacon_Id
		END IF
        
	END IF
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBeaconSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBeaconSettings`(
 IN beacon_Id bigint(20)
, IN proximityOf_TouchPoint tinyint(4)
, IN is_EnabledBeaconGPS bit(1)
, IN reset_GPSPosition  bit(1)
, IN is_EnabledStaffGPS  bit(1)
, IN staff_GPSCheckPoints  int(11)
, IN is_AutoClockOffStaff  bit(1)
, IN is_TimeSheetApprovalRequired  bit(1)
, IN is_AllowEarlyStart  bit(1)
, IN allowMinTimeBefore_ShiftStart  tinyint(4)
, IN allowMaxTimeBefore_ShiftStart  tinyint(4)
, IN is_AllowLateStart  bit(1)
, IN allowMinTimeAfter_ShiftStart  tinyint(4)
, IN allowMaxTimeAfter_ShiftStart  tinyint(4)
, IN user_Id bigint(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 16/05/2016
 Description : Insert Update BeaconSettings
 call est_skillsconnect_dev.InsertUpdateBeaconSettings(5, 'Close', 1, 1, 1, 100, 1, 1, 1, '30', '30', 1, '30', '30', 136)
 proximityOf_TouchPoint : 1 - Close
						  2 - Medium
*/
	IF NOT EXISTS (SELECT 1 FROM beaconSettings WHERE  beaconId=beacon_Id) THEN
    
		INSERT INTO  beaconSettings (beaconId,proximityOfTouchPoint,isEnabledBeaconGPS,resetGPSPosition,isEnabledStaffGPS,staffGPSCheckPoints,isAutoClockOffStaff,isTimeSheetApprovalRequired,isAllowEarlyStart,allowMinTimeBeforeShiftStart,allowMaxTimeBeforeShiftStart,isAllowLateStart,allowMinTimeAfterShiftStart,allowMaxTimeAfterShiftStart,createdBy,createdOn) 
        VALUES (beacon_Id,proximityOf_TouchPoint,is_EnabledBeaconGPS,reset_GPSPosition,is_EnabledStaffGPS,staff_GPSCheckPoints,is_AutoClockOffStaff,is_TimeSheetApprovalRequired,is_AllowEarlyStart,allowMinTimeBefore_ShiftStart,allowMaxTimeBefore_ShiftStart,is_AllowLateStart,allowMinTimeAfter_ShiftStart,allowMaxTimeAfter_ShiftStart,user_Id,utc_timestamp())
		
        IF ROW_COUNT() > 0 THEN
            select beacon_Id
		END IF
        
	ELSE
    
		UPDATE beaconSettings SET proximityOfTouchPoint = proximityOf_TouchPoint,
				isEnabledBeaconGPS = is_EnabledBeaconGPS,
                resetGPSPosition = reset_GPSPosition,
                isEnabledStaffGPS = is_EnabledStaffGPS,
                staffGPSCheckPoints = staff_GPSCheckPoints,
                isAutoClockOffStaff = is_AutoClockOffStaff,
                isTimeSheetApprovalRequired = is_TimeSheetApprovalRequired,
                isAllowEarlyStart = is_AllowEarlyStart,
                allowMinTimeBeforeShiftStart = allowMinTimeBefore_ShiftStart,
                allowMaxTimeBeforeShiftStart = allowMaxTimeBefore_ShiftStart,
                isAllowLateStart = is_AllowLateStart,
                allowMinTimeAfterShiftStart = allowMinTimeAfter_ShiftStart,
                allowMaxTimeAfterShiftStart = allowMaxTimeAfter_ShiftStart,
				updatedBy = user_Id,
                updatedOn = utc_timestamp()
			WHERE beaconId = beacon_Id
		
        IF ROW_COUNT() > 0 THEN
			SELECT beacon_Id
		END IF
        
	END IF
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusiness` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusiness`( 
  IN business_Id bigint(20) 
, IN business_Name varchar(200) 
, IN industry_Id bigint(20) 
, IN areaOf_expertiseId int(11)
, IN business_Reg_Id varchar(30) 
, IN phone_No varchar(20) 
, IN fax_No varchar(20) 
, IN timeSheetWeekEndDay_Id tinyint(4) 
, IN address_Line1 varchar(1000) 
, IN address_Line2 varchar(1000) 
, IN country_Id bigint(20) 
, IN state_Id bigint(20) 
, IN city_Id bigint(20) 
, IN zip_Code varchar(20) 
, IN User_ID bigint(20)  
, IN privacy_Policy text
, IN termsAnd_Condition text
, IN business_Url varchar(150)
, IN business_Description varchar(1200)
, IN lang_Id int
, IN latitude_coordinate	decimal(21,17)
, IN longitude_coordinate	decimal(21,17)
, IN timeZone_Id int
, in job_ClassificationId int
, in other_JobClassification varchar(100)

 )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting and Updating Business
*/


DECLARE userclaimSet_Id bigint
DECLARE businessSite_Id bigint
DECLARE StatusValue bigint
DECLARE primary_businessSite_Id bigint
DECLARE city_name nvarchar(200)

set city_name = (select cityName from cityLocale where cityId =city_Id and languageId =lang_Id )
set userclaimSet_Id = (select userRoleId from userRole where userId=User_ID and RoleId =3)


	if (business_Id=0) then
			-- if not exists (select 1 from userRoleBusinessSite where userRoleId =userclaimSet_Id )then
				insert into business (businessRegId ,businessName ,createdBy ,createdOn ,isDeleted ,status , timeSheetWeekEndDayId,areaOfexpertiseId , privacyPolicy,countryId ,stateId ,cityId ,phone ,fax  ,addressLine1 ,addressLine2, zipCode,termsAndCondition,businessUrl,businessDescription,latitude,longitude,timeZoneId,jobClassificationId,otherJobClassification)
				values (business_Reg_Id ,business_Name ,User_ID ,utc_timestamp(),0,1,timeSheetWeekEndDay_Id,areaOf_expertiseId, privacy_Policy,country_Id ,state_Id ,city_Id ,phone_No ,fax_No  ,address_Line1 ,address_Line2, zip_Code,termsAnd_Condition,business_Url,business_Description,latitude_coordinate,longitude_coordinate,timeZone_Id,job_ClassificationId,other_JobClassification )
					
					IF ROW_COUNT() > 0 THEN
                    
					set business_Id = LAST_INSERT_ID()  

					 -- creating parent business site
                     insert into businessSite (businessId,siteName,countryId,stateId,cityId,phone,addressLine1,addressLine2,fax,zipCode,createdBy,createdOn,isDeleted,latitude,longitude,timeZoneId)
					 values(business_Id,city_name,country_Id ,state_Id ,city_Id ,phone_No ,address_Line1 ,address_Line2,fax_No,zip_Code,User_ID ,utc_timestamp(),0,latitude_coordinate,longitude_coordinate,timeZone_Id )
					 set businessSite_Id = LAST_INSERT_ID()
					 
                     -- mapping created user as business admin for the same business
                     insert into userRoleBusinessSite (userRoleId, businessSiteId,createdBy,createdOn,status)
                     values (userclaimSet_Id,businessSite_Id,User_ID ,utc_timestamp(),2)
                  
					 -- creating industry for the business
                     call InsertUpdateBusinessIndustry(User_ID,business_Id,industry_Id)
                     
					 -- creating default business function for business admin
                     insert into roleBusinessFunction (roleId,businessFunctionId,businessId,roleCategoryId,createdBy,createdOn)
                     values (3,16,business_Id,3,User_ID,utc_timestamp())
                     
                     set StatusValue = 1
					 select business_Id,businessSite_Id,StatusValue 
					end if
				
			-- else
				-- select business_Id, 0 as businessSite_Id, 2 as StatusValue 
			-- end if
	else
		update business set 
						 businessRegId = business_Reg_Id
						,businessName = business_Name
						,updatedBy = User_ID
						,updatedOn = utc_timestamp()
						,timeSheetWeekEndDayId = timeSheetWeekEndDay_Id
                        ,areaOfexpertiseId = areaOf_expertiseId
                        ,privacyPolicy = privacy_Policy
                        ,countryId  = country_Id
						,stateId = state_Id
						,cityId = city_Id
						,phone = phone_No
						,fax  = fax_No
						,addressLine1 = address_Line1
						,addressLine2 = address_Line2
                        ,zipCode = zip_code
                        ,termsAndCondition = termsAnd_Condition
                        ,businessUrl=business_Url
                        ,businessDescription=business_Description
						,latitude	=	latitude_coordinate
						,longitude	=	longitude_coordinate
						,timeZoneId = timeZone_Id
                        ,jobClassificationId = job_ClassificationId
						,otherJobClassification = other_JobClassification
					where businessId = business_Id
				
				
                IF ROW_COUNT() > 0 THEN
				set businessSite_Id = (select businessSiteId from businessSite  where businessId = business_Id and parentBusinessSiteId is null)
                update businessSite set 
								siteName  	= city_name
								,countryId  = country_Id
								,stateId 	= state_Id
								,cityId   	= city_Id
								,phone  	= phone_No
								,addressLine1 = address_Line1
								,addressLine2 = address_Line2
								,fax  		= fax_No
								,zipCode 	= zip_code
								,updatedBy 	= User_ID
								,updatedOn  = utc_timestamp()
								,latitude	=	latitude_coordinate
								,longitude	=	longitude_coordinate
								,timeZoneId = timeZone_Id
                                 where businessSiteId = businessSite_Id
					
                    
                 update businessSite set 
						childHierarchy =GetBusinessFamily(businessSiteId),
						parentHierarchy = GetBusinessAncestry(businessSiteId)
				 where businessId = business_Id

                    
					call InsertUpdateBusinessIndustry(User_ID,business_Id,industry_Id)
					set StatusValue = 1
					select business_Id,businessSite_Id,StatusValue 
				end if

	 end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessCandidateSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessCandidateSettings`(
	 in business_Id	bigint(20)
	,in candidate_UserId	bigint(20)
	,in is_Emergency	bit(1)
	,in created_By	bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 21/03/2016
 Description : insert update business candidate settings 
 */
declare status_Value bit(1)
set status_Value=0

	if not exists(select businessId from businessCandidateSettings  where businessId=business_Id and candidateUserId=candidate_UserId)  then
		insert into businessCandidateSettings (
						businessId
						,candidateUserId
						,isEmergency
						,createdBy
						,createdOn )
			values (business_Id,candidate_UserId, is_Emergency, created_By, utc_timestamp())
			if row_count()>0 then
				set status_Value=1 
			end if    
	else
			update businessCandidateSettings set 
				 isEmergency=is_Emergency
				,updatedBy=created_By
				,updatedOn=utc_timestamp()
			where businessId=business_Id and candidateUserId=candidate_UserId
			if row_count()>0 then
				set status_Value=1 
			end if  
	end if
 
	select status_Value
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessCostCentre` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessCostCentre`( 
  IN CostCentre_Id bigint(20) 
, IN Business_Id bigint(20) 
, IN CostCentre_Name varchar(75) 
, IN CostCentre_Description varchar(500) 
, IN Created_By bigint(20)
, IN is_Deleted bit
)
BEGIN 
 
 /*
 Author: James
 Date  : 17/02/2015
 Description : inser update business Cost Centre
 call est_skillsconnect.InsertUpdateBusinessCostCentre(0, 1, 'Test2sa', 'saffdsasas', 1, 0)
 */

if is_Deleted=0 then
		if (CostCentre_Id = 0) then
			INSERT INTO businessCostCentre(costCentreName,businessId,description ,createdBy ,createdOn ,isDeleted)
			 VALUES ( CostCentre_Name ,Business_Id,CostCentre_Description ,Created_By ,utc_timestamp(),0 	)
			
			IF ROW_COUNT() > 0 THEN
				set CostCentre_Id = last_insert_id()
				select CostCentre_Id 
			end if

		else
			update businessCostCentre set 
									   costCentreName = costCentre_Name
									  ,description = CostCentre_Description
									  ,isDeleted = 0
									  ,updatedBy = Created_By
									  ,updatedOn = utc_timestamp()
				  where costCentreId = CostCentre_Id

				IF ROW_COUNT() > 0 THEN 
					select CostCentre_Id 
				 end if
		end if
else
	update businessCostCentre set 
			 isDeleted = 1
			,updatedBy = Created_By
			,updatedOn = utc_timestamp()
	where costCentreId = CostCentre_Id

	IF ROW_COUNT() > 0 THEN 
		select CostCentre_Id 
	 end if

end if
		
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessDepartment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessDepartment`(
   IN	department_Id	bigint(20)
 , IN	business_Id	bigint(20)
 , IN	department_Name	varchar(100)
 , IN	created_By	bigint(20)
 , IN	is_Deleted	bit(1)
)
BEGIN

/*
 Author: Tijo
 Date  : 17/02/2015
 Description : inser update business department
 */

	if (is_Deleted=0) then
			if(department_Id=0) then
					insert into businessDepartment (
									businessId
								,	departmentName
								,	createdBy
								,	createdOn
								,	isDeleted )
						 values ( 	business_Id
								,	department_Name
								,	created_By
								,	utc_timestamp()
								,	0)
                      
                      if row_count()>0 then
							select last_insert_id() StatusValue 
                      end if
            else 
					update businessDepartment set 
								businessId	=	business_Id
							,	departmentName	=	department_Name
							,	updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
							,	isDeleted	=	0
					where 	departmentId	=	department_Id
					   if row_count()>0 then
							select department_Id as StatusValue 
                      end if
            end if
    
    else
			update businessDepartment set 
								updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
							,	isDeleted	=	1
					where 	departmentId	=	department_Id
				   if row_count()>0 then
						select department_Id as StatusValue 
				  end if  
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessDocument`( 
 IN businessDocument_Id bigint(20)  
,IN business_Id bigint(20) 
,IN documentType_Id smallint(6) 
,IN file_Name varchar(1000) 
,IN fileMime_Type varchar(10) 
,IN file_ETag varchar(1000) 
,IN file_Url varchar(1000) 
,IN created_By bigint(20) 
,IN file_Status tinyint(4) 
,IN is_Deleted bit(1)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Business Doc
 call InsertUpdateBusinessDocument(0, 1, 1, 'File name', 'doc', 'Etag', 'www.tijo.com', 1, 1, 0)
*/

	if (is_Deleted = 0) THEN
		if (businessDocument_Id =0) then
			insert into businessDocument (businessId ,documentTypeId ,fileName ,fileMimeType ,fileETag ,fileUrl ,createdBy ,createdOn ,fileStatus ,isDeleted)
            value (business_Id ,documentType_Id ,file_Name ,fileMime_Type ,file_ETag ,file_Url ,created_By ,utc_timestamp() ,file_Status ,is_Deleted)
            
            IF ROW_COUNT() > 0 THEN
				set businessDocument_Id =  LAST_INSERT_ID()
				select businessDocument_Id 
			end if
        else
			update businessDocument set  documentTypeId = coalesce(documentType_Id,documentTypeId)
										,fileName = coalesce(file_Name, fileName)
										,fileMimeType = coalesce(fileMime_Type, fileMimeType)
										,fileETag = coalesce(file_ETag, fileETag)
										,fileUrl = file_Url
										,updatedBy =  coalesce(created_By, updatedBy ,createdBy)
										,updatedOn = utc_timestamp()
										,fileStatus = file_Status
										where businessDocumentId = businessDocument_Id
                                        
			 IF ROW_COUNT() > 0 THEN
				select businessDocument_Id 
			 end if
        end if
    else
		update businessDocument set  isDeleted =is_Deleted
									,updatedBy = created_By
									,updatedOn = utc_timestamp()
                                    where businessDocumentId = businessDocument_Id
                                    
		 IF ROW_COUNT() > 0 THEN
				select businessDocument_Id 
		end if
        
    end if

	
    
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessFeature` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessFeature`(
 IN business_Id bigint(20)  
,IN feature_Id tinyint(4)  
,IN created_By bigint(20) 
,IN is_Deleted bit
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Business Feature
 call InsertUpdateBusinessFeature(1, 1, 1, 0)
*/

set @featureAmount = (select Amount from feature where featureId = feature_Id)
	
    if (is_Deleted =0 ) then
		insert into businessFeature (businessId, featureId, createdBy, createdOn,isDeleted,featureAmount)
		values (business_Id, feature_Id, created_By, utc_timestamp(),0,@featureAmount)
    
		IF ROW_COUNT() > 0 THEN
		select business_Id
		end if
	else
		update businessFeature set  isDeleted = is_Deleted , updatedBy = created_By , updatedOn = utc_timestamp()
        where businessId = business_Id and featureId = feature_Id 
        
        IF ROW_COUNT() > 0 THEN
		select business_Id
		end if
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessFunctionRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessFunctionRole`(

 IN businessFunctionIds nvarchar(3000) 
,IN role_Id bigint(20)  
,IN createdBy bigint(20) 
,IN business_Id bigint(20)
,IN roleCategory_Id tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Mapping business Function to a role
*/

	
    declare StatusValue tinyint
	declare rowCount bigint
    declare i bigint
    declare businessFunction_Id bigint
    set i =1
	DROP TABLE IF EXISTS tmpSplit
    CREATE TEMPORARY TABLE tmpSplit ( id bigint PRIMARY KEY auto_increment,variable VARCHAR(1000))

	SET @vars := businessFunctionIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSplit (variable) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
    set rowCount = (select count(1) from tmpSplit)
    
   
    update roleBusinessFunction set isDeleted = 1 where businessId= business_Id and roleId=role_Id and roleCategoryId = roleCategory_Id
    IF ROW_COUNT() > 0 THEN
		set StatusValue =1 
	end if
    
    
    
    if (length(businessFunctionIds) >0) then
  --  while(i <= rowCount) do
	-- 	set businessFunction_Id = (select variable from tmpSplit where id = i)
         
        
      --  if not exists(select 1 from roleBusinessFunction where businessId= business_Id and businessFunctionId=businessFunction_Id and roleId=role_Id and  roleCategoryId = roleCategory_Id)then
	-- 		insert into roleBusinessFunction (businessId,businessFunctionId,roleId,createdBy,createdOn,isDeleted,roleCategoryId)
     --       values(business_Id,businessFunction_Id,role_Id,createdBy,utc_timestamp(),0,roleCategory_Id)
				
                insert into roleBusinessFunction (businessId,businessFunctionId,roleId,createdBy,createdOn,isDeleted,roleCategoryId)
				select business_Id,t.variable,role_Id,createdBy,utc_timestamp(),0,roleCategory_Id 
                from tmpSplit t left join roleBusinessFunction rbf 
				on t.variable=rbf.businessFunctionId and rbf.businessId= business_Id
				and rbf.roleId=role_Id and  rbf.roleCategoryId = roleCategory_Id 
				where rbf.businessFunctionId is null 
            
            IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
		-- else
			update roleBusinessFunction set isDeleted = 0 
												,updatedBy =createdBy 
												,updatedOn = utc_timestamp()
            where businessId= business_Id  and roleId=role_Id and  roleCategoryId = roleCategory_Id
            and businessFunctionId in(select variable from tmpSplit)
            
            
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
       -- end if
        
      --  set i = i+1
        
  --  end while
    end if
    select coalesce( StatusValue,0)as StatusValue
    DROP TABLE IF EXISTS tmpSplit



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessGrade` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessGrade`(
   IN	grade_Id	bigint(20)
 , IN	grade_Name	varchar(100)
 , IN	business_Id	bigint(20)
 , IN	created_By	bigint(20)
 , IN	is_Deleted	bit(1)
)
BEGIN
/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Business Grade for job profile
*/


	if (is_Deleted=0) then
			if(grade_Id=0) then
					insert into businessGrade (
										gradeName
									,	businessId
									,	createdBy
									,	createdOn
									,	isDeleted )
							values (	grade_Name
									,	business_Id
									,	created_By
									,	utc_timestamp()
									,	0 )
                              
                      if row_count()>0 then
							select last_insert_id() StatusValue 
                      end if 
            else
					update businessGrade set 
								gradeName	=	grade_Name
							,	businessId	=	business_Id
							,	updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
							,	isDeleted	=	0
						where	gradeId	=	grade_Id
						 
					  if row_count()>0 then
							select grade_Id as StatusValue 
                      end if
            end if
    
    else
			update businessGrade set
						updatedBy	=	created_By
					,	updatedOn	=	utc_timestamp()
					,	isDeleted	=	1
				where	gradeId	=	grade_Id
				 
			  if row_count()>0 then
					select grade_Id as StatusValue 
			  end if
    end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessIndustry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessIndustry`( IN UserId bigint(20) , IN Business_Id bigint(20) , IN industry_Id bigint(20) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Business Industry
*/
	
    if not exists (select 1 from businessIndustry where BusinessId =business_Id) then
		insert into businessIndustry(businessId,industryId,createdBy,createdOn )
        values(business_Id,industry_Id,UserId,utc_timestamp())
	else
		update businessIndustry set industryId = industry_Id where businessId = business_Id
	end if
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessLicense` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessLicense`(
  IN	license_Id	bigint(20)
, IN	license_Name	varchar(100)
, IN	business_Id	bigint(20)
, IN	created_By	bigint(20)
, IN	is_Deleted	bit(1)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Business License for job profile
*/
	if (is_Deleted=0) then
			if(license_Id=0 ) then
					insert into businessLicense (
								licenseName
							,	businessId
							,	createdBy
							,	createdOn 
							,	isDeleted )
						values (	license_Name
								,	business_Id
								,	created_By
								,	utc_timestamp()
								,	0 )
                                
					  if row_count()>0 then
							select last_insert_id() StatusValue 
                      end if 
            else
					update businessLicense set 
								licenseName	=	license_Name
							,	businessId	=	business_Id
							,	updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
							,	isDeleted	=	0
						where	licenseId	=	license_Id
					
					  if row_count()>0 then
							select license_Id as StatusValue 
                      end if
            end if     
    else
			update  businessLicense set 	
							updatedBy	=	created_By
						,	updatedOn	=	utc_timestamp()
						,	isDeleted	=	1
					where	licenseId	=	license_Id 				
				  if row_count()>0 then
						select license_Id as StatusValue 
				  end if
    
    end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessPrefferedAgency` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessPrefferedAgency`( IN business_Site_Id bigint(20) , IN Agency_Site_Id bigint(20) , IN created_By bigint(20) , IN is_Delete bit(1) )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Preffered Agency
*/


DECLARE StatusValue bigint

		
		if exists (select 1 from businessSitePreferredAgency where businessSiteId = business_Site_Id and AgencySiteId = Agency_Site_Id) then
			update businessSitePreferredAgency set 
			 isDeleted = is_Delete
			,updatedBy = created_By
			,updatedOn = utc_timestamp()
            ,isNotified = case when is_Delete=0 then 0 else 1 end
			where  businessSiteId = business_Site_Id and AgencySiteId = Agency_Site_Id
			
			IF ROW_COUNT() > 0 THEN 
				set StatusValue =1
				select StatusValue
			end if
		else
			insert into businessSitePreferredAgency (businessSiteId , AgencySiteId , createdBy, createdOn , isDeleted)
			values (business_Site_Id, Agency_Site_Id, created_By, utc_timestamp() , 0)

			IF ROW_COUNT() > 0 THEN 
				set StatusValue =1
				select StatusValue
			end if
		end if

	





END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessPublicLiability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessPublicLiability`( 
  IN UserId bigint(20) 
, IN Liability_Id bigint(20)
, IN business_Id bigint(20) 
, IN policy_Provider varchar(3000) 
, IN coverage_Amt decimal(18,2)
, IN policy_No varchar(50) 
, IN expiry_Date datetime
, IN is_Deleted bit
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting and Updating Business PublicLiability
*/

	if (is_Deleted =0) then
		if(Liability_Id =0)then	
			insert into businessPublicLiability(businessId,policyProvider,coverageAmt,policyNo,expiryDate,createdBy,createdOn )
			values (business_Id,policy_Provider,coverage_Amt,policy_No,expiry_Date,UserId,utc_timestamp())
            
            IF ROW_COUNT() > 0 THEN
				SELECT business_Id
			END IF
		else
			update businessPublicLiability
			set  
				 policyProvider = policy_Provider
				,coverageAmt = coverage_Amt
				,policyNo = policy_No
				,expiryDate = expiry_Date
				,updatedBy  = UserId
				,updatedOn = utc_timestamp()
				 where businessPublicLiabilityId = Liability_Id
                 
			IF ROW_COUNT() > 0 THEN
				SELECT 	business_Id
			END IF
		end if
	else
		delete from businessPublicLiability where businessPublicLiabilityId = Liability_Id
			IF ROW_COUNT() > 0 THEN
				SELECT 	business_Id
			END IF
    end if
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessShiftTemplate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessShiftTemplate`(
 in shiftTemplate_Id varchar(10000)
,in businessSite_Id BIGINT(20)
,IN department_Id BIGINT(20)
,IN subClassification_Id bigint(20)
,in week_DayId tinyint(1) 
,in shift_StartTime time
,in shift_EndTime time
,in isFlexible_ShiftTime bit(1)
,in total_Shifts tinyint(2)
,in longBreak1_Start varchar(20)
,in longBreak2_Start VARCHAR(20)
,in shortBreak1_Start VARCHAR(20)
,in shortBreak2_Start VARCHAR(20)
,in created_By BIGINT(20)
,in is_Deleted bit(1)
,in shiftEndTime_Type	tinyint(4)
,in shiftEndTime_Value	varchar(30)

)
BEGIN
/*
 Author: James
 Date  : 25/04/2016
 Description : Insert or update shift templates
*/
declare statusValue bit(1)
declare shiftCount tinyint(4)
set statusValue=0
set longBreak1_Start=(select case when longBreak1_Start='' then null else longBreak1_Start end )
set longBreak2_Start=(select case when longBreak2_Start='' then null else longBreak2_Start end )
set shortBreak1_Start=(select case when shortBreak1_Start='' then null else shortBreak1_Start end )
set shortBreak2_Start=(select case when shortBreak2_Start='' then null else shortBreak2_Start end )

set shiftCount=(
	select count(1)tt from businessShiftTemplate 
	where businessSiteId=businessSite_Id and departmentId=department_Id 
	and subClassificationId=subClassification_Id and weekDayId= week_DayId  
	and shiftStartTime= shift_StartTime and shiftEndTime=shift_EndTime and isDeleted=0)
 
SET SQL_SAFE_UPDATES = 0
if is_Deleted=0 THEN 
	IF coalesce(shiftTemplate_Id,'0')='0' and total_Shifts<>0 THEN -- insert
    set total_Shifts=(select case when (total_Shifts+ shiftCount)>99 then 99-shiftCount else total_Shifts end )
    
			insert into businessShiftTemplate(
						  businessSiteId
						, departmentId
						, subClassificationId
						, weekDayId 
						, shiftStartTime
						, shiftEndTime
						, isFlexibleShiftTime
						, longBreak1Start
						, longBreak2Start
						, shortBreak1Start
						, shortBreak2Start
                        , createdBy
						, createdOn
						, isDeleted 
                        ,shiftEndTimeType	 
						,shiftEndTimeValue
                        )
				select  
						  businessSite_Id 
						, department_Id 
						, subClassification_Id 
						, week_DayId  
						, shift_StartTime 
						, shift_EndTime 
						, isFlexible_ShiftTime 
						, longBreak1_Start 
						, longBreak2_Start 
						, shortBreak1_Start 
						, shortBreak2_Start 
						, created_By 
                        , utc_timestamp()
						, 0
                        ,shiftEndTime_Type 
						,shiftEndTime_Value
                from city
				limit total_Shifts
				if row_count()>0 then 
						set statusValue=1
						UPDATE businessSettings SET settingStatus=3 WHERE businessSiteId=businessSite_Id and departmentId=department_Id
                end if
    else -- update
			 update businessShiftTemplate set
						 businessSiteId	=	 businessSite_Id 
						, departmentId	=	 department_Id 
						, subClassificationId	=	 subClassification_Id 
						, weekDayId	=	 week_DayId  
						, shiftStartTime	=	 shift_StartTime 
						, shiftEndTime	=	 shift_EndTime 
						, isFlexibleShiftTime	=	 isFlexible_ShiftTime 
						, longBreak1Start	=	 longBreak1_Start 
						, longBreak2Start	=	 longBreak2_Start 
						, shortBreak1Start	=	 shortBreak1_Start 
						, shortBreak2Start	=	 shortBreak2_Start 
                        , shiftEndTimeType	= 	 shiftEndTime_Type
						, shiftEndTimeValue	=    shiftEndTime_Value
						, updatedBy	=	created_By
						, updatedOn	=	utc_timestamp() 
             where  find_in_set(shiftTemplateId ,shiftTemplate_Id) 
             	if row_count()>0 then 
						set statusValue=1
				end if
    end if
else -- delete
		update businessShiftTemplate set
			  isDeleted  = 1
			, updatedBy	=	created_By
			, updatedOn	=	utc_timestamp() 
        where  find_in_set(shiftTemplateId ,shiftTemplate_Id) 
		if row_count()>0 then 
				set statusValue=1
		end if
end if
SET SQL_SAFE_UPDATES = 1
	SELECT statusValue
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessShiftTemplateByDayId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessShiftTemplateByDayId`(
 in businessSite_Id BIGINT(20)
,in department_Id BIGINT(20)
,in subClassification_Id bigint(20)
,in weekDayId_From tinyint(1) 
,in weekDayId_To tinyint(1) 
,in created_By BIGINT(20)
)
BEGIN
/*
 Author: James
 Date  : 25/04/2016
 Description : Copy Functionality for shift template
*/

Declare statusValue bit(1)
set statusValue=0
		/*
        update businessShiftTemplate set 
				  isDeleted = 1 
				, updatedBy	=	created_By
				, updatedOn	=	utc_timestamp() 
        where businessSiteId=businessSite_Id and departmentId=department_Id 
		and subClassificationId=coalesce(subClassification_Id,subClassificationId) 
		and weekDayId = weekDayId_To and isDeleted=0 */
	/*
	insert into businessShiftTemplate (
				  businessSiteId
				, departmentId
				, subClassificationId
				, weekDayId
				, shiftStartTime
				, shiftEndTime
				, isFlexibleShiftTime
				, longBreak1Start
				, longBreak2Start
				, shortBreak1Start
				, shortBreak2Start
				, createdBy
				, createdOn 
				, isDeleted 
                , shiftEndTimeType
				, shiftEndTimeValue
                )
		select 
				  businessSiteId
				, departmentId
				, subClassificationId
				, weekDayId_To
				, shiftStartTime
				, shiftEndTime
				, isFlexibleShiftTime
				, longBreak1Start
				, longBreak2Start
				, shortBreak1Start
				, shortBreak2Start
				, createdBy
				, utc_timestamp()
				, 0     
                , shiftEndTimeType
				, shiftEndTimeValue
		from businessShiftTemplate 
		where businessSiteId=businessSite_Id and departmentId=department_Id 
		and subClassificationId=coalesce(subClassification_Id,subClassificationId) 
		and weekDayId = weekDayId_From and isDeleted=0 */
        
        
set @rown=0
set @comb_Id=''

	insert into businessShiftTemplate (
				  businessSiteId
				, departmentId
				, subClassificationId
				, weekDayId
				, shiftStartTime
				, shiftEndTime
				, isFlexibleShiftTime
				, longBreak1Start
				, longBreak2Start
				, shortBreak1Start
				, shortBreak2Start
				, createdBy
				, createdOn 
				, isDeleted 
                , shiftEndTimeType
				, shiftEndTimeValue
                )
	 
		select bst.businessSiteId
			,bst.departmentId
			,bst.subClassificationId
			,weekDayId_To
			,bst.shiftStartTime
			,bst.shiftEndTime
			,bst.isFlexibleShiftTime
			,bst.longBreak1Start
			,bst.longBreak2Start
			,bst.shortBreak1Start
			,bst.shortBreak2Start
            ,created_By
            ,utc_timestamp()
            ,0
			,bst.shiftEndTimeType
			,bst.shiftEndTimeValue
        from ( 
				select 
						  businessSiteId
						, departmentId
						, subClassificationId
						, weekDayId_To
						, shiftStartTime
						, shiftEndTime
						, isFlexibleShiftTime
						, longBreak1Start
						, longBreak2Start
						, shortBreak1Start
						, shortBreak2Start 
						, shiftEndTimeType
						, shiftEndTimeValue
						,@rown :=if(@comb_Id =concat(businessSiteId,departmentId,subClassificationId,shiftStartTime,shiftEndTime) ,@rown +1,1) as rownum ,@comb_Id :=concat(businessSiteId,departmentId,subClassificationId,shiftStartTime,shiftEndTime) 
				from businessShiftTemplate 
				where businessSiteId=businessSite_Id and departmentId=department_Id 
				and subClassificationId=coalesce(subClassification_Id,subClassificationId) 
				and weekDayId = weekDayId_From and isDeleted=0
				order by businessSiteId,departmentId,subClassificationId,shiftStartTime,shiftEndTime
		   )bst left join (
					select a.* 
					,case when (a.total+b.total)>99 then (99-b.total) else a.total end Balance
					from (
						select businessSiteId,departmentId,subClassificationId,shiftStartTime,shiftEndTime,count(*)Total from businessShiftTemplate
						where  businessSiteId=businessSite_Id and departmentId=department_Id 
						and subClassificationId=coalesce(subClassification_Id,subClassificationId) 
						and weekDayId = weekDayId_From and isDeleted=0
						group by businessSiteId,departmentId,subClassificationId,shiftStartTime,shiftEndTime
					)a left join (
						select businessSiteId,departmentId,subClassificationId,shiftStartTime,shiftEndTime,count(*)Total from businessShiftTemplate
						where  businessSiteId=businessSite_Id and departmentId=department_Id 
						and subClassificationId=coalesce(subClassification_Id,subClassificationId) 
						and weekDayId = weekDayId_To and isDeleted=0
						group by businessSiteId,departmentId,subClassificationId,shiftStartTime,shiftEndTime )b
					on a.businessSiteId=b.businessSiteId and a.departmentId=b.departmentId 
					and a.subClassificationId=b.subClassificationId and a.shiftStartTime=b.shiftStartTime and a.shiftEndTime=b.shiftEndTime 
			)b on bst.businessSiteId=b.businessSiteId and bst.departmentId=b.departmentId 
			and bst.subClassificationId=b.subClassificationId and bst.shiftStartTime=b.shiftStartTime and bst.shiftEndTime=b.shiftEndTime 
			where rownum<=b.balance 
        
		if row_count()>0 then
			set statusValue=1
        end if
 
 select  statusValue    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessShiftTemplates` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessShiftTemplates`(
IN generalSettings_Id BIGINT(20),
IN shiftTemplate_Id BIGINT(20),
in businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id int,
in week_DayName varchar(20),
in shift_StartTime time,
in shift_EndTime time,
in longBreak1_Start varchar(20),
in longBreak2_Start VARCHAR(20),
in shortBreak1_Start VARCHAR(20),
in shortBreak2_Start VARCHAR(20),
in created_By BIGINT(20),
in updated_By BIGINT(20),
in is_Deleted bit)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert or update shift templates
*/
	IF longBreak1_Start='' THEN
		SET longBreak1_Start=NULL
	END IF
	
	IF longBreak2_Start='' THEN
		SET longBreak2_Start=NULL
	END IF
	
	IF shortBreak1_Start='' THEN
		SET shortBreak1_Start=NULL
	END IF
	
	IF shortBreak2_Start='' THEN
		SET shortBreak2_Start=NULL
	END IF
	
	IF shiftTemplate_Id=0 THEN
		-- IF not EXISTS(SELECT 1 FROM businessShiftTemplate WHERE businessSiteId=businessSite_Id and LCASE(weekDayName)=LCase(week_DayName)) THEN
			INSERT INTO businessShiftTemplate(businessSiteId,departmentId,subClassificationId,weekDayName,shiftStartTime,shiftEndTime,
				longBreak1Start,longBreak2Start,shortBreak1Start,shortBreak2Start,createdBy,createdOn)
			VALUES(businessSite_Id,department_Id,subClassification_Id,week_DayName,shift_StartTime,shift_EndTime,
				longBreak1_Start,longBreak2_Start,shortBreak1_Start,shortBreak2_Start,created_By,utc_timestamp())
				
			SET shiftTemplate_Id = LAST_INSERT_ID()
			
			UPDATE businessSettings SET settingStatus=3 WHERE settingId=generalSettings_Id
		-- end if
	ELSEIF is_Deleted=0 THEN
		UPDATE businessShiftTemplate SET businessSiteId=businessSite_Id,departmentId=department_Id,subClassificationId=subClassification_Id,weekDayName=week_DayName,shiftStartTime=shift_StartTime,shiftEndTime=shift_EndTime,
			longBreak1Start=longBreak1_Start,longBreak2Start=longBreak2_Start,shortBreak1Start=shortBreak1_Start,shortBreak2Start=shortBreak2_Start,
			updatedBy=updated_By,updatedOn=utc_timestamp() 
		WHERE shiftTemplateId=shiftTemplate_Id
	ELSE
		DELETE FROM businessShiftTemplate WHERE shiftTemplateId=shiftTemplate_Id
		
		UPDATE businessSettings SET settingStatus=2 WHERE settingId=generalSettings_Id
	END IF
	
	SELECT shiftTemplate_Id AS shiftTemplateId,1 AS STATUS
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessSite` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessSite`( 
 IN businessSite_Id bigint(20) 
, IN business_Id bigint(20) 
, IN site_Name varchar(300) 
, IN site_Description varchar(1200) 
, IN parentBusinessSite_Id bigint(20) 
, IN country_Id bigint(20) 
, IN state_Id bigint(20) 
, IN city_Id bigint(20) 
, IN phone_No varchar(20) 
, IN address_Line1 varchar(1000) 
, IN address_Line2 varchar(1000) 
, IN fax_No varchar(20) 
, IN zip_Code varchar(20) 
, IN created_By bigint(20) 
, IN latitude_coordinate	decimal(21,17)
, IN longitude_coordinate	decimal(21,17)
, IN timeZone_Id int
 )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Inserting and Updating Business Site
*/

-- DECLARE userclaimSet_Id bigint

if (parentBusinessSite_Id =0) or parentBusinessSite_Id= businessSite_Id then
	set parentBusinessSite_Id = null  --  (select businessSiteId from businessSite where parentBusinessSiteId is null and businessId=business_Id)
end if


		if (businessSite_Id=0) then
			insert into businessSite(businessId, siteName, siteDescription, parentBusinessSiteId, countryId, stateId, cityId, phone, addressLine1, addressLine2, fax, zipCode, createdBy, createdOn, isDeleted ,latitude,longitude, timeZoneId)
			values(business_Id, site_Name, site_Description, parentBusinessSite_Id, country_Id  ,state_Id  ,city_Id  ,phone_No ,address_Line1 ,address_Line2  ,fax_No ,zip_Code   ,created_By ,utc_timestamp() ,0 ,latitude_coordinate,longitude_coordinate,timeZone_Id  )
			
			IF ROW_COUNT() > 0 THEN
				set businessSite_Id = LAST_INSERT_ID()  
                
                 -- updating parent and child tree
                 update businessSite set 
						childHierarchy =GetBusinessFamily(businessSiteId),
						parentHierarchy = GetBusinessAncestry(businessSiteId)
				 where businessId = business_Id

				-- mapping business admin to newly created site.
				insert into userRoleBusinessSite (userRoleId, businessSiteId,createdBy,createdOn,status)
				select a.* from(
				select userRoleId,businessSiteId,created_By, utc_timestamp() ,2 from 
				businessSite bs
				cross join
				(
				select distinct ur.userRoleId
				from scUser u 
				inner join userRole ur on u.userId = ur.userId
				left join userRoleBusinessSite urbs on ur.userRoleId = urbs.userRoleId
				left join businessSite b on urbs.businessSiteId = b.businessSiteId
				where  ur.isDeleted =0 and urbs.isDeleted=0 and ur.isDeleted =0 and b.businessId = business_Id and roleId =3
				and u.userId not in (select u1.userId from scUser u1 
											inner join userRole ur1 on u1.userId = ur1.userId 
											inner join userRoleBusinessSite urbs1 on ur1.userRoleId = urbs1.userRoleId
											where ur1.roleId <>3 and ur1.isDeleted =0 and urbs1.isDeleted =0)
				)a where businessId = business_Id and bs.isDeleted =0
				)a
				left join (
				select ur.userRoleId,urbs.businessSiteId
				from scUser u 
				inner join userRole ur on u.userId = ur.userId
				left join userRoleBusinessSite urbs on ur.userRoleId = urbs.userRoleId
				left join businessSite b on urbs.businessSiteId = b.businessSiteId
				where  ur.isDeleted =0 and urbs.isDeleted=0 and ur.isDeleted =0 and b.businessId = business_Id and roleId =3
				) b on a.userRoleId=b.userRoleId and a.businessSiteId=b.businessSiteId
				where b.businessSiteId is null
                
                 
				select 1 as StatusValue , businessSite_Id ,parentBusinessSite_Id 
			end if
		else
			update businessSite set  siteName  =  site_Name
									,siteDescription    = site_Description
									,parentBusinessSiteId =   parentBusinessSite_Id
									,countryId = country_Id
									,stateId   = state_Id
									,cityId    = city_Id
									,phone     = phone_No
									,addressLine1   =  address_Line1
									,addressLine2   =  address_Line2
									,fax     = fax_No
									,zipCode    = zip_Code
									,updatedBy  = created_By
									,updatedOn  = utc_timestamp()
									,latitude	= latitude_coordinate
									,longitude	= longitude_coordinate
                                    ,timeZoneId = timeZone_Id
									where businessSiteId = businessSite_Id
			IF ROW_COUNT() > 0 THEN
				 
                 -- updating parent and child tree
                 update businessSite set 
						childHierarchy =GetBusinessFamily(businessSiteId),
						parentHierarchy = GetBusinessAncestry(businessSiteId)
				 where businessId = business_Id

            
				select 1 as StatusValue, businessSite_Id ,parentBusinessSite_Id 
			end if

	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessSiteClaimsetClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessSiteClaimsetClaim`(
 IN businessSite_Id bigint(20) 
,IN claimIds nvarchar(3000) 
,IN claimSet_Id bigint(20)  
,IN createdBy bigint(20) 
)
BEGIN
	
    declare StatusValue tinyint
	declare rowCount bigint
    declare i bigint
    declare claim_Id bigint
    set i =1
	DROP TABLE IF EXISTS tmpSplit
    CREATE TEMPORARY TABLE tmpSplit ( id bigint PRIMARY KEY auto_increment,variable VARCHAR(1000))

	SET @vars := claimIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSplit (variable) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
    set rowCount = (select count(1) from tmpSplit)
    
    update businessSiteClaimsetClaim set isDeleted = 1 where businessSiteId= businessSite_Id and claimSetId=claimSet_Id
    
    while(i <= rowCount) do
		set claim_Id = (select variable from tmpSplit where id = i)
        
        if not exists(select 1 from businessSiteClaimsetClaim where businessSiteId= businessSite_Id and claimId=claim_Id and claimSetId=claimSet_Id)then
			insert into businessSiteClaimsetClaim (businessSiteId,claimId,claimSetId,createdBy,createdOn,isDeleted)
            values(businessSite_Id,claim_Id,claimSet_Id,createdBy,utc_timestamp(),0)
            
            IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
		else
			update businessSiteClaimsetClaim set isDeleted = 0 
												,updatedBy =createdBy 
												,updatedOn = utc_timestamp()
            where businessSiteId= businessSite_Id and claimId=claim_Id and claimSetId=claimSet_Id
            
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
        end if
        
        set i = i+1
        
    end while
    
    select StatusValue
    DROP TABLE IF EXISTS tmpSplit



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessSiteJobProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessSiteJobProfile`(
IN JobProfile_Id bigint, 
IN BusinessSiteIds varchar(5000), 
IN created_By bigint,
IN referralJobProfile_Id bigint,
IN creation_type tinyint,
IN job_profile_Status tinyint
)
BEGIN

/*

 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : mapping business site to job profile


 creation_type  - 3  revision 2 -variation  1 - update
 status 1 - inactive
	    2 - active
*/


     declare businessSite_Id bigint
	DROP TABLE IF EXISTS tmpBusinessSplit
    CREATE TEMPORARY TABLE tmpBusinessSplit ( id bigint PRIMARY KEY auto_increment,variable bigint)

	SET @vars := BusinessSiteIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpBusinessSplit (variable) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
    
    if (creation_type  =1) THEN -- update
		-- deleting all business site for the particular job profile
		update jobProfileBusinessSite set isDeleted =1 where jobProfileId = JobProfile_Id
        
        -- updating to isDeleted = 0 if any of the site is already existing
        update jobProfileBusinessSite 
        set status =job_profile_Status, isDeleted =0 
        where jobProfileId = JobProfile_Id and businessSiteId in (select variable from tmpBusinessSplit)
      
		-- mapping new site to job profile
        insert into jobProfileBusinessSite (jobProfileId,businessSiteId,createdBy,createdOn,isDeleted,status)
        select JobProfile_Id,variable,created_By,utc_timestamp(),0,job_profile_Status
		from tmpBusinessSplit 
        where variable not in (select businessSiteId from jobProfileBusinessSite where jobProfileId = JobProfile_Id )
            
	else if (creation_type = 3) then  -- revision
		-- mapping new site to job profile
		insert into jobProfileBusinessSite (jobProfileId,businessSiteId,createdBy,createdOn,isDeleted,status)
		select JobProfile_Id,variable,created_By,utc_timestamp(),0,job_profile_Status
		from tmpBusinessSplit
        
         if ROW_COUNT() > 0 then
         -- updating old profile to deleted
			update jobProfileBusinessSite set status =1  where jobProfileId = referralJobProfile_Id and businessSiteId in (select variable from tmpBusinessSplit)
		end if

     else  -- variation
		-- mapping new site to job profile
		insert into jobProfileBusinessSite (jobProfileId,businessSiteId,createdBy,createdOn,isDeleted,status)
		select JobProfile_Id,variable,created_By,utc_timestamp(),0,job_profile_Status
		from tmpBusinessSplit
    end if
    end if

    DROP TABLE IF EXISTS tmpBusinessSplit


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessSiteRoleClaim` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessSiteRoleClaim`(
 IN businessSite_Id bigint(20) 
,IN claimIds nvarchar(3000) 
,IN role_Id bigint(20)  
,IN createdBy bigint(20) 
,IN business_Id bigint(20)
)
BEGIN
	
    declare StatusValue tinyint
	declare rowCount bigint
    declare i bigint
    declare claim_Id bigint
    set i =1
	DROP TABLE IF EXISTS tmpSplit
    CREATE TEMPORARY TABLE tmpSplit ( id bigint PRIMARY KEY auto_increment,variable VARCHAR(1000))

	SET @vars := claimIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSplit (variable) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
    set rowCount = (select count(1) from tmpSplit)
    
    if businessSite_Id is null then 		
        set businessSite_Id=(select businessSiteId from businessSite where businessId=business_Id and parentBusinessSiteId is null )
    end if 
    
    update businessSiteRoleClaim set isDeleted = 1 where businessSiteId= businessSite_Id and roleId=role_Id
    
    while(i <= rowCount) do
		set claim_Id = (select variable from tmpSplit where id = i)
        
        if not exists(select 1 from businessSiteRoleClaim where businessSiteId= businessSite_Id and claimId=claim_Id and roleId=role_Id)then
			insert into businessSiteRoleClaim (businessSiteId,claimId,roleId,createdBy,createdOn,isDeleted)
            values(businessSite_Id,claim_Id,role_Id,createdBy,utc_timestamp(),0)
            
            IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
		else
			update businessSiteRoleClaim set isDeleted = 0 
												,updatedBy =createdBy 
												,updatedOn = utc_timestamp()
            where businessSiteId= businessSite_Id and claimId=claim_Id and roleId=role_Id
            
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1 
			end if
        end if
        
        set i = i+1
        
    end while
    
    select StatusValue
    DROP TABLE IF EXISTS tmpSplit



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessUser`( 
  IN user_Id bigint(20) 
, IN site_ID bigint(20) 
, IN first_Name varchar(100) 
, IN middle_Name varchar(100) 
, IN last_Name varchar(100) 
, IN User_Password varchar(1000) 
, IN Role_Category_Id smallint(6) 
, IN Role_Id bigint(20)
, IN email_Id varchar(100) 
, IN created_By bigint(20)  
, IN userRole_Id bigint(20)  
, IN userRoleSite_Id bigint(20)  
, IN old_Role_Id bigint(20)
, IN encryption_Key varchar(100)
 )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Delete User
*/

DECLARE userUniqueId nvarchar(75)
DECLARE StatusValue tinyint
DECLARE userRole_Id_new bigint 
DECLARE business_Id bigint


set business_Id = (select businessId from businessSite where businessSiteId = site_ID)
set StatusValue =0

if (user_Id = 0) then -- Insert
		if exists (select 1 from scUser where emailId = email_Id) THEN -- Check email Id is existing or not
			set User_Id = (select userId from scUser where emailId = email_Id)
            set userUniqueId = (select userUIId from scUser where userId = User_Id)
			
               update scUser set 	 
							 firstName = first_Name
							,middleName = middle_Name
							,lastName = last_Name
							,RoleCategoryId = Role_Category_Id
							,emailId = email_Id
							,updatedBy = created_By
							,updatedOn = utc_timestamp()
							where userId = user_Id
            
            -- checking if user is already associated with the site
            if exists(select 1 from userRoleBusinessSite where userRoleId in (select userRoleId from userRole where userId= User_Id and isDeleted=0) and  BusinessSiteId =site_ID and isDeleted=0) then
				set StatusValue = 0
			else -- if not associated with the site
               -- checking if user is associated with the same role, if yes select the user role id
				if exists(select 1 from userRole where userId= User_Id and RoleId = Role_Id) then
					set userRole_Id = (select userRoleId from userRole where userId= User_Id and RoleId = Role_Id)
				else -- if not inserting into userRole table
					insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId,isDeleted) 
					values (User_Id,Role_Id,User_Id,utc_timestamp(),Role_Category_Id, 0)
					set userRole_Id = LAST_INSERT_ID()
					set StatusValue =1
				end if
                -- mapping userRole with business Site
				INSERT INTO userRoleBusinessSite(userRoleId,BusinessSiteId,createdBy,createdOn, isDeleted)
				VALUES(userRole_Id,site_ID,created_By,utc_timestamp(), 0)
                set StatusValue =1
			end if
            
        ELSE	-- inserting into scuser table
			insert into scUser (  firstName ,middleName ,lastName ,RoleCategoryId ,emailId ,UserPassword  ,createdBy ,createdOn ,status ,isDeleted ,isLoggedInOnce ,encryptionKey )
			values ( first_Name , middle_Name , last_Name , Role_Category_Id , email_Id , User_Password  , created_By , utc_timestamp(), 1 , 0 , 1,encryption_Key)

				IF ROW_COUNT() > 0 THEN
                
			
					set StatusValue =1
					set User_Id =  LAST_INSERT_ID()
					set userUniqueId = UUID() 
					set userUniqueId =CONCAT(userUniqueId , '-' , User_Id)  
					update scUser set userUIId = userUniqueId where userId = User_Id
					
					-- checking if user is associated with the same role, if yes select the user role id
					if not exists(select 1 from userRole where userId= User_Id and RoleId = Role_Id and isDeleted =0) then
						insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId,isDeleted) 
						values (User_Id,Role_Id,User_Id,utc_timestamp(),Role_Category_Id, 0)
						set userRole_Id = LAST_INSERT_ID()
					else
						set userRole_Id = (select userRoleId from userRole where userId= User_Id and RoleId = Role_Id and isDeleted =0)
					end if
					
                    -- checking if user is already associated with the site
					if not exists(select 1 from userRoleBusinessSite where userRoleId=userRole_Id and  BusinessSiteId =site_ID) then
						INSERT INTO userRoleBusinessSite(userRoleId,BusinessSiteId,createdBy,createdOn, isDeleted)
						VALUES(userRole_Id,site_ID,created_By,utc_timestamp(), 0)
					end if

                end if  --  End for ROW_COUNT
        end if  --  End for Email Id already exists
	 else -- direct update
			update scUser set 	 
							 firstName = first_Name
							,middleName = middle_Name
							,lastName = last_Name
							,RoleCategoryId = Role_Category_Id
							,emailId = email_Id
							,updatedBy = created_By
							,updatedOn = utc_timestamp()
							where userId = user_Id

				IF ROW_COUNT() > 0 THEN
					set userUniqueId = (select userUIId from scUser where userId = User_Id)
                    set StatusValue = 1
				end if
                
                -- checking if user is associated with the same role, if yes select the user role id
                if not exists(select 1 from userRole where userId= User_Id and RoleId = Role_Id and isDeleted =0) then
					insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId,isDeleted) 
					values (User_Id,Role_Id,User_Id,utc_timestamp(),Role_Category_Id, 0)
					set userRole_Id_new = LAST_INSERT_ID()
 
                    -- checking if user is already associated with the site  withn the current role
					if not exists(select 1 from userRoleBusinessSite where userRoleId in (select userRoleId from userRole where userId= userId and isDeleted =0) and  BusinessSiteId =site_ID and isDeleted = 0) then	
						INSERT INTO userRoleBusinessSite(userRoleId,BusinessSiteId,createdBy,createdOn, isDeleted)
						VALUES(userRole_Id_new,site_ID,created_By,utc_timestamp(), 0)
                        
                        -- updating the old role for the same business site
                        update userRoleBusinessSite set isDeleted=1 where userRoleBusinessSiteId = userRoleSite_Id
					else 
						update userRoleBusinessSite set userRoleId = userRole_Id_new where userRoleBusinessSiteId = userRoleSite_Id
					end if
				else  
					-- checking if user is already associated with the site
					if not exists(select 1 from userRoleBusinessSite where userRoleId in (select userRoleId from userRole where userId= user_Id and  isDeleted =0) and  BusinessSiteId =site_ID and isDeleted = 0) then	
                        INSERT INTO userRoleBusinessSite(userRoleId,BusinessSiteId,createdBy,createdOn, isDeleted)
						VALUES(userRole_Id,site_ID,created_By,utc_timestamp(), 0)
                        
                         -- updating old role for the same business
                         update userRoleBusinessSite set isDeleted = 1 where userRoleBusinessSiteId=userRoleSite_Id
					 else if not exists(select 1 from userRoleBusinessSite where userRoleId = (select userRoleId from userRole where userId= user_Id and roleId = Role_Id and  isDeleted =0) and  BusinessSiteId =site_ID) THEN
						 update userRoleBusinessSite set userRoleId = (select userRoleId from userRole where userId= user_Id and roleId = Role_Id and  isDeleted =0)  
                         where userRoleBusinessSiteId = userRoleSite_Id
					 end if
					end if
				end if 
	end if -- End for user_Id = 0 check
    
if (StatusValue = 1) then 
	-- code for removing access form business site if the role is changed from business admin to anyother
	if (old_Role_Id = 3) then
		if (old_Role_Id <> Role_Id) then -- checking old role and new role is same
			update userRole set isDeleted = 1 where userId = user_Id and roleId =3
        end if
    else if (Role_Id =3) then -- updating all other roles to deleted if user is business admin
		update userRole set isDeleted = 1 where userId = user_Id and roleId <>3
	end if
    end if
    
    -- mapping user to all site if the user is business admin
	insert into userRoleBusinessSite (userRoleId, businessSiteId,createdBy,createdOn,status)
		select a.* from(
			select userRoleId,businessSiteId,created_By, utc_timestamp() ,2 from 
			businessSite bs
			cross join
			(
			select distinct ur.userRoleId
			from scUser u 
			inner join userRole ur on u.userId = ur.userId
			left join userRoleBusinessSite urbs on ur.userRoleId = urbs.userRoleId
			left join businessSite b on urbs.businessSiteId = b.businessSiteId
			where  ur.isDeleted =0 and urbs.isDeleted=0 and ur.isDeleted =0 and b.businessId = business_Id and roleId =3
			and u.userId not in (select u1.userId from scUser u1 
										inner join userRole ur1 on u1.userId = ur1.userId 
                                        inner join userRoleBusinessSite urbs1 on ur1.userRoleId = urbs1.userRoleId
                                        where ur1.roleId <>3 and ur1.isDeleted =0 and urbs1.isDeleted =0)
			)a where businessId = business_Id and bs.isDeleted =0
			)a
			left join (
			select ur.userRoleId,urbs.businessSiteId
			from scUser u 
			inner join userRole ur on u.userId = ur.userId
			left join userRoleBusinessSite urbs on ur.userRoleId = urbs.userRoleId
			left join businessSite b on urbs.businessSiteId = b.businessSiteId
			where  ur.isDeleted =0 and urbs.isDeleted=0 and ur.isDeleted =0 and b.businessId = business_Id and roleId =3
			) b on a.userRoleId=b.userRoleId and a.businessSiteId=b.businessSiteId
		where b.businessSiteId is null
end if
    
select User_Id,userUniqueId,StatusValue 



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessUserSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessUserSettings`(
 in user_id bigint
,in moveRostered_Staff bit(1)
)
BEGIN

 
if not exists(select userId from businessUserSetting  where userId=user_id ) then

	insert into businessUserSetting ( userId ,moveRosteredStaff,createdBy,createdOn )
    values ( user_id,moveRostered_Staff,user_id,utc_timestamp())  
	IF ROW_COUNT() > 0 THEN
		select user_id as userId 
	end if     
else
	update businessUserSetting set 
		 moveRosteredStaff=moveRostered_Staff
        ,updatedBy = user_id
		,updatedOn = utc_timestamp()
    where userId=user_id 
	IF ROW_COUNT() > 0 THEN
		select user_id as userId 
	end if   
end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBusinessWrkerCompensation` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBusinessWrkerCompensation`( 
  IN UserId bigint(20) 
, IN Compensation_Id bigint(20)
, IN business_Id bigint(20) 
, IN policy_Provider varchar(3000) 
, IN coverage_Amt decimal(18,2)
, IN policy_No varchar(50) 
, IN expiry_Date datetime
, IN is_Deleted bit

)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Business Worker Compensation
*/


	if (is_Deleted =0) then
		if(Compensation_Id =0)then	
			insert into  businessWorkerCompensation( businessId,policyProvider,coverageAmt,policyNo,expiryDate,createdBy,createdOn )
			values ( business_Id,policy_Provider,coverage_Amt,policy_No,expiry_Date,UserId,utc_timestamp())
            
            IF ROW_COUNT() > 0 THEN
				SELECT 	 business_Id
			END IF
		else
			update businessWorkerCompensation
			set  
				 policyProvider = policy_Provider
				,coverageAmt = coverage_Amt
				,policyNo = policy_No
				,expiryDate = expiry_Date
				,updatedBy  = UserId
				,updatedOn = utc_timestamp()
				 where  businessWorkerCompId = Compensation_Id
                 
			IF ROW_COUNT() > 0 THEN
				SELECT 	 business_id
			END IF
				
		end if
	else
		delete from businessWorkerCompensation where businessWorkerCompId = Compensation_Id
			IF ROW_COUNT() > 0 THEN
				SELECT 	business_Id
			END IF
    end if
 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateBussinessQualification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateBussinessQualification`(

IN qualification_Id int(11),
IN qualification_Name nvarchar(200),
IN Language_Id int(11) ,
IN bussiness_Id bigint(20) ,
IN classification_Id bigint(20) ,
IN is_Deleted bit(1),
IN subClassification_Id bigint(20) 

)
BEGIN


/*
 Author: Tijo
 Date  : 20/11/2014
 Description :  Insert Update Business Qualification
 call InsertUpdateBussinessQualification(2,"B.Tech",264 ,1 ,1,0)
*/

	if (is_Deleted = 0) then
		if (qualification_Id = 0) then
			insert into qualification (defaultLanguageId, bussinessId, classificationId,subClassificationId, isSystemDefined, isDeleted)
            values (Language_Id, bussiness_Id, classification_Id,subClassification_Id, 0, 0)
            
            set qualification_Id = last_insert_id()
            
            if (qualification_Id >0) then
				insert into qualificationLocale (qualificationId, qualificationName, languageId, isDeleted)
                values (qualification_Id, qualification_Name, Language_Id, 0)
                
                if ROW_COUNT() > 0 then
					select qualification_Id
                end if
            end if
		else
			update qualificationLocale set qualificationName = qualification_Name 
            where qualificationId = qualification_Id and languageId = Language_Id
            
            if ROW_COUNT() > 0 then
					select qualification_Id
                end if
        end if
	else
		update qualificationLocale set isDeleted = is_Deleted 
		where qualificationId = qualification_Id and languageId = Language_Id
            
            if ROW_COUNT() > 0 then
					select qualification_Id
                end if
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateAvailability` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateAvailability`( 
	  IN User_Id bigint(20) 
    , IN availableStart_Date datetime 
    , IN period_Id int(11) 
    , IN employmentType_Id int(11) 
    , IN availableEnd_Date datetime
  --  , IN daysOf_weeks varchar(100) 
    , IN shift_Job bit(1)
    , IN created_By bigint(20) )
BEGIN
/*
 Author: James
 Date  : 20/11/2014
 Description : Inserting and Updating Candidate availability
*/
	if exists (select 1 from candidateEmpAvailability where candidateUserId = User_Id) then
    
		update candidateEmpAvailability set 
			availableStartDate = availableStart_Date
			,periodId = period_Id
			,employmentTypeId = employmentType_Id
            ,availableEndDate = availableEnd_Date
         --   , daysOfweek = daysOf_weeks
            ,shiftJob = shift_Job
			,updatedBy = created_By
			,updatedOn = utc_timestamp() 
			where candidateUserId =User_Id 
            
		IF ROW_COUNT() > 0 THEN
			select 1 as StatusValue
            call insertUpdateCandidateScreenSectionDetail(User_Id,11,1)
		end if
	else
    
		insert into candidateEmpAvailability(candidateUserId,availableStartDate,periodId,employmentTypeId,availableEndDate,shiftJob,createdBy,createdOn)
		values(User_Id,availableStart_Date,period_Id,employmentType_Id,availableEnd_Date,shift_Job,created_By,utc_timestamp())
		IF ROW_COUNT() > 0 THEN
			select 1 as StatusValue
            call insertUpdateCandidateScreenSectionDetail(User_Id,11,1)
		end if
		
	end if
		
 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateAvailWorkingTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateAvailWorkingTime`(
   IN	candidate_UserId	bigint(20)
 , IN	day_Id	tinyint(4)
 , IN	time_Id	smallint(6)
 , IN	created_By	bigint(20)
 , IN	is_Delete	bit(1)

)
BEGIN


/*
 Author: James
 Date  : 24/11/2014
 Description : Inserting and Updating Candidate working hour
*/

	if (is_Delete=0) then
		if not exists(select 1 from candidateEmpAvailWorkingTime where candidateUserID=candidate_UserId and dayId=day_Id and timeId=time_Id) then

			insert into candidateEmpAvailWorkingTime (candidateUserId, dayId, timeId, createdBy, createdOn)
			values (candidate_UserId, day_Id, time_Id, created_By, utc_timestamp())

			IF ROW_COUNT() > 0 THEN
				select 1 as StatusValue
			end if 
		end if
	else
		 Delete from candidateEmpAvailWorkingTime
		 where candidateUserID=candidate_UserId and dayId=day_Id and timeId=time_Id

		IF ROW_COUNT() > 0 THEN
			select 1 as StatusValue
		end if 

	end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateContact` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateContact`( 
  IN user_Id bigint(20) 
, IN street_address_line1 longtext 
, IN street_address_line2 longtext 
, IN country_id bigint(20) 
, IN state_id bigint(20) 
, IN city_id bigint(20) 
, IN zip_code longtext
, IN county_name varchar(50) 
, IN secondary_Email varchar(100) 
, IN created_By bigint(20) 
, IN home_Phone longtext
, IN work_Phone longtext
, IN mobile_Phone longtext
, IN latitude_coordinate	decimal(21,17)
, IN longitude_coordinate	decimal(21,17)

)
BEGIN



/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update candidate profile details
*/


declare StatusValue bit
set StatusValue = 0

	update scUser set secondaryEmail = secondary_Email ,updatedBy = created_By
								,updatedOn =	utc_timestamp() where userID = user_ID
	
	IF ROW_COUNT() > 0 THEN
		set StatusValue = 1
	end if
    
    

	if exists(select 1 from candidateDetail where candidateuserID= user_Id) then
			update candidateDetail set 
							    streetaddressline1 = street_address_line1
								,streetaddressline2 = street_address_line2
								,countryid = country_id
								,stateid = state_id
								,cityid = city_id
								,zipCode = zip_code
								,county = coalesce(county_name,county)
								,updatedBy = created_By
								,updatedOn = utc_timestamp()
                                ,	latitude	=	latitude_coordinate
								,	longitude	=	longitude_coordinate
								where candidateuserID = user_Id
			
			IF ROW_COUNT() > 0 THEN
				set StatusValue =1
				call insertUpdateCandidateScreenSectionDetail(user_Id,2,1)
			end if
		else 
			insert into candidateDetail ( candidateuserID,streetAddressLine1 ,streetAddressLine2 ,countryId ,stateId ,cityId ,zipCode ,county ,createdBy ,createdOn,latitude,longitude )
			values (user_ID ,street_address_line1 ,street_address_line2 ,country_id,state_id ,city_id,zip_code   ,county_name  ,user_id ,utc_timestamp() ,latitude_coordinate,longitude_coordinate  )
			
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
				call insertUpdateCandidateScreenSectionDetail(user_Id,2,1)
			end if
		end if
	
	if (StatusValue =1) then
		 if not exists (select 1 from userContact where userID=user_Id ) then
			insert into userContact (userID, homePhone, workPhone, mobilePhone, isDeleted,createdBy,createdOn)
            values (user_ID, home_Phone, work_Phone, mobile_Phone, 0,user_id ,utc_timestamp())
         else
			update userContact set  homePhone =  home_Phone 
								   ,workPhone =  work_Phone 
                                   ,mobilePhone = mobile_Phone 
                                   ,isDeleted = 0 where userID = user_Id
         end if
	end if
	
	select StatusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateDocument`(
  IN	candidate_Document_Id	bigint(20)
, IN	candidate_User_Id	bigint(20)
, IN	document_Type_Id	smallint(6)
, IN	document_Path	varchar(1000)
, IN	document_Name	varchar(200)
, IN	document_Mime_Type	varchar(6)
, IN 	e_Tag	varchar(1000)
, IN	created_By	bigint(20)
, IN 	file_Status 	tinyint(6)
, IN 	is_Deleted	bit(1)
, IN    doc_Description  varchar(200)
)
BEGIN


/*
 Author: James
 Date  : 19/11/2014
 Description : Inserting and Updating Candidate Document
 FileStatus : 0 - inprogress 1-completed 2-corrupted
*/

if (is_Deleted=0) then
		if (candidate_Document_Id=0) then 

			insert into candidateDocument
			( candidateUserId, documentTypeId, documentPath, documentName, documentMimeType,eTag, createdBy,createdOn,fileStatus,isDeleted,description)
			values ( candidate_User_Id, document_Type_Id, document_Path, document_Name, document_Mime_Type,e_Tag, created_By, utc_timestamp(),file_Status,0,doc_Description)

				IF ROW_COUNT() > 0 THEN
						set candidate_Document_Id= last_insert_id() 
						select candidate_Document_Id 
                        
                        if document_Type_Id=1 and file_Status=1 then
								call insertUpdateCandidateScreenSectionDetail(candidate_User_Id,4,1)
                         end if   
				end if

		else
				update candidateDocument set 
			--        candidateUserId	=	candidate_User_Id,
					documentTypeId	=	coalesce(document_Type_Id,documentTypeId),
					documentPath	=	coalesce(document_Path,documentPath),
					documentName	=	coalesce(document_Name,documentName),
					documentMimeType	=	coalesce(document_Mime_Type,documentMimeType),
					eTag	= coalesce(e_Tag,eTag),
                    fileStatus=file_Status,
                    description = coalesce(doc_Description,description),
					updatedBy	=	coalesce(created_By, updatedBy ,createdBy),
					updatedOn	=	utc_timestamp()
				where candidateDocumentId	=	candidate_Document_Id

				IF ROW_COUNT() > 0 THEN
						select candidate_Document_Id                         
                        
                        if document_Type_Id=1 and file_Status=1 then
								call insertUpdateCandidateScreenSectionDetail(candidate_User_Id,4,1)
                         end if   
				end if

		end if
	else
		update candidateDocument set isDeleted=is_Deleted,
			updatedBy	=	created_By,
			updatedOn	=	utc_timestamp()
		where candidateDocumentId	=	candidate_Document_Id
        	
			IF ROW_COUNT() > 0 THEN
					select candidate_Document_Id 
			end if
        
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmergencyContact` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmergencyContact`( 
  IN user_id bigint(20) 
, IN emgncy_contact_person longtext
, IN emgncy_contact_reltn longtext
, IN emgncy_contact_phone_no longtext
, IN created_By bigint(20)
, IN canEmergency_ContactId	bigint(20)
 )
BEGIN
/*
 Author: Tijo Joseph
 Date  : 20/11/2014
 Description : Inserting and Updating Candidate emaergency contact
*/

DECLARE candidate_user_id bigint
set candidate_user_id =  user_id

	if exists(select 1 from candidateEmergencyContact where candidateUserId=user_Id) then
				update candidateEmergencyContact set 
										emgncycontactperson = emgncy_contact_person
										,emgncycontactreltn = emgncy_contact_reltn
										,emgncycontactphone = emgncy_contact_phone_no
										,updatedBy = created_By
										,updatedOn = utc_timestamp()
										where candidateUserId=user_Id
				IF ROW_COUNT() > 0 THEN
				Select 1 as StatusValue
						call insertUpdateCandidateScreenSectionDetail(candidate_user_id,3,1)
				end if
			else
					insert into candidateEmergencyContact (candidateUserId,emgncyContactPerson,emgncyContactReltn,emgncyContactPhone,createdBy,createdOn)
					values (candidate_user_id,emgncy_contact_person,emgncy_contact_reltn,emgncy_contact_phone_no,created_By,utc_timestamp())

				IF ROW_COUNT() > 0 THEN
				Select 1 as StatusValue
					call insertUpdateCandidateScreenSectionDetail(candidate_user_id,3,1)
				end if
			end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmpDefinedSkill` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmpDefinedSkill`(
   IN	candidateEmpDefinedSkill_Id	bigint(20)
  ,IN	candidateUser_Id	bigint(20)
  ,IN	skill_Name	varchar(150)
 -- ,IN 	more_Information varchar(1000)
  ,IN	is_Delete	bit(1)
  ,IN   created_By bigint(20)

)
BEGIN


	/*
	 Author: James
	 Date  : 24/11/2014
	 Description : Insert update Candidate  profile defined skill
	*/

	if (is_Delete=0) then
		if (candidateEmpDefinedSkill_Id=0) then
		
			insert into candidateEmpDefinedSkill (candidateUserId,skillName,createdBy, createdOn,isDeleted)
				values(candidateUser_Id,skill_Name,created_By, utc_timestamp(),0)

				IF ROW_COUNT() > 0 THEN
					select 1 StatusValue 
				end if
		
		else
			
			update candidateEmpDefinedSkill set 
				 skillName	=	skill_Name 
                 ,updatedBy = created_By
                 ,updatedOn = utc_timestamp()
			where candidateEmpDefinedSkillId=candidateEmpDefinedSkill_Id
			
			IF ROW_COUNT() > 0 THEN
				select 1 StatusValue 
			end if
		
		end if
        
	else
		update  candidateEmpDefinedSkill set 
				isDeleted=1
                ,updatedBy = created_By
                 ,updatedOn = utc_timestamp()
		where candidateEmpDefinedSkillId=candidateEmpDefinedSkill_Id

		IF ROW_COUNT() > 0 THEN
			select 1 StatusValue 
		end if
		
	end if 




END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmpProfileDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmpProfileDocument`(
   IN	candidateEmpProfileDoc_Id	bigint(20)
  ,IN	candidateUser_Id	bigint(20)
  ,IN   employmentProfile_ID  int(11)
  ,IN	document_Name	varchar(200)
  ,IN	document_Path	varchar(1000)
  ,IN	documentMime_Type	varchar(6)
  ,IN	e_Tag	varchar(1000)
  ,IN	file_Status	tinyint(4)
--   ,IN	relevantFor_All	bit(1)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)
)
BEGIN

/*
 Author: James
 Date  : 11/12/2014
 Description : Inserting and Updating Candidate Profile Document
 FileStatus : 0 - inprogress 1-completed 2-corrupted
*/

declare candidateEmpProfile_Id	bigint(20)
		
        set candidateEmpProfile_Id=(select candidateEmpProfileId from candidateEmpProfile where candidateUserId=candidateUser_Id and employmentProfileID=employmentProfile_ID and isDeleted=0)
	
    if is_Deleted=0 then
				if candidateEmpProfileDoc_Id=0 then
						insert into candidateEmpProfileDocument (
										candidateEmpProfileId
									,	documentName
									,	documentPath
									,	documentMimeType
									,	eTag
									,	fileStatus
								-- 	,	relevantForAll
									,	createdBy
									,	createdOn
									,	isDeleted )
							values (	candidateEmpProfile_Id
									,	document_Name
									,	document_Path
									,	documentMime_Type
									,	e_Tag
									,	file_Status
								-- 	,	relevantFor_All
									,	created_By
									,	utc_timestamp()
									,	0 )
							  
								IF ROW_COUNT() > 0 THEN
										set candidateEmpProfileDoc_Id=last_insert_id()
										select candidateEmpProfileDoc_Id
								end if   
				else
							update candidateEmpProfileDocument set 
										documentName	=	coalesce(document_Name,documentName)
									,	documentPath	=	coalesce(document_Path,documentPath)
									,	documentMimeType	=	coalesce(documentMime_Type,documentMimeType)
									,	eTag	=	coalesce(e_Tag, eTag)
									,	fileStatus	=	file_Status
								-- 	,	relevantForAll	=	relevantFor_All
									,	updatedBy	=	coalesce(created_By, updatedBy ,createdBy)
                                    ,	updatedOn	=	utc_timestamp()
									,	isDeleted	=	0
							where candidateEmpProfileDocId=candidateEmpProfileDoc_Id
								
                                IF ROW_COUNT() > 0 THEN
										select candidateEmpProfileDoc_Id
								end if  
				end if
		else
				update candidateEmpProfileDocument set 
							updatedBy	=	created_By
						,	updatedOn	=	utc_timestamp()
						,	isDeleted	=	1
				where candidateEmpProfileDocId=candidateEmpProfileDoc_Id
                
					 IF ROW_COUNT() > 0 THEN
							select candidateEmpProfileDoc_Id
					 end if  
        end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmpProfileDocumentTemp` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmpProfileDocumentTemp`(
   IN	candidateEmpProfileDoc_Id	bigint(20)
  ,IN	candidateUser_Id	bigint(20)
  ,IN   employmentProfile_ID  int(11)
  ,IN	document_Name	varchar(200)
  ,IN	document_Path	varchar(1000)
  ,IN	documentMime_Type	varchar(6)
  ,IN	e_Tag	varchar(1000)
  ,IN	file_Status	tinyint(4)
--   ,IN	relevantFor_All	bit(1)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)
  ,IN   gu_id varchar(200)
)
BEGIN

/*
 Author: James
 Date  : 11/12/2014
 Description : Inserting and Updating Candidate Profile Document
 FileStatus : 0 - inprogress 1-completed 2-corrupted
*/

declare candidateEmpProfile_Id	bigint(20)
		
        set candidateEmpProfile_Id=(select candidateEmpProfileId from candidateEmpProfile where candidateUserId=candidateUser_Id and employmentProfileID=employmentProfile_ID and isDeleted=0)
	
    if is_Deleted=0 then
				if candidateEmpProfileDoc_Id=0 then
						insert into candidateEmpProfileDocument (
										candidateEmpProfileId
									,	documentName
									,	documentPath
									,	documentMimeType
									,	eTag
									,	fileStatus
								-- 	,	relevantForAll
									,	createdBy
									,	createdOn
									,	isDeleted 
                                    ,	guid)
							values (	candidateEmpProfile_Id
									,	document_Name
									,	document_Path
									,	documentMime_Type
									,	e_Tag
									,	file_Status
								-- 	,	relevantFor_All
									,	created_By
									,	utc_timestamp()
									,	0 
                                    ,	gu_id)
							  
								IF ROW_COUNT() > 0 THEN
										set candidateEmpProfileDoc_Id=last_insert_id()
										select candidateEmpProfileDoc_Id
								end if   
				else
							update candidateEmpProfileDocument set 
										documentName	=	coalesce(document_Name,documentName)
									,	documentPath	=	coalesce(document_Path,documentPath)
									,	documentMimeType	=	coalesce(documentMime_Type,documentMimeType)
									,	eTag	=	coalesce(e_Tag, eTag)
									,	fileStatus	=	file_Status
								-- 	,	relevantForAll	=	relevantFor_All
									,	updatedBy	=	coalesce(created_By, updatedBy ,createdBy)
                                    ,	updatedOn	=	utc_timestamp()
									,	isDeleted	=	0
                                    ,	guid=coalesce(gu_id,guid)
							where candidateEmpProfileDocId=candidateEmpProfileDoc_Id
								
                                IF ROW_COUNT() > 0 THEN
										select candidateEmpProfileDoc_Id
								end if  
				end if
		else
				update candidateEmpProfileDocument set 
							updatedBy	=	created_By
						,	updatedOn	=	utc_timestamp()
						,	isDeleted	=	1
				where candidateEmpProfileDocId=candidateEmpProfileDoc_Id
                
					 IF ROW_COUNT() > 0 THEN
							select candidateEmpProfileDoc_Id
					 end if  
        end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmpProfileExpSkill` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmpProfileExpSkill`(
   IN	candidateEmpProfileSkill_Id	bigint(20)
 , IN	candidateEmpProfile_ExpId	bigint(20) 
 , IN	skill_Id	int(11)
 , IN	is_Other	bit(1)
 , IN	other_Skill	varchar(100)
 , IN	is_Deleted bit(1)
 , IN 	created_By bigint(20)
)
BEGIN


	/*
	 Author: James
	 Date  : 24/11/2014
	 Description : Insert update Candidate  profile
	*/
				 
					
	 if (is_Deleted=0) then             
		if (candidateEmpProfileSkill_Id=0) then
				
				insert into candidateEmpProfileExpSkill (  candidateEmpProfileExpId ,skillId, isOther, otherSkill, isDeleted,createdBy,createdOn)
						values (candidateEmpProfile_ExpId, skill_Id, is_Other, other_Skill, 0,created_By,utc_timestamp())
						
				IF ROW_COUNT() > 0 THEN
						select 1 as StatusValue 
				end if      

		else
			update 	candidateEmpProfileExpSkill set 
					candidateEmpProfileExpId=candidateEmpProfile_ExpId
				,	skillId	=	skill_Id
				,	isOther	=	is_Other
				,	otherSkill	=	other_Skill
				,	isDeleted	=	0
                ,   updatedBy = created_By
				,   updatedOn = utc_timestamp()
			where candidateEmpProfileSkillId =candidateEmpProfileSkill_Id

				IF ROW_COUNT() > 0 THEN
						select 1 as StatusValue 
				end if      		

		end if
	else
			update candidateEmpProfileExpSkill set
				isDeleted	=	1
			,   updatedBy = created_By
			,   updatedOn = utc_timestamp()
			where candidateEmpProfileSkillId =candidateEmpProfileSkill_Id

			IF ROW_COUNT() > 0 THEN
				select 1 StatusValue 
			end if
			
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmpProfileExpSkillTemp` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmpProfileExpSkillTemp`(
   IN	candidateEmpProfileSkill_Id	bigint(20)
 , IN	candidateEmpProfile_ExpId	bigint(20) 
 , IN	skill_Id	int(11)
 , IN	is_Other	bit(1)
 , IN	other_Skill	varchar(100)
 , IN	is_Deleted bit(1)
 , IN 	created_By bigint(20)
 ,IN   gu_id varchar(200)
)
BEGIN


	/*
	 Author: James
	 Date  : 24/11/2014
	 Description : Insert update Candidate  profile
	*/
				 
					
	 if (is_Deleted=0) then             
		if (candidateEmpProfileSkill_Id=0) then
				
				insert into candidateEmpProfileExpSkill (  candidateEmpProfileExpId ,skillId, isOther, otherSkill, isDeleted,createdBy,createdOn,guid)
						values (candidateEmpProfile_ExpId, skill_Id, is_Other, other_Skill, 0,created_By,utc_timestamp(),gu_id)
						
				IF ROW_COUNT() > 0 THEN
						select 1 as StatusValue 
				end if      

		else
			update 	candidateEmpProfileExpSkill set 
					candidateEmpProfileExpId=candidateEmpProfile_ExpId
				,	skillId	=	skill_Id
				,	isOther	=	is_Other
				,	otherSkill	=	other_Skill
				,	isDeleted	=	0
                ,   updatedBy = created_By
				,   updatedOn = utc_timestamp()
                ,	guid=coalesce(gu_id,guid)
			where candidateEmpProfileSkillId =candidateEmpProfileSkill_Id

				IF ROW_COUNT() > 0 THEN
						select 1 as StatusValue 
				end if      		

		end if
	else
			update candidateEmpProfileExpSkill set
				isDeleted	=	1
			,   updatedBy = created_By
			,   updatedOn = utc_timestamp() 
			where candidateEmpProfileSkillId =candidateEmpProfileSkill_Id

			IF ROW_COUNT() > 0 THEN
				select 1 StatusValue 
			end if
			
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmpProfilePreference` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmpProfilePreference`(

   IN	candidateEmpProfilePreference_Id	bigint(20)
  ,IN	candidateUser_Id	bigint(20)
  ,IN	employmentProfile_ID	int(11)
  -- ,IN	industry_Id	bigint(20)
  -- ,IN	preferred_Position	varchar(200)
  ,IN	salaryPer_Id	smallint(6)
  ,IN	expectedMin_Salary	decimal(18,2)
  ,IN	expMinSalaryCurrency_Id	bigint(20)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)
  ,IN	considerForOther_JobProfile bit(1)
  , IN 	is_Prefered bit(1)
)
BEGIN

declare StatusValue bigint(20)
/*
 Author: James
 Date  : 24/11/2014
 Description : Inserting and Updating Candidate Employee Profile Preference
*/
	if (is_Deleted=0) then
    
				update candidateDetail set considerForOtherJobProfile=considerForOther_JobProfile
						,updatedBy=created_By
                        ,updatedOn=utc_timestamp()
				  where candidateUserId  =candidateUser_Id
                  
					IF ROW_COUNT() > 0 THEN
						set StatusValue=1
						call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,10,1)
                    end if
                    
      
		-- if candidateEmpProfilePreference_Id =0 then
           if not exists(select 1 from candidateEmpProfilePreference  where candidateUserId=candidateUser_Id and employmentProfileID=COALESCE(employmentProfile_ID,employmentProfileID)  and isDeleted=0) then 
        
				insert into candidateEmpProfilePreference (employmentProfileID, expectedMinSalary, expMinSalaryCurrencyId, isPrefered, createdBy,createdOn, isDeleted, salaryPerId, candidateUserId)
					values(employmentProfile_ID, expectedMin_Salary, expMinSalaryCurrency_Id,is_Prefered, created_By,utc_timestamp(),0, salaryPer_Id,candidateUser_Id)
				
				IF ROW_COUNT() > 0 THEN
					set StatusValue= last_insert_id()
                    
						call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,10,1)
				end if 
		else
				update candidateEmpProfilePreference set 
						employmentProfileID=employmentProfile_ID
					-- ,	industryId	= case when industry_Id=0 then null else	coalesce( industry_Id, industryId) end
					-- ,	preferredPosition	=	coalesce(preferred_Position, preferredPosition)
					 ,	salaryPerId	=	salaryPer_Id
					,	expectedMinSalary	=	expectedMin_Salary
					,	expMinSalaryCurrencyId	=	expMinSalaryCurrency_Id
                    ,	isPrefered	=	is_Prefered
					,	updatedBy	=	created_By
					,	updatedOn	= utc_timestamp()
					,	isDeleted	=0
				where   candidateUserId=candidateUser_Id and employmentProfileID=employmentProfile_ID and isDeleted=0  
				
				
				IF ROW_COUNT() > 0 THEN
					set StatusValue= candidateEmpProfilePreference_Id
                    
						call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,10,1)
				end if 

		end if
		
	-- delete 
	else 
    
				update candidateDetail set considerForOtherJobProfile=considerForOther_JobProfile
						,updatedBy=created_By
                        ,updatedOn=utc_timestamp()
				  where candidateUserId  =candidateUser_Id
                  
			update candidateEmpProfilePreference set 
						updatedBy	=	created_By
					,	updatedOn	= utc_timestamp()
					,	isDeleted	=1
				where   candidateUserId=candidateUser_Id and employmentProfileID=employmentProfile_ID and isDeleted=0   
				
                IF ROW_COUNT() > 0 THEN
						set StatusValue= candidateEmpProfilePreference_Id
				end if
                
              update candidateEmpProfile set 
						showInPreference=0
					,	updatedBy	=	created_By
					,	updatedOn	= utc_timestamp()
				where candidateUserId=candidateUser_Id and employmentProfileID=employmentProfile_ID
  
			IF ROW_COUNT() > 0 THEN
				
				set StatusValue= candidateEmpProfilePreference_Id
                
                if not exists(select candidateUserId from candidateEmpProfilePreference where candidateUserId=candidateUser_Id and  isDeleted=0) then

							call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,10,0)
				end if				
			end if 

	end if
    
    select StatusValue
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateEmpProfileSkill` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateEmpProfileSkill`(
   IN	candidateEmpProfileSkill_Id	bigint(20)
 , IN	candidateUser_Id	bigint(20)
 , IN	employmentProfile_ID	int(11)
 , IN	skill_Id	int(11)
 , IN	is_Other	bit(1)
 , IN	other_Skill	varchar(100)
 , IN	is_Deleted bit(1)
 , IN 	created_By bigint(20)
)
BEGIN


	/*
	 Author: James
	 Date  : 24/11/2014
	 Description : Insert update Candidate  profile
	*/
				 
					
	 if (is_Deleted=0) then             
		if (candidateEmpProfileSkill_Id=0) then
				
				insert into candidateEmpProfileSkill ( candidateUserId, employmentProfileID, skillId, isOther, otherSkill, isDeleted,createdBy,createdOn)
						values (candidateUser_Id, employmentProfile_ID, skill_Id, is_Other, other_Skill, 0,created_By,utc_timestamp())
						
				IF ROW_COUNT() > 0 THEN
						select 1 as StatusValue 
				end if      

		else
			update 	candidateEmpProfileSkill set 
					candidateUserId	=	candidateUser_Id
				,	employmentProfileID	=	employmentProfile_ID
				,	skillId	=	skill_Id
				,	isOther	=	is_Other
				,	otherSkill	=	other_Skill
				,	isDeleted	=	0
                ,   updatedBy = created_By
				,   updatedOn = utc_timestamp()
			where candidateEmpProfileSkillId =candidateEmpProfileSkill_Id

				IF ROW_COUNT() > 0 THEN
						select 1 as StatusValue 
				end if      		

		end if
	else
			update candidateEmpProfileSkill set
				isDeleted	=	1
			where candidateEmpProfileSkillId =candidateEmpProfileSkill_Id

			IF ROW_COUNT() > 0 THEN
				select 1 StatusValue 
			end if
			
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateGiveAwayRequests` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateGiveAwayRequests`(
IN shiftOffer_Id bigint
,IN candidate_Id varchar(5000)
,IN Shift_statusId tinyint
,IN candidate_Status tinyint
,IN created_By bigint
)
BEGIN
/*
 Author: James
 Date  : 11/12/2015
 Description : Insert Update candidateGiveAwayRequests
*/
 if Shift_statusId in(60,62) then 
	set candidate_Status=60
 elseif Shift_statusId in(63) then 
	set candidate_Status=1
 else 
	set candidate_Status=candidate_Status
 end if 

   
	insert into candidateGiveAwayRequests(
		shiftOfferId
		,candidateId
		,status
		,candidateStatus
		,createdBy
		,createdOn)
	select a.*from (
		select shiftOffer_Id
				,userId
				,Shift_statusId
				,candidate_Status
				,created_By
				,utc_timestamp() 
		from scUser where find_in_set(userId,candidate_Id)
	)a left join candidateGiveAwayRequests cg on a.shiftOffer_Id=cg.shiftOfferId and a.userId=cg.candidateId
	where cg.candidateId is null and Shift_statusId   in (1,60,62,63) 
    if row_count()>0 then
		update candidateShiftOffer set isNotified=0 WHERE shiftOfferId=shiftOffer_Id and status in(1,63)
    end if
	 
	update candidateGiveAwayRequests set 
	status =Shift_statusId ,candidateStatus=candidate_Status 
    ,updatedBy=created_By,updatedOn=utc_timestamp() 
	where shiftOfferId=shiftOffer_Id 	and find_in_set(candidateId,candidate_Id) and Shift_statusId   in (1,60,62,63)

	update candidateGiveAwayRequests set status =case when Shift_statusId=1 and status=62 then 63 else  Shift_statusId end
    ,candidateStatus=candidate_Status,updatedBy=created_By,updatedOn=utc_timestamp() 
	where shiftOfferId=shiftOffer_Id and status IN(60,62) and Shift_statusId   in (1,63)

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateMyDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateMyDetails`(
  IN user_Id bigint(20) 
, IN street_address_line1 longtext
, IN street_address_line2 longtext 
, IN country_id bigint(20) 
, IN state_id bigint(20) 
, IN city_id bigint(20) 
, IN zip_code longtext
, IN county_name varchar(50) 
, IN secondary_Email varchar(50) 
, IN created_By bigint(20) 
, IN home_Phone longtext 
, IN work_Phone longtext 
, IN mobile_Phone longtext
, IN emgncy_contact_person longtext 
, IN emgncy_contact_reltn longtext 
, IN emgncy_contact_phone_no longtext 
, IN canEmergency_ContactId	bigint(20)
, IN latitude_coordinate	decimal(21,17)
, IN longitude_coordinate	decimal(21,17)
)
BEGIN



/*
 Author: James
 Date  : 15/12/2014
 Description : Insert Update candidate profile details
*/


declare StatusValue bit
set StatusValue = 0

	update scUser set secondaryEmail = coalesce(secondary_Email,secondaryEmail) ,updatedBy = coalesce(created_By,updatedBy,createdBy)
								,updatedOn =	utc_timestamp() where userID = user_ID
	
	IF ROW_COUNT() > 0 THEN
		set StatusValue = 1
	end if
    
    

	if exists(select 1 from candidateDetail where candidateuserID= user_Id) then
			update candidateDetail set 
							    streetaddressline1 = street_address_line1 
								,streetaddressline2 = street_address_line2 
								,countryid =  country_id 
								,stateid =  state_id 
								,cityid =  city_id 
								,zipCode =  zip_code 
								,county =  county_name 
								,updatedBy = created_By 
								,updatedOn = utc_timestamp()
                                  ,	latitude	=	latitude_coordinate
								,	longitude	=	longitude_coordinate
								where candidateuserID = user_Id
			
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
				call insertUpdateCandidateScreenSectionDetail(user_Id,2,1)
			end if
		else 
			insert into candidateDetail ( candidateuserID,streetAddressLine1 ,streetAddressLine2 ,countryId ,stateId ,cityId ,zipCode ,county ,createdBy ,createdOn ,latitude,longitude)
			values (user_ID ,street_address_line1 ,street_address_line2 ,country_id,state_id ,city_id,zip_code   ,county_name  ,user_id ,utc_timestamp() ,latitude_coordinate,longitude_coordinate )
			
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
					call insertUpdateCandidateScreenSectionDetail(user_Id,2,1)
			end if
		end if
	
	if (StatusValue =1) then
		 if not exists (select 1 from userContact where userID=user_Id ) then
					insert into userContact (userID, homePhone, workPhone, mobilePhone, isDeleted)
					values (user_ID, home_Phone, work_Phone, mobile_Phone, 0)
         else
			update userContact set  homePhone = coalesce(home_Phone, homePhone)
								   ,workPhone = coalesce(work_Phone, workPhone)
                                   ,mobilePhone = coalesce(mobile_Phone, mobilePhone)
                                   ,isDeleted = 0 where userID = user_Id
         end if
         
         
         -- Emergency contact
         
         	if exists(select 1 from candidateEmergencyContact where candidateUserId=user_Id) then
            
					update candidateEmergencyContact set 
						emgncycontactperson = emgncy_contact_person 
						,emgncycontactreltn =  emgncy_contact_reltn 
						,emgncycontactphone =  emgncy_contact_phone_no 
						,updatedBy =  created_By 
						,updatedOn = utc_timestamp()
						where candidateUserId=user_Id
				IF ROW_COUNT() > 0 THEN
					set StatusValue =1
							call insertUpdateCandidateScreenSectionDetail(user_Id,3,1)
				end if
			else
					insert into candidateEmergencyContact (candidateUserId,emgncyContactPerson,emgncyContactReltn,emgncyContactPhone,createdBy,createdOn)
					values (user_Id,emgncy_contact_person,emgncy_contact_reltn,emgncy_contact_phone_no,created_By,utc_timestamp())

				IF ROW_COUNT() > 0 THEN
					set StatusValue =1
						call insertUpdateCandidateScreenSectionDetail(user_Id,3,1)
				end if
			end if

         
	end if
	
	select StatusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePayrolPin` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePayrolPin`(
 IN user_Id bigint(20) 
 , IN payrol_pin longtext )
BEGIN
	
/*
 Author: Tijo Joseph
 Date  : 15/12/2014
 Description : Insert Update candidate payrol pin
*/

	update candidateUser set pin = payrol_pin
					  ,updatedBy = user_Id
					  ,updatedOn = utc_timestamp()
					  where candidateuserID = user_Id

		IF ROW_COUNT() > 0 THEN
			select 1 as  StatusValue 
				call insertUpdateCandidateScreenSectionDetail(user_Id,5,1)
		end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePayrolPinPreference` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePayrolPinPreference`(
   IN user_Id bigint(20) 
 , IN payrol_pin longtext
 , IN mail_pref bit(1) 
 )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 15/12/2014
 Description : Insert Update candidate payrol pin and mail prefference
*/

 	update candidateUser set pin = payrol_pin
					  ,likePromotionalMails = mail_pref
					  ,updatedBy = user_Id
					  ,updatedOn = utc_timestamp()
					  where candidateuserID = user_Id

		IF ROW_COUNT() > 0 THEN
			select 1 as  StatusValue 
				call insertUpdateCandidateScreenSectionDetail(user_Id,5,1)
				call insertUpdateCandidateScreenSectionDetail(user_Id,6,1)
		end if
       
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePersonalProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePersonalProfile`( 
IN user_Id bigint(20) 
, IN first_name varchar(100) 
, IN middle_name varchar(100) 
, IN last_name varchar(100) 
, IN nationality_Id bigint(20) 
, IN gender_Id smallint(6) 
, IN can_dob longtext 
, IN created_By bigint(20) 
, in student_TypeId tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 15/12/2014
 Description : Insert Update candidate personal preference
*/

DECLARE StatusValue bit
set StatusValue =0
	
		update scUser set 	 
						 firstName = first_name
						,middleName = middle_name
						,lastName = last_name
						,nationalityId = nationality_Id
						,genderId = gender_Id
                        ,updatedBy = created_By
                        ,updatedOn = utc_timestamp()
						where userID = user_Id

		IF ROW_COUNT() > 0 THEN
			set StatusValue =1
				call insertUpdateCandidateScreenSectionDetail(user_Id,1,1)
		end if

		if exists(select 1 from candidateDetail where candidateuserID = user_Id) then
			update candidateDetail set 
								dob = can_dob 
								,updatedBy = created_By
								,updatedOn = utc_timestamp()
                                ,studentTypeId= student_TypeId
								where candidateuserID = user_Id
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
				call insertUpdateCandidateScreenSectionDetail(user_Id,1,1)
			end if
		else 
			insert into candidateDetail (candidateuserID,dob,createdBy,createdOn,isStudent)
			values (user_Id,can_dob,created_By,utc_timestamp(),is_Student)
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
				call insertUpdateCandidateScreenSectionDetail(user_Id,1,1)
			end if
		end if
	
	select StatusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePrefCountryDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePrefCountryDocument`(
  IN	candidatePrefCountryDoc_Id	bigint(20)
, IN	candidateUser_Id	bigint(20)
, IN	candidatePrefCountry_Id	bigint(20)
, IN	document_Name	varchar(200)
, IN	document_Path	varchar(1000)
, IN	documentMime_Type	varchar(6)
, IN	e_Tag	varchar(1000)
, IN	created_By	bigint(20)
, IN 	file_Status tinyint(6)
, IN	is_Deleted bit(1)
)
BEGIN


/*
 Author: James
 Date  : 19/11/2014
 Description : Inserting and Updating Candidate prefered country Document
 FileStatus : 0 - inprogress 1-completed 2-corrupted
*/

if (is_Deleted=0) then
			if (candidatePrefCountryDoc_Id=0) then 

				insert into candidatePreferredCountryDocument
				(  candidatePreferredCountryId, documentName, documentPath, documentMimeType, eTag, createdBy, createdOn,fileStatus,isDeleted)
				values (   candidatePrefCountry_Id, document_Name, document_Path, documentMime_Type, e_Tag, created_By,utc_timestamp(),file_Status,0)

					IF ROW_COUNT() > 0 THEN
							set candidatePrefCountryDoc_Id = last_insert_id()
							select candidatePrefCountryDoc_Id 
					end if

			else
					update candidatePreferredCountryDocument set 
						candidatePreferredCountryId	=coalesce(candidatePrefCountry_Id	,candidatePreferredCountryId),
						documentName	=	coalesce(document_Name	,documentName),
						documentPath	=	coalesce(document_Path	,documentPath),
						documentMimeType	=	coalesce(documentMime_Type	,documentMimeType),
						eTag	=	coalesce(e_Tag	,eTag),
                        fileStatus=file_Status,
						updatedBy	=	coalesce(created_By, updatedBy ,createdBy),
						updatedOn	=	utc_timestamp(),
                        isDeleted=0
					where candidatePreferredCountryDocumentId	=	candidatePrefCountryDoc_Id


					IF ROW_COUNT() > 0 THEN
							select candidatePrefCountryDoc_Id 
					end if

			end if
	else
			update candidatePreferredCountryDocument set 
				isDeleted=1,
				updatedBy	=	created_By,
				updatedOn	=	utc_timestamp()
			where candidatePreferredCountryDocumentId	=	candidatePrefCountryDoc_Id

   				IF ROW_COUNT() > 0 THEN
							select candidatePrefCountryDoc_Id 
					end if
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePreferredCountry` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePreferredCountry`( 
	  IN	candidatePrefCountry_Id	bigint(20)
	, IN	candidateUser_Id	bigint(20)
	, IN	country_Id	bigint(20)
	, IN	haveWork_Eligibility	bit(1)
	, IN	typeOf_Visa	varchar(100)
	, IN	state_Id	bigint(20)
	, IN	city_Id	bigint(20)
    , IN 	ConsiderFor_OverseaWork bit(1)
	, IN	is_Deleted bit(1)
    , IN	created_By	bigint(20)
    , IN    is_Prefered bit(1)
    )
BEGIN


/*
 Author: James
 Date  : 20/11/2014
 Description : Inserting and Updating Candidate Prefered country
*/

			Declare StatusValue bigint(20)

			update candidateDetail set
						 considerForOverseaWork=ConsiderFor_OverseaWork
								,updatedBy	=	created_By	,
								updatedOn	=	utc_timestamp()	
			where candidateUserId=candidateUser_Id
				
			IF ROW_COUNT() > 0 THEN
				set StatusValue= 1                 
					call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,12,1)  
			end if
            
            
if (is_Deleted=0) then

			
			if ConsiderFor_OverseaWork=1 then
					-- if (candidatePrefCountry_Id=0) then
                    if coalesce(country_Id,0)<>0 then 
					if not exists(select 1 from candidatePreferredCountry where candidateUserId=candidateUser_Id and countryId=country_Id and isDeleted=0 ) then
							insert into candidatePreferredCountry (
							 candidateUserId, countryId, haveWorkEligibility, typeOfVisa, stateId, cityId, createdBy, createdOn,isDeleted,isPrefered)
							values (candidateUser_Id, country_Id, haveWork_Eligibility, typeOf_Visa, state_Id, city_Id, created_By, utc_timestamp(),0,is_Prefered)
						
							IF ROW_COUNT() > 0 THEN
								set StatusValue= last_insert_id() 
                                
									call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,12,1)  
							end if
					else
							update candidatePreferredCountry set 
								countryId	=	country_Id	,
								haveWorkEligibility	=	haveWork_Eligibility	,
								typeOfVisa	=	typeOf_Visa	,
								stateId	=	state_Id	,
								cityId	=	city_Id	,
								updatedBy	=	created_By	,
								updatedOn	=	utc_timestamp()	,
								isDeleted	=	0	,
								isPrefered 	= 	is_Prefered
							where  candidateUserId=candidateUser_Id and countryId=country_Id and isDeleted=0

						IF ROW_COUNT() > 0 THEN
							set StatusValue= candidatePrefCountry_Id 
                             
						end if
					end if
			 end if  
             end if
else
		update candidatePreferredCountry set 	
					updatedBy	=	created_By	,
					updatedOn	=	utc_timestamp()	,
					isDeleted	=	1
		where candidateUserId=candidateUser_Id and countryId=country_Id and isDeleted=0

				IF ROW_COUNT() > 0 THEN
					set StatusValue= candidatePrefCountry_Id 
                    
						if not exists(select candidateUserId from candidatePreferredCountry where candidateUserId=candidateUser_Id and isDeleted=0) then
								call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,12,0) 
                         end if       
				end if
end if

select StatusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePrevEmplomentProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePrevEmplomentProfile`(
   IN	candidateEmpProfile_Id	bigint(20)
  ,IN	candidateUser_Id	bigint(20)
  ,IN	employmentProfile_ID	smallint(6)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)

)
BEGIN

/*
 Author: James
 Date  : 18/12/2014
 Description : Inserting and Updating Candidate previous Employement profile
 call est_skillsconnect.InsertUpdateCandidatePrevEmplomentProfile(0, 117, 2, 117, 0)

*/

	if is_Deleted=0 then
			-- if candidateEmpProfile_Id=0 then
				if not exists(select 1 from candidateEmpProfile where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0) then
					
						insert into candidateEmpProfile ( candidateUserId, employmentProfileID, createdBy, createdOn,isDeleted)
						values (candidateUser_Id, employmentProfile_ID, created_By,utc_timestamp(),0)
							
						IF ROW_COUNT() > 0 THEN
								set candidateEmpProfile_ID=last_insert_id()
								 call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,1)
								select  candidateEmpProfile_ID as StatusValue                           
								
						end if			
				else
						update  candidateEmpProfile set 				 
							 updatedBy=created_By
							,updatedOn=utc_timestamp()
						where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0
					
					 if row_count()>0 then
							set candidateEmpProfile_ID= (select candidateEmpProfileID from candidateEmpProfile where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0)
									 
							select  candidateEmpProfile_ID as StatusValue 
					 end if
            
			end if 
    else
			
			update  candidateEmpProfile set 
				 isDeleted=1
				,updatedBy=created_By
				,updatedOn=utc_timestamp()
			where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0
			/*
            delete from candidateEmpProfile
            where candidateEmpProfileId=candidateEmpProfile_Id
            */
            if row_count()>0 then
            set candidateEmpProfile_ID= (select candidateEmpProfileID from candidateEmpProfile where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID  order by candidateEmpProfileID desc limit 1)
							
					update candidateEmpProfileExperience set 
						isDeleted=1
						,updatedBy=created_By
						,updatedOn=utc_timestamp()
					where candidateEmpProfileId=candidateEmpProfile_Id

					update candidateEmpProfileExpSkill   cepes inner join candidateEmpProfileExperience  cepe
					on cepes.candidateEmpProfileExpId=cepe.candidateEmpProfileExpId
					set cepes.isDeleted=1
						,cepes.updatedBy=created_By
						,cepes.updatedOn=utc_timestamp()
					where cepe.candidateEmpProfileId=candidateEmpProfile_Id

					select  candidateEmpProfile_ID as StatusValue  
                    
					if not exists( 
								select cep.candidateUserId from candidateEmpProfileExperience cepe inner join candidateEmpProfile cep
								on cepe.candidateEmpProfileID=cep.candidateEmpProfileId where cep.candidateUserId=candidateUser_Id and cepe.isDeleted=0) then
							
                            call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,0)
                        
                     end if           
                     
            end if
    
    end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePrevEmplomentProfileTemp` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePrevEmplomentProfileTemp`(
   IN	candidateEmpProfile_Id	bigint(20)
  ,IN	candidateUser_Id	bigint(20)
  ,IN	employmentProfile_ID	smallint(6)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)
  ,IN   gu_id varchar(200)
)
BEGIN

/*
 Author: James
 Date  : 18/12/2014
 Description : Inserting and Updating Candidate previous Employement profile
 call est_skillsconnect.InsertUpdateCandidatePrevEmplomentProfile(0, 117, 2, 117, 0)
*/

	if is_Deleted=0 then
			-- if candidateEmpProfile_Id=0 then
				if not exists(select 1 from candidateEmpProfile where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0) then
					
						insert into candidateEmpProfile ( candidateUserId, employmentProfileID, createdBy, createdOn,isDeleted,guid)
						values (candidateUser_Id, employmentProfile_ID, created_By,utc_timestamp(),0,gu_id)
							
						IF ROW_COUNT() > 0 THEN
								set candidateEmpProfile_ID=last_insert_id()
								 call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,1)
								select  candidateEmpProfile_ID as StatusValue                           
								
						end if			
				else
						update  candidateEmpProfile set 				 
							 updatedBy=created_By
							,updatedOn=utc_timestamp()
                            ,guid=coalesce(gu_id,guid)
						where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0
					
					 if row_count()>0 then
							set candidateEmpProfile_ID= (select candidateEmpProfileID from candidateEmpProfile where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0)
									 
							select  candidateEmpProfile_ID as StatusValue 
					 end if
            
			end if 
    else
			
			update  candidateEmpProfile set 
				 isDeleted=1
				,updatedBy=created_By
				,updatedOn=utc_timestamp()
                ,guid=coalesce(gu_id,guid)
			where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID and isDeleted=0
			/*
            delete from candidateEmpProfile
            where candidateEmpProfileId=candidateEmpProfile_Id
            */
            if row_count()>0 then
            set candidateEmpProfile_ID= (select candidateEmpProfileID from candidateEmpProfile where candidateUserId= candidateUser_Id and employmentProfileID= employmentProfile_ID  order by candidateEmpProfileID desc limit 1)
							
					update candidateEmpProfileExperience set 
						isDeleted=1
						,updatedBy=created_By
						,updatedOn=utc_timestamp()
					where candidateEmpProfileId=candidateEmpProfile_Id

					update candidateEmpProfileExpSkill   cepes inner join candidateEmpProfileExperience  cepe
					on cepes.candidateEmpProfileExpId=cepe.candidateEmpProfileExpId
					set cepes.isDeleted=1
						,cepes.updatedBy=created_By
						,cepes.updatedOn=utc_timestamp()
					where cepe.candidateEmpProfileId=candidateEmpProfile_Id

					select  candidateEmpProfile_ID as StatusValue  
                    
					if not exists( 
								select cep.candidateUserId from candidateEmpProfileExperience cepe inner join candidateEmpProfile cep
								on cepe.candidateEmpProfileID=cep.candidateEmpProfileId where cep.candidateUserId=candidateUser_Id and cepe.isDeleted=0) then
							
                            call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,0)
                        
                     end if           
                     
            end if
    
    end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePrevEmployment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePrevEmployment`( 
   IN	candidateEmpProfileExp_Id	bigint(20)
 , IN	candidateEmpProfile_Id bigint(20)
 -- , IN	candidateUser_Id	bigint(20)
 -- , IN	employmentProfile_ID	int(11)
 , IN	company_Name	varchar(200)
 , IN	commencement_Year	smallint(6)
 , IN	employmentType_Id	int(11)
 , IN	period_Id	int(11)
 , IN	location	varchar(100)
 , IN	start_Date	date
 , IN	end_Date	date
 , IN	created_By	bigint(20)
 , IN   is_deleted  bit

)
begin

/*
 Author: James
 Date  : 24/11/2014
 Description : Inserting and Updating Candidate previous Employement
*/
declare candidateUser_Id	bigint(20)
declare exp_minMonth smallint
declare exp_maxMonth smallint
    
set candidateUser_Id= (select candidateUserId from candidateEmpProfile where candidateEmpProfileId=candidateEmpProfile_Id)
					
if (is_deleted=0) then 
		set exp_minMonth=(select minMonth from periodLocale where periodId=period_Id limit 1)
        set exp_maxMonth=(select maxMonth from periodLocale where periodId=period_Id limit 1)
        
        
        
	-- Previous employement
		if (candidateEmpProfileExp_Id=0 ) then 
			   
			insert candidateEmpProfileExperience (candidateEmpProfileID, companyName, commencementYear, employmentTypeId, periodId, location, startDate, endDate, createdBy, createdOn,isDeleted,expMinMonth,expMaxMonth )
				values ( candidateEmpProfile_ID, company_Name, commencement_Year, employmentType_Id, period_Id, location, start_Date, end_Date, created_By,utc_timestamp(), 0,exp_minMonth,exp_maxMonth)
					
					IF ROW_COUNT() > 0 THEN
						select last_insert_id() StatusValue
                        
							call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,1)
                    end if
							
        
		else
				update candidateEmpProfileExperience set 
						candidateEmpProfileID	=	candidateEmpProfileID
						,	companyName	=	company_Name
						,	commencementYear	=	coalesce(commencement_Year,commencementYear)
						,	employmentTypeId	=	employmentType_Id
						,	periodId	=	period_Id
						,	expMinMonth	=	exp_minMonth
						,	expMaxMonth	=	exp_maxMonth
						,	location	=	location
						,	startDate	=	start_Date
						,	endDate	=	end_Date
                        ,updatedBy=created_By
						,updatedOn=utc_timestamp()
			   where candidateEmpProfileExpId =candidateEmpProfileExp_Id

			IF ROW_COUNT() > 0 THEN             
				select candidateEmpProfileExp_Id as StatusValue
                
					call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,1)
			end if

		end if
else

		update candidateEmpProfileExperience set 
			isDeleted=1
			,updatedBy=created_By
			,updatedOn=utc_timestamp()
		where candidateEmpProfileExpId=candidateEmpProfileExp_Id


		IF ROW_COUNT() > 0 THEN
			select candidateEmpProfileExp_Id as StatusValue
		end if

end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePrevEmploymentTemp` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePrevEmploymentTemp`( 
   IN	candidateEmpProfileExp_Id	bigint(20)
 , IN	candidateEmpProfile_Id bigint(20)
 -- , IN	candidateUser_Id	bigint(20)
 -- , IN	employmentProfile_ID	int(11)
 , IN	company_Name	varchar(200)
 , IN	commencement_Year	smallint(6)
 , IN	employmentType_Id	int(11)
 , IN	period_Id	int(11)
 , IN	location	varchar(100)
 , IN	start_Date	date
 , IN	end_Date	date
 , IN	created_By	bigint(20)
 , IN   is_deleted  bit
 ,IN   gu_id varchar(200)

)
begin

/*
 Author: James
 Date  : 24/11/2014
 Description : Inserting and Updating Candidate previous Employement- used for offline sync
 
*/
declare candidateUser_Id	bigint(20)
declare exp_minMonth smallint
declare exp_maxMonth smallint
    
set candidateUser_Id= (select candidateUserId from candidateEmpProfile where candidateEmpProfileId=candidateEmpProfile_Id)
					
if (is_deleted=0) then 
		set exp_minMonth=(select minMonth from periodLocale where periodId=period_Id)
        set exp_maxMonth=(select maxMonth from periodLocale where periodId=period_Id)
        
        
        
	-- Previous employement
		if (candidateEmpProfileExp_Id=0 ) then 
			   
			insert candidateEmpProfileExperience (candidateEmpProfileID, companyName, commencementYear, employmentTypeId, periodId, location, startDate, endDate, createdBy, createdOn,isDeleted,expMinMonth,expMaxMonth,guid )
				values ( candidateEmpProfile_ID, company_Name, commencement_Year, employmentType_Id, period_Id, location, start_Date, end_Date, created_By,utc_timestamp(), 0,exp_minMonth,exp_maxMonth,gu_id)
					
					IF ROW_COUNT() > 0 THEN
						select last_insert_id() StatusValue
                        
							call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,1)
                    end if
							
        
		else
				update candidateEmpProfileExperience set 
						candidateEmpProfileID	=	candidateEmpProfileID
						,	companyName	=	company_Name
						,	commencementYear	=	coalesce(commencement_Year,commencementYear)
						,	employmentTypeId	=	employmentType_Id
						,	periodId	=	period_Id
						,	expMinMonth	=	exp_minMonth
						,	expMaxMonth	=	exp_maxMonth
						,	location	=	location
						,	startDate	=	start_Date
						,	endDate	=	end_Date
                        ,updatedBy=created_By
						,updatedOn=utc_timestamp()
                        ,guid=coalesce(gu_id,guid)
			   where candidateEmpProfileExpId =candidateEmpProfileExp_Id

			IF ROW_COUNT() > 0 THEN             
				select candidateEmpProfileExp_Id as StatusValue
                
					call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,7,1)
			end if

		end if
else

		update candidateEmpProfileExperience set 
			isDeleted=1
			,updatedBy=created_By
			,updatedOn=utc_timestamp()
            ,guid=coalesce(gu_id,guid)
		where candidateEmpProfileExpId=candidateEmpProfileExp_Id


		IF ROW_COUNT() > 0 THEN
			select candidateEmpProfileExp_Id as StatusValue
		end if

end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidatePromotionalMailPref` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidatePromotionalMailPref`( IN user_Id bigint(20) , IN mail_pref bit(1) )
BEGIN

/*
 Author: James
 Date  : 24/11/2014
 Description : Updating Candidate Promotional Mail Prefference
*/

	update candidateUser set 
						 likePromotionalMails = mail_pref
						,updatedBy = user_Id
						,updatedOn = utc_timestamp()
						where candidateuserID = user_Id

	IF ROW_COUNT() > 0 THEN
			select 1 as  StatusValue 
				call insertUpdateCandidateScreenSectionDetail(user_Id,6,1)
	
	end if

	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateQualification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateQualification`( 
	  IN	candidateQualification_Id	bigint(20)
	, IN	candidateUser_Id	bigint(20)
	, IN	course_Id	int(11)
	, IN	institution_Name	varchar(500)
	, IN	yearOf_Completion	smallint(6)
	, IN	created_By	bigint(20)
    , IN 	is_Deleted bit(1)
   )
BEGIN
/*
 Author: James
 Date  : 20/11/2014
 Description : insert update candidate Qualification
*/
        
	 if (is_deleted=0) then       
			if candidateQualification_Id<>0 then
					
					update candidateQualification set 
							courseId	=	course_Id	,
							institutionName	=	institution_Name	,
							yearOfCompletion	=	yearOf_Completion	,
							updatedBy = created_By,
							updatedOn = utc_timestamp(),
							isDeleted=0                    
					 where  candidateQualificationId = candidateQualification_Id

					IF ROW_COUNT() > 0 THEN
						
                       -- select  candidateQualification_Id
								
                        call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,8,1)
                        
						select candidateQualification_Id
					end if
					
			else
				
					insert into candidateQualification ( candidateUserId, courseId, institutionName, yearOfCompletion, createdBy, createdOn, isDeleted)
					values ( candidateUser_Id, course_Id, institution_Name, yearOf_Completion, created_By, utc_timestamp(),0)

					IF ROW_COUNT() > 0 THEN
						set candidateQualification_Id= last_insert_id() 
                        
                        select candidateQualification_Id
                        
                        call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,8,1)
					end if
			end if
	else
			update candidateQualification set 
				updatedBy = created_By,
				updatedOn = utc_timestamp(),
				isDeleted=1                    
			where  candidateQualificationId = candidateQualification_Id

				IF ROW_COUNT() > 0 THEN
					select candidateQualification_Id
                    
                    update  candidateQualificationDocument set 
                    	updatedBy = created_By,
						updatedOn = utc_timestamp(),
						isDeleted=1 
					where candidateQualificationId= candidateQualification_Id
                    
				end if
	end if 



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateQualificationDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateQualificationDocument`(
  IN	candidateQualificationDocument_Id bigint(20)
, IN	candidateQualification_Id	bigint(20)
, IN	document_Name	varchar(200)
, IN	document_Path	varchar(1000)
, IN	documentMime_Type	varchar(6)
, IN	e_Tag	varchar(1000)
, IN	is_Deleted bit(1)
, IN 	created_By	bigint(20)
, IN 	file_Status tinyint(6)
)
BEGIN

/*
 Author: James
 Date  : 19/11/2014
 Description : Inserting and Updating Candidate Document Qualification document
 FileStatus : 0 - inprogress 1-completed 2-corrupted
*/

		if is_Deleted=0 then				
                if candidateQualificationDocument_Id=0 then
							insert into candidateQualificationDocument
								(	candidateQualificationId
								,	documentName
								,	documentPath
								,	documentMimeType
								,	eTag 
                                ,	fileStatus
                                ,	createdBy
                                ,	createdOn
                                ,	isDeleted)
                            values (candidateQualification_Id
									,	document_Name
									,	document_Path
									,	documentMime_Type
									,	e_Tag 
                                    ,	file_Status
                                    ,	created_By
                                    ,	utc_timestamp()
                                    ,	0 )
											   
							IF ROW_COUNT() > 0 THEN
									set candidateQualificationDocument_Id=last_insert_id()
									select candidateQualificationDocument_Id
							end if
                else
							update candidateQualificationDocument set
									-- 	candidateQualificationId	=	coalesce(candidateQualification_Id,candidateQualificationId)
										documentName	=	coalesce(document_Name,documentName)
									,	documentPath	=	coalesce(document_Path,documentPath)
									,	documentMimeType	=	coalesce(documentMime_Type,documentMimeType)
									,	eTag	=	coalesce(e_Tag ,eTag)                       
                                    ,	fileStatus	=	file_Status
                                    ,	updatedBy	= coalesce(created_By, updatedBy ,createdBy)
                                    ,	updatedOn	=  utc_timestamp()
                                    ,	isDeleted	=	0
                            where candidateQualificationDocumentId=candidateQualificationDocument_Id
						
                		   
							IF ROW_COUNT() > 0 THEN
									select candidateQualificationDocument_Id
							end if
                
                end if
        
        else
				update candidateQualificationDocument set
						updatedBy	= created_By
						,	updatedOn	=  utc_timestamp()
						,	isDeleted	=	1
				where candidateQualificationDocumentId=candidateQualificationDocument_Id

				IF ROW_COUNT() > 0 THEN
						select candidateQualificationDocument_Id
				end if
        end if



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateScreenSectionDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateScreenSectionDetail`(
IN 	candidate_UserId 	bigint,
IN 	screen_SectionId 	smallint,
IN	is_Completed		bit(1)
)
BEGIN

/*
Author: James
Date  : 19/11/2014
Description : Inserting and Updating Candidate Screen Section Detail
SELECT * FROM est_skillsconnect.screenSection 
call est_skillsconnect.insertUpdateCandidateScreenSectionDetail(50, 2, 1)
*/

	if not exists( select candidateUserId from candidateScreenSectionDetail where candidateUserId=candidate_UserId and screenSectionId=screen_SectionId) then
			insert into candidateScreenSectionDetail (
							candidateUserId
						,	screenSectionId
						,	isCompleted )
					values (candidate_UserId
							,screen_SectionId
                            ,is_Completed)
               /*             
                   if row_count()>0 then
						select 1 StatusValue
                   end if
                */   
    else
			update candidateScreenSectionDetail set
					isCompleted=is_Completed
            where candidateUserId=candidate_UserId and screenSectionId=screen_SectionId
			   
               /*
               if row_count()>0 then
						select 1 StatusValue
				end if
				*/
    end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateUnavailableTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateUnavailableTime`(
in unavailable_Id bigint(20),
IN candidate_UserId BIGINT(20),
in unavailable_Date date,
IN start_Time TIME,
IN end_Time TIME,
in unavailreason varchar(2000),
in is_Deleted bit)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert/update candidate unavailable time
*/
	DECLARE rowcount INT
	DECLARE iCount INT
	
	SELECT COUNT(candidateId) INTO iCount
	    FROM candidateShiftOffer
	    WHERE candidateId=candidate_UserId AND shiftEndDateTime>CONCAT(unavailable_Date,' ',start_Time) AND shiftStartDateTime<CONCAT(unavailable_Date,' ',end_Time) AND STATUS NOT IN (3,19,33,36) AND isDeleted=0 and is_Deleted=0 -- and status<>1
	    
	IF iCount>0 THEN
		SELECT unavailable_Id AS unavailabilityId,candidate_UserId AS candidateId,43 AS statusId, 'ALREADYASSIGNED' AS statusName
	ELSE
		IF unavailable_Id=0 THEN
			INSERT INTO `candidateUnavailability` (
			  `candidateId`,`unavailableDate`,`startTime`,`endTime`,`reason`,createdBy,createdOn) 
			VALUES
			  (candidate_UserId,unavailable_Date,start_Time,end_Time,unavailreason,candidate_UserId,utc_timestamp())
			  
			SET rowcount=ROW_COUNT()
			SET unavailable_Id = LAST_INSERT_ID()
		ELSEIF is_Deleted=0 THEN
			UPDATE candidateUnavailability 
			SET candidateId=candidate_UserId,
				unavailableDate=unavailable_Date,
				startTime=start_Time,endTime=end_Time,reason=unavailreason
                ,updatedBy=candidate_UserId
                ,updatedOn=utc_timestamp()
			WHERE unavailabilityId=unavailable_Id
			
			SET rowcount=ROW_COUNT()
		ELSE
			DELETE FROM candidateUnavailability 
			WHERE unavailabilityId=unavailable_Id
			
			SET rowcount=ROW_COUNT()
		END IF
		
		IF rowcount>0 THEN
			SELECT unavailable_Id AS unavailabilityId,candidate_UserId AS candidateId,1 AS statusId, 'SUCCESS' AS statusName
		ELSE
			SELECT unavailable_Id AS unavailabilityId,candidate_UserId AS candidateId,0 AS statusId, 'FAILED' AS statusName
		END IF
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateUser`(
  IN User_Id bigint
, IN business_Id bigint
, IN site_Id	bigint  
, IN first_Name varchar(100) 
, IN last_Name varchar(100) 
, IN email_Id varchar(100) 
, IN User_Password varchar(5000) 
, IN mobile_Phone longtext 
, IN home_Phone longtext
, IN roleCategory_Id tinyInt
, IN created_by bigint
, IN encryption_Key varchar(100)
)
BEGIN

/*
 Author: James
 Date  : 17/02/2015
 Description : Inserting candidate user

*/

DECLARE StatusValue tinyint
-- DECLARE User_Id bigint
DECLARE userUniqueId nvarchar(75)
DECLARE role_Id bigint

set role_Id=2

	if User_Id=0 then
		if not exists(select 1 as IsExists from scUser where emailId=email_Id) then
		
			INSERT INTO scUser(FirstName,LastName,emailId,userPassword,RoleCategoryId,status,createdBy,createdOn,isLoggedInOnce,encryptionKey)
			VALUES(first_Name,last_Name,email_Id,User_Password,2,1,created_by,utc_timestamp(),0,encryption_Key)

			IF ROW_COUNT() > 0 THEN
					set StatusValue = 1
					set User_Id =  LAST_INSERT_ID()
					set userUniqueId = UUID() 
					set userUniqueId =CONCAT(userUniqueId , '-' , User_Id)  
					
					update scUser set userUIId = userUniqueId where userId = User_Id

					if not exists(select 1 from userRole where userId= User_Id and roleId = role_Id) then
						insert into userRole(userId,roleId,createdBy,createdOn,RoleCategoryId, isDeleted) 
						values (User_Id,role_Id,created_by,utc_timestamp(),2, 0)
					end if

					insert into candidateUser (candidateuserId,createdBy,createdOn)
					values (User_Id,created_by,utc_timestamp())

					insert into candidateDetail (candidateUserId,createdBy,createdOn)
					values (User_Id,created_by,utc_timestamp())

						if roleCategory_Id=3 then
							insert into businessCandidate 
								(businessId,businessSiteId,candidateUserId,createdBy,createdOn )
							values(business_Id,site_Id,User_Id,created_by,utc_timestamp())
							
						elseif roleCategory_Id=4 then
							insert into agencyCandidate
								(agencyId,agencySiteId,candidateUserId,createdBy,createdOn)
							values(business_Id,site_Id,User_Id,created_by,utc_timestamp())
							
						end if
						
						insert into userContact (userID, homePhone , mobilePhone, isDeleted, createdBy, createdOn)
						values (user_ID, home_Phone, mobile_Phone, 0, created_By, utc_timestamp() )
						
						
				end if
		  else 
					set StatusValue = 0 
		  end if      
	else
		if exists(select 1 as IsExists from scUser where  emailId=email_Id and userId<>User_Id) then
			set StatusValue = 0 
		else 
					update scUser set 
							  firstName=first_Name
							 , lastName=last_Name
							 , emailId=email_Id
							 , updatedBy=created_by
							 , updatedOn=utc_timestamp()
					 where userId=User_Id
					 
					 IF ROW_COUNT() > 0 THEN
							 update userContact set 
								   homePhone=home_Phone
								 , mobilePhone=mobile_Phone
								 , updatedBy=created_by
								 , updatedOn=utc_timestamp()
							 where userId=User_Id
								
						set StatusValue = 1
						set userUniqueId=(select userUIId from scUser where userId=User_id)
					 end if    
		end if
	end if		
		select  User_Id ,userUniqueId, StatusValue 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateWfInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateWfInstance`(
	IN	workflowInstance_Id	bigint(20)
,	IN	workFlow_Id	tinyint(4)
,	IN	currentState_Id	int(11)
,	IN	parentWorkflowInstance_Id	bigint
,	IN	businessSite_Id	bigint(20)
,	IN	jobProfileHireRequest_Id	bigint(20)
,	IN	created_By	bigint(20)
,	IN	event_Id	int(11)
, 	IN  prev_StateId int
,	IN	candidateUser_Id	bigint(20)
)
BEGIN
/* 
	 Author: James
	 Date  : 25/02/2015
	 Description : insert update candidate workflow instance 
*/

if workflowInstance_Id=0 then
	 call InsertUpdateWorkFlowInstance (workflowInstance_Id,workFlow_Id,currentState_Id,parentWorkflowInstance_Id,businessSite_Id,jobProfileHireRequest_Id,created_By,event_Id,prev_StateId,@workflowInstance_Id_out) 
 
	 select @workflowInstance_Id_out
    if @workflowInstance_Id_out<>0 then
			insert into candidateWfInstance (
						workflowInstanceId,
						candidateUserId,
						createdBy,
						createdOn)
			values (@workflowInstance_Id_out,candidateUser_Id,created_By,utc_timestamp())
        
    end if
 else 
 
	 call InsertUpdateWorkFlowInstance (workflowInstance_Id,workFlow_Id,currentState_Id,parentWorkflowInstance_Id,businessSite_Id,jobProfileHireRequest_Id,created_By,event_Id,prev_StateId,@workflowInstance_Id_out) 
 
	select @workflowInstance_Id_out
 end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateCandidateWorkPreference` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateCandidateWorkPreference`(
  in  candidateWork_PreferenceId      bigint(20)
, in  candidate_UserId      bigint(20)
, in  start_DateTime      datetime
, in  end_DateTime      datetime
, in  is_Deleted      bit(1)
, in  created_By      bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 05/04/2016
 Description : Insert update candidate work preference
*/
	if is_Deleted=0 then
			if candidateWork_PreferenceId=0 then
					insert into candidateWorkPreference (
						  candidateUserId
						, startDateTime
						, endDateTime
						, isDeleted
						, createdBy
						, createdOn )
					values ( candidate_UserId
						, start_DateTime
						, end_DateTime
						, 0
						, created_By
						, utc_timestamp())
					if row_count()>0 then
						set candidateWork_PreferenceId=last_insert_id()                      
						select candidateWork_PreferenceId
					end if
			else
					update candidateWorkPreference set 
						  startDateTime = start_DateTime
						, endDateTime = end_DateTime 
						, updatedBy = created_By
						, updatedOn = utc_timestamp()
					where candidateWorkPreferenceId = candidateWork_PreferenceId 
					if row_count()>0 then                    
						select candidateWork_PreferenceId
					end if 
			end if
	else
		update candidateWorkPreference set 
				 isDeleted=1
				,updatedBy=created_By
				,updatedOn=utc_timestamp()
		where candidateWorkPreferenceId=candidateWork_PreferenceId
		if row_count()>0 then
			select candidateWork_PreferenceId
		end if
	end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateClaimSet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateClaimSet`(
 IN claimSet_Id bigint
,IN Site_Id bigint
,IN claimSet_Name nvarchar(200)
,IN RoleCategory_Id tinyint
,IN created_By bigint(20) 

)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Role for Business and HR agency
*/

 

		if (claimSet_Id = 0) then
			insert into scClaimSet (claimSetName, RoleCategoryId, isSystemClaim ,isDeleted  ,createdBy ,createdOn)
			values (claimSet_Name, RoleCategory_Id, 0, 0, created_By, utc_timestamp())
            
            set claimSet_Id =  LAST_INSERT_ID()
            
            IF ROW_COUNT() > 0 THEN
				if (RoleCategory_Id = 3) then
					insert into businessSiteClaimSet(claimSetId, businessSiteId,createdBy, createdOn)
					values (claimSet_Id,Site_Id,created_By,utc_timestamp() )
                end if
                if (RoleCategory_Id = 4) then
					insert into agencySiteClaimSet(claimSetId, agencySiteId,createdBy, createdOn)
					values (claimSet_Id,Site_Id,created_By,utc_timestamp() )
                end if
                select claimSet_Id
            END IF
            
		else
			update scClaimSet set    
								 claimSetName = claimSet_Name
								,updatedBy = created_By
								,updatedOn = utc_timestamp() where claimSetId = claimSet_Id
                                
			IF ROW_COUNT() > 0 THEN
				select claimSet_Id
            end if
		end if




END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateDeleteBusinessAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateDeleteBusinessAllowance`(
 IN allowance_Id bigint(20)  
,IN allowance_Name nvarchar(200) 
,IN business_Id bigint(20) 
,IN created_By bigint(20)
,IN is_Deleted bit
)
BEGIN



/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Delete Allowance for business
 call InsertUpdateDeleteBusinessAllowance( 1,"Allowance 1",1,1,0)
*/

	if (is_Deleted = 0) then
		if (allowance_Id = 0) then
			insert into businessAllowance ( allowanceName, businessId, createdBy, createdOn, isDeleted)
			values ( allowance_Name, business_Id, created_By, utc_timestamp(), is_Deleted)
			
			if ROW_COUNT() > 0 then
				set allowance_Id =  LAST_INSERT_ID()
                select allowance_Id
			end if
		else
			update businessAllowance set allowanceName = allowance_Name
			,updatedBy = created_By
			,updatedOn = utc_timestamp()
			where allowanceId = allowance_Id
			
			if ROW_COUNT() > 0 then
				select allowance_Id
			end if
		end if
	else
		update businessAllowance set isDeleted = 1 where allowanceId = allowance_Id
		
		if ROW_COUNT() > 0 then
				select allowance_Id
			end if
	end if



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateDeleteBusinessJobProfileAgreement` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateDeleteBusinessJobProfileAgreement`(

IN businessjobProfileAgmnt_Id bigint(20),
IN Agreement_description varchar(500), 
IN created_By bigint(20), 
IN is_Deleted bit(1),
IN business_Id bigint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Delete Job profile aggrement for business
 call InsertUpdateDeleteBusinessJobProfileAgreement(1,"Test 1", null, null ,null, null,null, null, 0,1)
*/

	if (is_Deleted = 0) THEN
		if (businessjobProfileAgmnt_Id = 0) then
			insert into businessJobProfileAgreement (businessjobProfileAgmntId, description, createdBy ,createdOn ,isDeleted, businessId )
            values(businessjobProfileAgmnt_Id, Agreement_description, created_By ,utc_timestamp() ,is_Deleted , business_Id)
            
            if ROW_COUNT() > 0 then
				set businessjobProfileAgmnt_Id =  LAST_INSERT_ID()
                select businessjobProfileAgmnt_Id
			end if
		else
			update businessJobProfileAgreement set 
								
								description = Agreement_description,
                                updatedBy =  created_By,
                                updatedOn = utc_timestamp()
                                where businessjobProfileAgmntId = businessjobProfileAgmnt_Id
			if ROW_COUNT() > 0 then
                select businessjobProfileAgmnt_Id
			end if
		end if
    else
		update businessJobProfileAgreement set  isDeleted =1 where businessjobProfileAgmntId = businessjobProfileAgmnt_Id
        
        if ROW_COUNT() > 0 then
			select businessjobProfileAgmnt_Id
		end if
    end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestAllowanceOncost` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestAllowanceOncost`(
	IN	hireRequestAllowance_Id	bigint(20)
,	IN	jobProfileHireRequest_Id	bigint(20)
,	IN	allowance_Id	bigint(20)
,	IN	agencySite_Id	bigint(20)
,	IN	allowanceOn_Cost	decimal(18,2)
,	IN	allowOnCostCurrency_Id	int(11)
,	IN	created_By	bigint(20)
,	IN	is_Deleted	bit(1)
)
BEGIN
/*
 Author: James
 Date  : 20/02/2015
 Description :  insert update hire Request Allowance oncost

call est_skillsconnect.InsertUpdateHireRequestAllowanceOncost(0, 2, 1, Null, 10, 1, 1, 0)

*/

if is_Deleted=0 then
	if hireRequestAllowance_Id=0 then
		insert into hireRequestAllowanceOncost (
						jobProfileHireRequestId
					,	allowanceId
					,	agencySiteId
					,	allowanceOnCost
					,	allowOnCostCurrencyId
					,	createdBy
					,	createdOn
					,	isDeleted )
			values (	jobProfileHireRequest_Id
					,	allowance_Id
					,	agencySite_Id
					,	allowanceOn_Cost
					,	allowOnCostCurrency_Id
					,	created_By
					, 	utc_timestamp()
                    ,	0)
                    
			IF ROW_COUNT() > 0 THEN
				set hireRequestAllowance_Id=LAST_INSERT_ID()                 
				select hireRequestAllowance_Id 
            end if
    else
		update hireRequestAllowanceOncost set 
			-- 	jobProfileHireRequestId	=	jobProfileHireRequest_Id
			 	allowanceId	=	allowance_Id
			-- ,	agencySiteId	=	agencySite_Id
			,	allowanceOnCost	=	allowanceOn_Cost
			,	allowOnCostCurrencyId	=	allowOnCostCurrency_Id
			,	updatedBy	=	created_By
			,	updatedOn	=	utc_timestamp()
			,	isDeleted	=	0
		where 	hireRequestAllowanceId	=	hireRequestAllowance_Id 
        
		IF ROW_COUNT() > 0 THEN                  
				select hireRequestAllowance_Id 
            end if    
    end if
else

		update hireRequestAllowanceOncost set 
				updatedBy	=	created_By
			,	updatedOn	=	utc_timestamp()
			,	isDeleted	=	1
		where 	hireRequestAllowanceId	=	hireRequestAllowance_Id 
        
		IF ROW_COUNT() > 0 THEN                  
				select hireRequestAllowance_Id 
            end if 
end if



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestCandidate`( 

IN jobProfileHireRequest_Id bigint(20) ,
IN candidateUserIds nvarchar(4000) ,
IN created_By bigint(20) ,
IN candidateHR_Status tinyint,
IN language_Id bigint
)
BEGIN
/*
 Author			: Tijo
 Date  			: 21/02/2015
 Description 	:  Mapping candidate to hire request
*/

declare StatusValue int
declare candidateUser_Id bigint
set StatusValue = 0

/*
if exists (select 1
	from jobProfileHireRequest jphr
	inner join hireRequestDetail hrd on jphr.jobProfileHireRequestId = hrd.jobProfileHireRequestId
	inner join businessSite bs on bs.businessSiteId = hrd.businessSiteId
	inner join timeZone tz on bs.timeZoneId = tz.timeZoneId
	where jphr.jobProfileHireRequestId = jobProfileHireRequest_Id and
	case when isCsvUpload =0 then 
		DATEDIFF(DATE_ADD(utc_timestamp(),INTERVAL coalesce(  tz.timeDiffInMinutes ,0) minute), empStartDate ) <=0
    else 1=1 end
	  -- and 
    ) then

*/


	
    
	
	DROP TABLE IF EXISTS tmpSelectCandSplit
    CREATE TEMPORARY TABLE tmpSelectCandSplit ( id bigint PRIMARY KEY auto_increment,candidate_Id bigint)

	SET @vars := candidateUserIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSelectCandSplit (candidate_Id) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
	-- if (candidateHR_Status=1) then
		insert into hireRequestCandidate (jobProfileHireRequestId,candidateUserId,createdBy,createdOn,isDeleted,candidateHRStatus,isCandidateNotified)
		select distinct jobProfileHireRequest_Id,candidate_Id,created_By,utc_timestamp(),0,candidateHR_Status,0
		from tmpSelectCandSplit 
        where candidate_Id not in (select candidateUserId from hireRequestCandidate where jobProfileHireRequestId =jobProfileHireRequest_Id and isDeleted=0)
        
        if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if
        
        update hireRequestCandidate 
        set candidateHRStatus =candidateHR_Status, 
        updatedBy = created_By,
		updatedOn = utc_timestamp() ,
        isCandidateNotified=0
        where jobProfileHireRequestId = jobProfileHireRequest_Id and candidateUserId in (select candidate_Id from tmpSelectCandSplit)
		
		if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if

		if 	 StatusValue = 1 then
				if candidateHR_Status in (4,5,8,9) then
						update jobProfileHireRequest set 
							isNotified=0,
							updatedOn = utc_timestamp() 
						where jobProfileHireRequestId = jobProfileHireRequest_Id 
				end if
		end if
        
    DROP TABLE IF EXISTS tmpSelectCandSplit
     
    
    select   StatusValue, businessName, emailId, jphr.createdby,jpl.jobSubClassification
	from jobProfileHireRequest jphr 
	inner join jobProfile jp on jphr.jobProfileId=jp.jobProfileId
	inner join jobSubClassificationLocale jpl on jp.jobSubClassificationId=jpl.jobSubClassificationId and languageId=language_Id 
	inner join business b on b.businessId = jphr.businessId
	inner join scUser sc on jphr.createdby = sc.userId
	where jphr.jobProfileHireRequestId=jobProfileHireRequest_Id 


/*

else
	set StatusValue = 2
	select StatusValue , " " as businessName, " " as emailId, null as createdby 

end if

*/


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestCandidateAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestCandidateAllowance`(
 in jobProfile_HireRequestId  bigint(20)
,in candidate_UserId  bigint(20)
,in allowance_Id varchar(5000)
,in agreed_Hours int
,in created_By bigint(20)	
)
BEGIN
/*
 Author: James
 Date  : 16/05/2016
 Description : insert update Candidate Allowance 
*/

Declare hireRequest_CandidateId bigint(20) 
declare statusValue bit(1) 
set statusValue=0

set hireRequest_CandidateId =(
	select hireRequestCandidateId from hireRequestCandidate
	where jobProfileHireRequestId=jobProfile_HireRequestId and candidateUserId=	candidate_UserId  and isDeleted=0
	order by hireRequestCandidateId desc limit 1)
    
SET SQL_SAFE_UPDATES = 0
     
     
		update  hireRequestCandidate set 
			agreedHours=agreed_Hours
			,updatedBy=created_By
			,updatedOn=utc_timestamp()
		where hireRequestCandidateId=hireRequest_CandidateId
			if row_count()>0 then
				set statusValue=1
            end if
    
		update hireRequestCandidateAllowance set
			 isDeleted=1
			,updatedBy=created_By 
			,updatedOn=utc_timestamp()
		where hireRequestCandidateId=hireRequest_CandidateId  
			if row_count()>0 then
				set statusValue=1
            end if
       
		update hireRequestCandidateAllowance ca 
			set ca.isDeleted=0
		where  ca.hireRequestCandidateId=hireRequest_CandidateId 
        and find_in_set(ca.allowanceId,allowance_Id)

		insert into hireRequestCandidateAllowance(
			  hireRequestCandidateId
			 ,allowanceId
			 ,createdBy
			 ,createdOn
			 ,isDeleted) 
		select hireRequest_CandidateId
			 ,al.allowanceId
			 ,created_By
			 ,utc_timestamp()
			 ,0 
		from allowance al 
		left join hireRequestCandidateAllowance ca on al.allowanceId=ca.allowanceId and ca.hireRequestCandidateId=hireRequest_CandidateId
		where find_in_set(al.allowanceId,allowance_Id) and ca.hireRequestCandidateId is null
			if row_count()>0 then
				set statusValue=1
            end if
		 
	SET SQL_SAFE_UPDATES = 1

	select statusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestCandidatePayment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestCandidatePayment`(
IN jobProfileHireRequest_Id bigint(20) ,
IN candidateUserIds nvarchar(4000) ,
IN created_By bigint(20) ,

IN	currency_Id	int(11) ,
IN	amount	decimal(18,2),
IN	transaction_No	varchar(50),
IN paid_Status bit
)
BEGIN


	declare StatusValue bit
	declare candidateUser_Id bigint
    
	set StatusValue = 0
	DROP TABLE IF EXISTS tmpSelectCandSplit
    CREATE TEMPORARY TABLE tmpSelectCandSplit ( id bigint PRIMARY KEY auto_increment,candidate_Id bigint)

	SET @vars := candidateUserIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSelectCandSplit (candidate_Id) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
		insert into hireRequestCandidate (jobProfileHireRequestId,candidateUserId,createdBy,createdOn,isDeleted,paidStatus)
		select distinct jobProfileHireRequest_Id,candidate_Id,created_By,utc_timestamp(),0,paid_Status
		from tmpSelectCandSplit 
        where candidate_Id not in (select candidateUserId from hireRequestCandidate where jobProfileHireRequestId =jobProfileHireRequest_Id and isDeleted=0)
        
        if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if

        update hireRequestCandidate 
        set paidStatus =paid_Status, 
        updatedBy = created_By,
		updatedOn = utc_timestamp()
        where jobProfileHireRequestId = jobProfileHireRequest_Id and candidateUserId in (select candidate_Id from tmpSelectCandSplit)
		
		if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if

if amount>0 then 
	insert into payment (	jobProfileHireRequestId
						,	currencyId
						,	amount
						,	transactionNo
						,	paidStatus
						,	createdBy
						,	createdOn )
				values ( jobProfileHireRequest_Id
						,currency_Id
                        ,amount
                        ,transaction_No
						,paid_Status
                        ,created_By
                        ,utc_timestamp())
		if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if
end if 


    DROP TABLE IF EXISTS tmpSelectCandSplit
select StatusValue 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestCandidateTemp` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestCandidateTemp`( 

IN jobProfileHireRequest_Id bigint(20) ,
IN candidateUserIds nvarchar(4000) ,
IN created_By bigint(20) ,
IN candidateHR_Status tinyint
)
BEGIN
/*
 Author			: Tijo
 Date  			: 21/02/2015
 Description 	:  
*/

	declare StatusValue bit
	declare candidateUser_Id bigint
    
	set StatusValue = 0
	DROP TABLE IF EXISTS tmpSelectCandSplit
    CREATE TEMPORARY TABLE tmpSelectCandSplit ( id bigint PRIMARY KEY auto_increment,candidate_Id bigint)

	SET @vars := candidateUserIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSelectCandSplit (candidate_Id) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
	
		-- insert into hireRequestCandidate (jobProfileHireRequestId,candidateUserId,createdBy,createdOn,isDeleted,candidateHRStatus)
		select distinct jobProfileHireRequest_Id,candidate_Id,created_By,utc_timestamp(),0,candidateHR_Status
		from tmpSelectCandSplit 
        where candidate_Id not in (select candidateUserId from hireRequestCandidate where jobProfileHireRequestId =jobProfileHireRequest_Id and isDeleted=0)
        
        if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if
        
        -- update hireRequestCandidate 
        -- set candidateHRStatus =candidateHR_Status, 
        -- updatedBy = created_By,
		-- updatedOn = utc_timestamp()
        -- where jobProfileHireRequestId = jobProfileHireRequest_Id and candidateUserId in (select candidate_Id from tmpSelectCandSplit)
		
		-- if ROW_COUNT() > 0 then	
		-- 	set StatusValue = 1
		-- end if

    DROP TABLE IF EXISTS tmpSelectCandSplit
    select StatusValue



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestEmpCount` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestEmpCount`(
	IN	estimatedStaff_Id	bigint(20)
,	IN	jobProfileHireRequest_Id	bigint(20)
,	IN	estimated_Staff	int(11)
,	IN	estimatedStaff_Comments	varchar(2000)
,	IN	created_By	bigint(20)
,	IN	is_Deleted	bit(1)
)
BEGIN

/*
 Author: James
 Date  : 20/02/2015
 Description :  Insert update estimated staff 
 call est_skillsconnect.InsertUpdateHireRequestEmpCount(0, 3, 10, 'Hiring', 1, 0)

*/

If is_Deleted=0 then
	if estimatedStaff_Id=0 then 
			insert into hireRequestEstimatedStaff (
						jobProfileHireRequestId
					,	estimatedStaff
					,	estimatedStaffComments
					,	createdBy
					,	createdOn
					,	isDeleted )
			values (	jobProfileHireRequest_Id
					,	estimated_Staff
					,	estimatedStaff_Comments
					,	created_By
                    , 	utc_timestamp()
                    ,	0 )
            IF ROW_COUNT() > 0 THEN
				set estimatedStaff_Id=LAST_INSERT_ID()                 
				select estimatedStaff_Id 
            end if
    else
			update hireRequestEstimatedStaff set 
				-- 	jobProfileHireRequestId	=	jobProfileHireRequest_Id
					estimatedStaff	=	estimated_Staff
				,	estimatedStaffComments	=	estimatedStaff_Comments
				,	updatedBy	=	created_By
				,	updatedOn	=	utc_timestamp()
				,	isDeleted	=	0
			where 	estimatedStaffId	=	estimatedStaff_Id 

		IF ROW_COUNT() > 0 THEN
			select estimatedStaff_Id 
        end if
    
    end if
else
		update hireRequestEstimatedStaff set 
				updatedBy	=	created_By
			,	updatedOn	=	utc_timestamp()
			,	isDeleted	=	1
		where 	estimatedStaffId	=	estimatedStaff_Id 

		IF ROW_COUNT() > 0 THEN
			select estimatedStaff_Id 
        end if 
end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestShift` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestShift`(

IN hireRequestShift_Id bigint(20) ,
IN jobProfileOrder_Id bigint(20) ,
IN jobProfileHireRequest_Id bigint(20) ,
IN shift_Name varchar(100) ,
IN created_By bigint(20) ,
IN is_Deleted bit(1) ,
IN isFixed_Shift bit(1),
IN weekDay_Ids nvarchar(200), 
IN shiftStart_Time time, 
IN shiftEnd_Time time,
IN hireRequestShiftDay_Id bigint(20) 
)
BEGIN

/*
 Author: Tijo
 Date  : 20/02/2015
 Description : Insert update hire request shift
*/

	declare StatusValue bit
	declare candidateUser_Id bigint
    declare shift_Duration time
	set StatusValue = 0
    
    set shift_Duration=(select case when shiftStart_Time>shiftEnd_Time then timediff(concat('2016-01-02',' ',shiftEnd_Time),concat('2016-01-01',' ',shiftStart_Time)) else timediff(shiftEnd_Time,shiftStart_Time) end)
    
	if (isFixed_Shift =1) then
		
        if (is_Deleted = 0) then
			DROP TABLE IF EXISTS tmpHireReqShiftSplit
			CREATE TEMPORARY TABLE tmpHireReqShiftSplit ( id bigint PRIMARY KEY auto_increment,day_Id bigint)

			SET @vars := weekDay_Ids
			SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
			
			SET @sql := CONCAT('INSERT INTO tmpHireReqShiftSplit (day_Id) ', ' VALUES ', @vars)
			PREPARE stmt FROM @sql
			EXECUTE stmt
			DEALLOCATE PREPARE stmt
			
			if (hireRequestShift_Id = 0) THEN
				 INSERT INTO  hireRequestShift (jobProfileOrderId ,jobProfileHireRequestId ,shiftName ,createdBy ,createdOn ,isDeleted )
				 VALUES(jobProfileOrder_Id ,jobProfileHireRequest_Id ,shift_Name ,created_By ,utc_timestamp() ,is_Deleted  )
				 
				 if ROW_COUNT() > 0 then		
					set hireRequestShift_Id=LAST_INSERT_ID() 
					set StatusValue = 1
					
					insert into hireRequestShiftDays (hireRequestShiftId ,weekDayId ,shiftStartTime ,shiftEndTime ,createdBy ,createdOn ,isDeleted,shiftDuration)
					select hireRequestShift_Id,day_Id,shiftStart_Time,shiftEnd_Time,created_By,utc_timestamp(),0,shift_Duration
					from tmpHireReqShiftSplit 
					
			 end if
			else
				UPDATE  hireRequestShift SET
							 shiftName  =  shift_Name ,
							 updatedBy  =  created_By ,
							 updatedOn  =  utc_timestamp() ,
							 isDeleted  =  is_Deleted 
							WHERE  hireRequestShiftId  = hireRequestShift_Id 
				
				if ROW_COUNT() > 0 then
					set StatusValue = 1
					update hireRequestShiftDays set isDeleted =1 where hireRequestShiftId = hireRequestShift_Id
			
					update hireRequestShiftDays set 
							shiftStartTime =shiftStart_Time
							,shiftEndTime = shiftEnd_Time
                            ,shiftDuration = shift_Duration
							, isDeleted =0 
					where hireRequestShiftId = hireRequestShift_Id and weekDayId in (select day_Id from tmpHireReqShiftSplit)
			
					insert into hireRequestShiftDays (hireRequestShiftId ,weekDayId ,shiftStartTime ,shiftEndTime ,createdBy ,createdOn ,isDeleted,shiftDuration)
					select hireRequestShift_Id,day_Id,shiftStart_Time,shiftEnd_Time,created_By,utc_timestamp(),0,shift_Duration
					from tmpHireReqShiftSplit
					where day_Id not in (select weekDayId from hireRequestShiftDays where hireRequestShiftId = hireRequestShift_Id )
					
				end if
				
			end if
			
			DROP TABLE IF EXISTS tmpHireReqShiftSplit
        else
			UPDATE  hireRequestShift SET
							 updatedBy  =  created_By ,
							 updatedOn  =  utc_timestamp() ,
							 isDeleted  =  is_Deleted 
							WHERE  hireRequestShiftId  = hireRequestShift_Id 
			if ROW_COUNT() > 0 then
				set StatusValue = 1
				update hireRequestShiftDays set  
								 updatedBy  =  created_By ,
								 updatedOn  =  utc_timestamp() ,
								 isDeleted  =  is_Deleted 
								WHERE  hireRequestShiftId = hireRequestShift_Id
			end if
        end if
	else -- isFixed_Shift =0
		if (is_Deleted = 0) then
			if (hireRequestShift_Id=0) THEN
				INSERT INTO  hireRequestShift (jobProfileOrderId ,jobProfileHireRequestId ,shiftName ,createdBy ,createdOn ,isDeleted )
				VALUES(jobProfileOrder_Id ,jobProfileHireRequest_Id ,shift_Name ,created_By ,utc_timestamp() ,is_Deleted  )
                
                if ROW_COUNT() > 0 then
					set hireRequestShift_Id=LAST_INSERT_ID() 
					set StatusValue = 1
					INSERT INTO  hireRequestShiftDays ( hireRequestShiftId ,weekDayId ,shiftStartTime ,shiftEndTime ,createdBy ,createdOn ,isDeleted,shiftDuration )
					VALUES( hireRequestShift_Id ,weekDay_Ids ,shiftStart_Time ,shiftEnd_Time ,created_By ,utc_timestamp() ,is_Deleted,shift_Duration )
                end if
			else
				
                UPDATE  hireRequestShift SET
							 shiftName  =  shift_Name ,
							 updatedBy  =  created_By ,
							 updatedOn  =  utc_timestamp() ,
							 isDeleted  =  is_Deleted 
							WHERE  hireRequestShiftId = hireRequestShift_Id 
                            
				if ROW_COUNT() > 0 then
					set StatusValue = 1
                    
					if (hireRequestShiftDay_Id =0) then
						INSERT INTO  hireRequestShiftDays ( hireRequestShiftId ,weekDayId ,shiftStartTime ,shiftEndTime ,createdBy ,createdOn ,isDeleted,shiftDuration )
						VALUES( hireRequestShift_Id ,weekDay_Ids ,shiftStart_Time ,shiftEnd_Time ,created_By ,utc_timestamp() ,is_Deleted,shift_Duration )	
					else
						update hireRequestShiftDays set 
							shiftStartTime =shiftStart_Time
							,shiftEndTime = shiftEnd_Time
                            ,shiftDuration=shift_Duration
							, isDeleted =0 
							where hireRequestShiftDayId = hireRequestShiftDay_Id 
                    end if
				end if
				
			end if
		ELSE
			UPDATE  hireRequestShift SET
							 updatedBy  =  created_By ,
							 updatedOn  =  utc_timestamp() ,
							 isDeleted  =  is_Deleted 
							WHERE  hireRequestShiftId  = hireRequestShift_Id 
			if ROW_COUNT() > 0 then
				set StatusValue = 1
				update hireRequestShiftDays set  
								 updatedBy  =  created_By ,
								 updatedOn  =  utc_timestamp() ,
								 isDeleted  =  is_Deleted 
								WHERE  hireRequestShiftId = hireRequestShift_Id
			end if
        end if
	end if
    
	select StatusValue
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestWageOnCost` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestWageOnCost`(

IN hireRequestWageOnCost_Id bigint(20)  ,
IN jobProfileHireRequest_Id bigint(20) ,
IN agencySite_Id bigint(20) ,
IN wageOn_Cost decimal(18,2) ,
IN wageOnCost_CurrencyId int(11) ,
IN created_By bigint(20) ,
IN is_Deleted bit(1)

)
BEGIN

/*
 Author: Tijo
 Date  : 20/02/2015
 Description : Insert update hire request wage on cost
*/

declare StatusValue bit
set StatusValue =0

if (is_Deleted =0) THEN
	if (hireRequestWageOnCost_Id = 0) then
		INSERT INTO    hireRequestWageOnCost 
		(  jobProfileHireRequestId ,agencySiteId ,wageOnCost ,wageOnCostCurrencyId ,createdBy ,createdOn ,isDeleted )
		VALUES
		(  jobProfileHireRequest_Id ,agencySite_Id ,wageOn_Cost ,wageOnCost_CurrencyId ,created_By ,utc_timestamp() ,is_Deleted)
	
		IF ROW_COUNT() > 0 THEN
			set StatusValue =1
            select StatusValue
		end if
    ELSE
		UPDATE   hireRequestWageOnCost SET
						 wageOnCost  =  wageOn_Cost ,
						 wageOnCostCurrencyId  =  wageOnCost_CurrencyId ,
						 updatedBy  =  created_By ,
						 updatedOn  =  utc_timestamp() ,
						 isDeleted  =  is_Deleted 
		WHERE  hireRequestWageOnCostId  =  hireRequestWageOnCost_Id
		
        IF ROW_COUNT() > 0 THEN
			set StatusValue =1
            select StatusValue
		end if
    end if
end if






END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHireRequestWfInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHireRequestWfInstance`(
	IN	hireRequestWfInstance_Id	bigint(20)
,	IN	workflowInstance_Id	bigint(20)
,	IN	businessSite_Id	bigint(20)
,	IN	jobProfileHireRequest_Id	bigint(20)
,	IN	created_By	bigint(20) 
)
BEGIN
	/*
	 Author: James
	 Date  : 25/02/2015
	 Description : insert update Hire Request workflow instance 
     call est_skillsconnect.InsertUpdateHireRequestWfInstance(0, 1, 1, 2, 3)

	*/


	if hireRequestWfInstance_Id=0 then
		insert into hireRequestWfInstance (
				workflowInstanceId
			,	businessSiteId
			,	jobProfileHireRequestId
			,	createdBy
			,	createdOn )
		values (workflowInstance_Id
			,	businessSite_Id
			,	jobProfileHireRequest_Id
			,	created_By
			,	utc_timestamp() )
			
		if row_count()>0 then
			set hireRequestWfInstance_Id=last_insert_id() 		
			select hireRequestWfInstance_Id 
		end if

	else
		update hireRequestWfInstance set 
				workflowInstanceId	=	workflowInstance_Id
			,	businessSiteId	=	businessSite_Id
			,	jobProfileHireRequestId	=	jobProfileHireRequest_Id
		where 	hireRequestWfInstanceId	=	hireRequestWfInstance_Id 
		if row_count()>0 then 	
			select hireRequestWfInstance_Id 
		end if

	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateHRCandidateBusinessApproval` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateHRCandidateBusinessApproval`(

IN jobProfileHireRequest_Id bigint(20) ,
IN candidateUserIds nvarchar(4000) ,
IN created_By bigint(20) ,
IN sendBA bit

)
BEGIN

/*
 Author			: Tijo
 Date  			: 21/02/2015
 Description 	: Hire request candidate business approval
*/


	declare StatusValue bit
	declare candidateUser_Id bigint
    
	set StatusValue = 0
	DROP TABLE IF EXISTS tmpSelectCandSplitBA
    CREATE TEMPORARY TABLE tmpSelectCandSplitBA ( id bigint PRIMARY KEY auto_increment,candidate_Id bigint)

	SET @vars := candidateUserIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSelectCandSplitBA (candidate_Id) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    

		update hireRequestCandidate 
        set sendToBA =sendBA, 
        updatedBy = created_By,
		updatedOn = utc_timestamp()
        where jobProfileHireRequestId = jobProfileHireRequest_Id and candidateUserId in (select candidate_Id from tmpSelectCandSplitBA)
		
        if ROW_COUNT() > 0 then	
			set StatusValue = 1
			select StatusValue
		end if


    DROP TABLE IF EXISTS tmpSelectCandSplitBA
	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateJobProfile` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateJobProfile`(
IN jobProfile_Id bigint,
IN businessSite_Ids varchar(10000),
IN jobProfile_Name varchar(500),
IN jobClassification_Id int,
IN jobSubClassification_Id int,
IN job_Title varchar(100),
IN business_Id bigint,
IN department_Id bigint,
IN employmentType_Id smallint, 
IN grade_Id bigint,
IN license_Id bigint,
IN need_Medical bit,
IN additional_Requirement longtext,
IN exp_Min int,
IN exp_Max int,
IN exp_Description longtext,
IN k_p_i longtext,
IN wageType_Id tinyint,
IN parentJobProfile_Id bigint,
IN referralJobProfile_Id bigint,
IN is_Deleted bit,
IN is_Provisional bit,
IN active_Date date ,
IN expiry_Date date ,
IN creation_type tinyint,
IN created_By bigint,
IN wagePer_Id smallint, 
IN wageCurrency_Id int,  
IN wage_Min decimal(14,4), 
IN wage_Max decimal(14,4),
IN expMin_Id smallint,
IN expMax_Id smallint,
IN businessjobProfileAgmnt_Id bigint,
IN job_profile_Status tinyint,
in award_Id int,
in gradeLevel_Id int,
in is_Demo bit(1)
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Job profile creation
 creation_type: 3 -revision 2 -variation  1 -update 0 - insert
 call est_skillsconnect.InsertUpdateJobProfile(0, '69,70,71,72,73', 'New Job Profile', 1, 1, 'Job title', 1, 1, 1, 1, 1, 1, 'Additional Requirement', 12, 24, 'Description', 'KPI', 1, 1, 0, null, 0, 1, 'null', 'null', 1, 1, 1, 1, 1, 12, 12, 12, 12, 1,null)

 
*/
declare jobProfile_No nvarchar(20)
declare workflow_Id tinyint
declare revision_No int
declare jobProfile_BusinessSiteId varchar(500)

set workflow_Id = (select workflowId from business where businessId = business_Id)
	
		if (jobProfile_Id = 0) then
			if (creation_type in(0,1,2)) then
				set revision_No = 0
                set jobProfile_No = concat("PRO " , (select count(distinct jobProfileNo) from jobProfile where businessId = business_Id) + 1)
             end if
			if (creation_type = 3) then
			-- 	set revision_No = coalesce((select count(1) from jobProfile where parentJobProfileId = parentJobProfile_Id),0) + 1
				set revision_No=coalesce((select max(revisionNo) from jobProfile where JobProfileId = referralJobProfile_Id),0) + 1
				set jobProfile_No = (select jobProfileNo from jobProfile where JobProfileId = referralJobProfile_Id) 
            end if

            
			INSERT INTO  jobProfile ( jobProfileName ,jobClassificationId ,jobSubClassificationId ,jobTitle ,businessId ,departmentId ,employmentTypeId ,gradeId ,
			licenseId ,needMedical ,additionalRequirement ,expMin ,expMax ,expDescription ,kpi ,wageTypeId ,parentJobProfileId ,revisionNo ,referralJobProfileId ,
			isDeleted ,isProvisional ,activeDate ,expiryDate ,workflowId, createdBy, createdOn, wagePerId, wageCurrencyId, wageMin, wageMax, expMinId, expMaxId, businessjobProfileAgmntId, jobProfileNo,awardId,gradeLevelId,isDemo)
			VALUES ( jobProfile_Name ,jobClassification_Id ,jobSubClassification_Id ,job_Title ,business_Id ,department_Id ,employmentType_Id ,grade_Id ,
			license_Id ,need_Medical ,additional_Requirement ,exp_Min ,exp_Max ,exp_Description ,k_p_i ,wageType_Id ,parentJobProfile_Id ,revision_No ,
			referralJobProfile_Id ,is_Deleted ,is_Provisional ,active_Date ,expiry_Date ,workflow_Id, created_By , utc_timestamp() , wagePer_Id, wageCurrency_Id, wage_Min, wage_Max, expMin_Id, expMax_Id, businessjobProfileAgmnt_Id,jobProfile_No,award_Id,gradeLevel_Id,is_Demo)
 
			if ROW_COUNT() > 0 then
				set jobProfile_Id =  LAST_INSERT_ID()
                call InsertUpdateBusinessSiteJobProfile ( JobProfile_Id ,  businessSite_Ids ,  created_By , referralJobProfile_Id , creation_type , job_profile_Status)
                
				set jobProfile_BusinessSiteId=(select group_concat(jobProfileBusinessSiteId)as jobProfileBusinessSiteId from jobProfile jp 
												inner join jobProfileBusinessSite jpbs on jp.jobProfileId=jpbs.jobProfileId and jpbs.isDeleted=0
												where jp.jobProfileId=jobProfile_Id) 
                select jobProfile_Id, jobProfile_No, revision_No, jobProfile_BusinessSiteId
			end if

		else
			update jobProfile set   jobProfileName = jobProfile_Name
									,jobClassificationId = jobClassification_Id
									,jobSubClassificationId = jobSubClassification_Id
									,jobTitle = job_Title
									,departmentId = department_Id
									,employmentTypeId = employmentType_Id
									,gradeId = grade_Id
									,licenseId = license_Id
									,needMedical = need_Medical
									,additionalRequirement = additional_Requirement
									,expMin = exp_Min
									,expMax  = exp_Max
									,expDescription = exp_Description
									,kpi = k_p_i
									,parentJobProfileId = parentJobProfile_Id
									,referralJobProfileId  = referralJobProfile_Id
									,isProvisional = is_Provisional
									,activeDate  = active_Date
									,expiryDate  = expiry_Date
									,workflowId = workflow_Id
									,updatedBy = created_By
									,updatedOn  = utc_timestamp()
									,wageTypeId = wageType_Id
									,wagePerId  = wagePer_Id
									,wageCurrencyId = wageCurrency_Id
									,wageMin = wage_Min
									,wageMax = wage_Max
                                    ,expMinId = expMin_Id
                                    ,expMaxId = expMax_Id
                                    ,businessjobProfileAgmntId = businessjobProfileAgmnt_Id
                                    ,awardId = award_Id
									,gradeLevelId = gradeLevel_Id
                                    ,isDemo=is_Demo
									where jobProfileId = jobProfile_Id

			if ROW_COUNT() > 0 then
				if (businessSite_Ids is not null) then
					call InsertUpdateBusinessSiteJobProfile ( JobProfile_Id ,  businessSite_Ids ,  created_By , referralJobProfile_Id , creation_type, job_profile_Status )
					
                    set jobProfile_BusinessSiteId=(select group_concat(jobProfileBusinessSiteId)as jobProfileBusinessSiteId from jobProfile jp 
												inner join jobProfileBusinessSite jpbs on jp.jobProfileId=jpbs.jobProfileId and jpbs.isDeleted=0
												where jp.jobProfileId=jobProfile_Id) 
                    select jobProfile_Id, (select jobProfileNo from jobProfile where jobProfileId = jobProfile_Id) as jobProfile_No,  (select revisionNo from jobProfile where jobProfileId = jobProfile_Id) as revision_No,jobProfile_BusinessSiteId
				end if
			end if
		end if
  
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateJobProfileAllowance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateJobProfileAllowance`(
   IN	jobProfileAllowance_Id	bigint(20)
  ,IN	jobProfile_Id	bigint(20)
  ,IN	allowance_Id	bigint(20)
  ,IN	allowance_Amt	decimal(14,4)
  ,IN	allowanceCurrency_Id	int(11)
  ,IN	allowancePaidType_Id	smallint(6)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)
)
BEGIN
/*
 Author: James
 Date  : 22/12/2014
 Description : insert update job profile allowance
*/

	if (is_Deleted=0) then
			if(jobProfileAllowance_Id=0) then
					insert into jobProfileAllowance (
									jobProfileId
								,	allowanceId
								,	allowanceAmt
								,	allowanceCurrencyId
								,	allowancePaidTypeId
								,	createdBy
								,	createdOn )
                         values (	jobProfile_Id
								,	allowance_Id
								,	allowance_Amt
								,	allowanceCurrency_Id
								,	allowancePaidType_Id
								,	created_By
								,	utc_timestamp())
						
					IF ROW_COUNT() > 0 THEN
							select last_insert_id() as StatusValue 
					end if                 
            else
					update jobProfileAllowance set 
							jobProfileId	=	jobProfile_Id
						,	allowanceId	=	allowance_Id
						,	allowanceAmt	=	allowance_Amt
						,	allowanceCurrencyId	=	allowanceCurrency_Id
						,	allowancePaidTypeId	=	allowancePaidType_Id
						,	updatedBy	=	created_By
						,	updatedOn	=	utc_timestamp()
					where jobProfileAllowanceId	=	jobProfileAllowance_Id
					
                    IF ROW_COUNT() > 0 THEN
							select jobProfileAllowance_Id as StatusValue 
					end if                 
            end if
    else
			delete from jobProfileAllowance where jobProfileAllowanceId	=	jobProfileAllowance_Id

			IF ROW_COUNT() > 0 THEN
					select jobProfileAllowance_Id as StatusValue 
			end if 
    end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateJobProfileAttachment` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateJobProfileAttachment`(
   IN	jobProfileAttachment_Id	bigint(20)
 , IN	jobProfile_Id	bigint(20)
 , IN	documentType_Id	smallint(6)
 , IN	file_Name	varchar(1000)
 , IN	fileMime_Type	varchar(10)
 , IN	file_ETag	varchar(1000)
 , IN	file_Url	varchar(1000)
 , IN	created_By	bigint(20) 
 , IN	file_Status	tinyint(4)
 , IN	is_Deleted	bit(1)

)
BEGIN

/*
 Author: James
 Date  : 17/12/2014
 Description : Inserting and Updating jobProfileAttachment
 FileStatus : 0 - inprogress 1-completed 2-corrupted
*/
		
        if (is_Deleted=0) then
				if(jobProfileAttachment_Id=0) then
						insert into jobProfileAttachment (
											jobProfileId
										,	documentTypeId
										,	fileName
										,	fileMimeType
										,	fileETag
										,	fileUrl
										,	createdBy
										,	createdOn
										,	fileStatus
										,	isDeleted  )
                               values( 		jobProfile_Id
										,	documentType_Id
										,	file_Name
										,	fileMime_Type
										,	file_ETag
										,	file_Url
										,	created_By
										,	utc_timestamp() 
										,	file_Status
										,	0 )
							
                      if row_count()>0 then
							set jobProfileAttachment_Id=last_insert_id()
							select jobProfileAttachment_Id
                      end if                 
                else
						update jobProfileAttachment set 
									 	jobProfileId	=	coalesce(jobProfile_Id, jobProfileId)
									,	documentTypeId	=	coalesce(documentType_Id,documentTypeId)
									,	fileName	=	coalesce(file_Name,fileName)
									,	fileMimeType	=	coalesce(fileMime_Type,fileMimeType)
									,	fileETag	=	coalesce(file_ETag,fileETag)
									,	fileUrl	=	file_Url
									,	updatedBy	=	coalesce(created_By, updatedBy ,createdBy)
									,	updatedOn	=	utc_timestamp()
									,	fileStatus	=	file_Status
									,	isDeleted	=	0
								where 	jobProfileAttachmentId	=	jobProfileAttachment_Id
					  if row_count()>0 then
							select jobProfileAttachment_Id
                      end if                   
                end if
        
        else
				update jobProfileAttachment  set 
								updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
							,	isDeleted	=	1
						where 	jobProfileAttachmentId	=	jobProfileAttachment_Id
						if row_count()>0 then
							select jobProfileAttachment_Id
                      end if 
        end if
	



END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateJobProfileHireRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateJobProfileHireRequest`(
 IN jobProfileHireRequest_Id bigint(20) 
,IN jobProfilBusinessSite_Id bigint(20) 
,IN business_Id bigint(20) 
,IN jobProfile_Id bigint(20) 
,IN parentHireRequest_Id bigint(20) 
,IN refferalHireRequest_Id bigint(20) 
,IN respond_By date 
,IN hiringStart_Date date 
,IN hiringEnd_Date date 
,IN start_Time time 
,IN additional_Comments varchar(2000) 
,IN workflow_Id tinyint(4) 
,IN hireRequestDetail_Id bigint(20) 
,IN need_Interview bit(1) 
,IN need_businessApproval bit(1) 
,IN reportTo_Address varchar(2000) 
,IN reportTo_businessSite_Id bigint(20) 
,IN phone_No varchar(15) 
,IN mobile_No varchar(15) 
,IN costCentre_Id bigint(20) 
,IN empStart_Date date 
,IN empEnd_Date date 
,IN shift_Type tinyint(4) 
,IN is_TSRequired bit(1) 
,IN timeSheetFormat_Id tinyint(4) 
,IN uniform_Requirements varchar(1000) 
,IN additional_Notes varchar(1000) 
,IN defineOn_Cost bit(1) 
,IN estimatedMinHours_PerDay int(11) 
,IN estimatedMaxHours_PerDay int(11) 
,IN estimatedMinHours_PerWeek int(11) 
,IN estimatedMaxHours_PerWeek int(11) 
,IN created_By bigint(20)
,IN is_Deleted bit
,IN estimatedStaff_Id bigint(20)
,IN No_of_Employess int
,IN reportTo_Person varchar(200) 
,IN reportToPersonRole_Id bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 08/01/2015
 Description :  Creating hire request

 Changed By: Tijo

*/
	
	declare hireRequest_No	varchar(20)
	set hireRequest_No=""
    -- set jobProfile_Id = (select jobProfileId from jobProfileBusinessSite where jobProfileBusinessSiteId= jobProfilBusinessSite_Id)
    
    if jobProfileHireRequest_Id<>0 then        
		set hireRequest_No= (select hireRequestNo from jobProfileHireRequest where jobProfileHireRequestId=jobProfileHireRequest_Id) 
	elseif(hireRequest_No)="" then
		set hireRequest_No= concat("HRR " , coalesce((select count(1) from jobProfileHireRequest where businessId = business_Id),0) + 1)
	end if
    
    if (is_Deleted =0) then
		if (jobProfileHireRequest_Id =0) then
			INSERT INTO jobProfileHireRequest
			(jobProfileBusinessSiteId  ,jobProfileId  ,parentHireRequestId  , businessId,
			 refferalHireRequestId  ,hireRequestNo  ,respondBy  ,hiringStartDate  ,hiringEndDate  ,
			 startTime  ,additionalComments  ,createdBy  ,createdOn   ,isDeleted  ,workflowId  )
			VALUES
			(jobProfilBusinessSite_Id ,jobProfile_Id ,parentHireRequest_Id , business_Id,
			refferalHireRequest_Id ,hireRequest_No ,respond_By ,hiringStart_Date ,hiringEnd_Date ,
			start_Time ,additional_Comments ,created_By ,utc_timestamp(),is_Deleted ,workflow_Id )
		
			if ROW_COUNT() > 0 then		
				set jobProfileHireRequest_Id=LAST_INSERT_ID() 
				INSERT INTO hireRequestDetail
					( jobProfileHireRequestId ,needInterview ,needbusinessApproval ,reportToAddress ,businessSiteId ,phoneNo ,mobileNo ,
					 costCentreId ,empStartDate ,empEndDate ,shiftType ,isTSRequired ,timeSheetFormatId ,uniformRequirements ,additionalNotes ,defineOnCost ,
					 estimatedMinHoursPerDay ,estimatedMaxHoursPerDay ,estimatedMinHoursPerWeek ,estimatedMaxHoursPerWeek ,createdBy ,createdOn ,isDeleted, reportToPerson, reportToPersonRoleId  )
					VALUES
					(jobProfileHireRequest_Id ,need_Interview ,need_businessApproval ,reportTo_Address ,reportTo_businessSite_Id ,phone_No ,mobile_No 
					 ,costCentre_Id ,empStart_Date ,empEnd_Date ,shift_Type ,is_TSRequired ,timeSheetFormat_Id ,uniform_Requirements ,additional_Notes ,defineOn_Cost 
					 ,estimatedMinHours_PerDay ,estimatedMaxHours_PerDay ,estimatedMinHours_PerWeek ,estimatedMaxHours_PerWeek ,created_By ,utc_timestamp() , is_Deleted, reportTo_Person ,reportToPersonRole_Id  )
                     
				INSERT INTO hireRequestEstimatedStaff (jobProfileHireRequestId ,estimatedStaff ,createdBy ,createdOn ,isDeleted )
				VALUES 	(jobProfileHireRequest_Id ,No_of_Employess ,created_By ,utc_timestamp()  ,is_Deleted)
				select jobProfileHireRequest_Id, hireRequest_No
			end if 
		else
			UPDATE  jobProfileHireRequest SET
								 respondBy  =  respond_By ,
								 hiringStartDate  =  hiringStart_Date ,
								 hiringEndDate  =  hiringEnd_Date ,
								 startTime  =  start_Time ,
								 additionalComments  =  additional_Comments ,
								 updatedBy  =  created_By ,
								 updatedOn  =  utc_timestamp() ,
                                 jobProfileBusinessSiteId=jobProfilBusinessSite_Id
								 WHERE  jobProfileHireRequestId  =  jobProfileHireRequest_Id
		
			if ROW_COUNT() > 0 then		
				update hireRequestDetail set 
								  needInterview = need_Interview
								 ,needbusinessApproval = need_businessApproval
								 ,reportToAddress = reportTo_Address
								 ,businessSiteId = reportTo_businessSite_Id
								 ,phoneNo = phone_No
								 ,mobileNo = mobile_No
								 ,costCentreId = costCentre_Id
								 ,empStartDate = empStart_Date
								 ,empEndDate = empEnd_Date
								 ,shiftType = shift_Type
								 ,isTSRequired = is_TSRequired
								 ,timeSheetFormatId = timeSheetFormat_Id
								 ,uniformRequirements = uniform_Requirements
								 ,additionalNotes = additional_Notes
								 ,defineOnCost = defineOn_Cost
								 ,estimatedMinHoursPerDay = estimatedMinHours_PerDay
								 ,estimatedMaxHoursPerDay = estimatedMaxHours_PerDay
								 ,estimatedMinHoursPerWeek = estimatedMinHours_PerWeek
								 ,estimatedMaxHoursPerWeek = estimatedMaxHours_PerWeek
								 ,updatedBy = created_By
								 ,updatedOn = utc_timestamp()
								 ,isDeleted = 0
                                 ,reportToPerson = reportTo_Person
                                 ,reportToPersonRoleId = reportToPersonRole_Id
								 where hireRequestDetailId =hireRequestDetail_Id
            
				UPDATE hireRequestEstimatedStaff SET
								 jobProfileHireRequestId  = jobProfileHireRequest_Id,
								 estimatedStaff  = No_of_Employess,
								 updatedBy  = created_By,
								 updatedOn  = utc_timestamp(),
								 isDeleted  = 0
								 WHERE  estimatedStaffId  = estimatedStaff_Id

				select jobProfileHireRequest_Id, hireRequest_No
		end if 
        end if
	ELSE
		UPDATE  jobProfileHireRequest SET isDeleted = is_Deleted  WHERE  jobProfileHireRequestId  =  jobProfileHireRequest_Id
       
        if ROW_COUNT() > 0 then	
			 select jobProfileHireRequest_Id, hireRequest_No
			 UPDATE  hireRequestDetail SET isDeleted = is_Deleted  WHERE  hireRequestDetailId =hireRequestDetail_Id
			 UPDATE  hireRequestEstimatedStaff SET isDeleted = is_Deleted  WHERE  estimatedStaffId  = estimatedStaff_Id
        end if 
    end if

		

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateJobProfileQualification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateJobProfileQualification`(
   IN	jobProfileQualification_Id	bigint(20)
  ,IN	jobProfile_Id	bigint(20)
  ,IN	qualification_Id	int(11)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)
)
BEGIN
/*
Author: James
Date  : 17/12/2014
Description : insert update Job profile qualification
*/


	if(is_Deleted=0) then 
			if (jobProfileQualification_Id=0) then
					if not exists (select 1 from jobProfileQualification where jobProfileId =jobProfile_Id and qualificationId = qualification_Id)then
						insert into jobProfileQualification (
											jobProfileId
										,	qualificationId
										,	createdBy
										,	createdOn )
								  values (	jobProfile_Id
										,	qualification_Id
										,	created_By
										,	utc_timestamp() )
									  
								  if row_count()>0 then
										select last_insert_id() StatusValue 
								  end if  
					end if
			else
					update jobProfileQualification set 
							-- 	jobProfileId	=	jobProfile_Id
								qualificationId	=	qualification_Id
							,	updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
					    where 	jobProfileQualificationId	=	jobProfileQualification_Id 
                        
						  if row_count()>0 then
									select jobProfileQualification_Id  StatusValue 
						  end if   
            
            end if
    else
			Delete from jobProfileQualification  where 	jobProfileQualificationId	=	jobProfileQualification_Id 
			 if row_count()>0 then
					select jobProfileQualification_Id  StatusValue 
			  end if   
    end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateJobProfileSiteStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateJobProfileSiteStatus`(
 IN status_type tinyint
,IN BusinessSiteIds varchar(5000)
,IN JobProfile_Id bigint
,IN created_By bigint
)
BEGIN

/*

 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Job profile site status
 
 status 1 - inactive
	    2 - active

*/
	declare StatusValue tinyint
	declare businessSite_Id bigint
	DROP TABLE IF EXISTS tmpBusinessSplit
    CREATE TEMPORARY TABLE tmpBusinessSplit ( id bigint PRIMARY KEY auto_increment,variable VARCHAR(1000))

	SET @vars := BusinessSiteIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpBusinessSplit (variable) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
    
    update jobProfileBusinessSite s
	inner join tmpBusinessSplit bs on s.businessSiteId = bs.variable and jobProfileId = JobProfile_Id
	set status =status_type 
    
    if ROW_COUNT() > 0 then
		set StatusValue = 1
    end if
    
    insert into jobProfileBusinessSite (jobProfileId,businessSiteId,createdBy,createdOn,isDeleted,status)
    select JobProfile_Id,variable,created_By,utc_timestamp(),0,status_type
	from tmpBusinessSplit where variable not in (select businessSiteId from jobProfileBusinessSite where jobProfileId = JobProfile_Id)
	
    if ROW_COUNT() > 0 then
		set StatusValue = 1
    end if
	
    select StatusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateJobProfileWage` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateJobProfileWage`(
   IN	jobProfileWage_Id	bigint(20)
  ,IN	jobProfile_Id	bigint(20)
  ,IN	wageType_Id	tinyint(4)
  ,IN	wagePer_Id	smallint(6)
  ,IN	wageCurrency_Id	int(11)
  ,IN	wage_Min	decimal(9,0)
  ,IN	wage_Max	decimal(9,0)
  ,IN	created_By	bigint(20)
  ,IN	is_Deleted	bit(1)
)
BEGIN

/*
 Author: James
 Date  : 23/12/2014
 Description : insert update job profile wage
*/
	if(is_Deleted=0) then
			if(jobProfileWage_Id=0) then
					insert into jobProfileWage (
										jobProfileId
									,	wageTypeId
									,	wagePerId
									,	wageCurrencyId
									,	wageMin
									,	wageMax
									,	createdBy
									,	createdOn 
									,	isDeleted )
							values (	jobProfile_Id
									,	wageType_Id
									,	wagePer_Id
									,	wageCurrency_Id
									,	wage_Min
									,	wage_Max
									,	created_By
									,	utc_timestamp()
									,	0 )
                     
					IF ROW_COUNT() > 0 THEN
							select last_insert_id() as StatusValue 
					end if  
            else
					update jobProfileWage set 
							 	wageTypeId	=	wageType_Id
							,	wagePerId	=	wagePer_Id
							,	wageCurrencyId	=	wageCurrency_Id
							,	wageMin	=	wage_Min
							,	wageMax	=	wage_Max
							,	updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
							,	isDeleted	=	0
						where	jobProfileWageId	=	jobProfileWage_Id
					IF ROW_COUNT() > 0 THEN
							select jobProfileWage_Id as StatusValue 
					end if  
             end if
    else
				update jobProfileWage set  
								updatedBy	=	created_By
							,	updatedOn	=	utc_timestamp()
							,	isDeleted	=	1
				where	jobProfileWageId	=	jobProfileWage_Id
                
					IF ROW_COUNT() > 0 THEN
							select jobProfileWage_Id as StatusValue 
					end if 
    end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateLastMinuteHire` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateLastMinuteHire`(
	IN	lastMinuteHire_Id	bigint(20)
,	IN	jobProfilBusinessSite_Id	bigint(20)
,	IN	shiftStart_DateTime	datetime
,	IN	shiftEnd_DateTime	datetime
,	IN	hire_Status	tinyint(4)
,	IN	created_By	bigint(20)
,	IN	is_Deleted	bit(1) 
,   in shiftOffer_Id bigint
,   in old_lastMinuteHireId	bigint(20)
)
BEGIN

/*
 Author: James
 Date  : 31/03/2015
 Description : Insert & update Last minute hire
 
 hire_Status 1-- Select Candidate 2-- Notification Sent 3-- Candidate Accepted 4 -- All Declined
 
*/
-- if not exists (select 1 from lastMinuteHire where shiftOfferId =shiftOffer_Id and isDeleted=0 ) then
	if is_Deleted=0 then
			if lastMinuteHire_Id=0 then
				
					update lastMinuteHire set isDeleted=1
						,	updatedBy	=	created_By
						,	updatedOn	= utc_timestamp()
					where lastMinuteHireId=old_lastMinuteHireId and coalesce(old_lastMinuteHireId,0)<>0
					
                insert into lastMinuteHire (
							-- 	jobProfileBusinessSiteId
								shiftStartDateTime
							,	shiftEndDateTime
							,	status
							,	createdBy
							,	createdOn
							,	isDeleted 
                            ,	shiftOfferId
                            )
					values ( -- 	jobProfilBusinessSite_Id
								shiftStart_DateTime
							,	shiftEnd_DateTime
							,	hire_Status
							,	created_By
							,	utc_timestamp()
							,	0
                            ,	shiftOffer_Id)
					if row_count()>0 then
						set lastMinuteHire_Id=last_insert_id()              
						select lastMinuteHire_Id 
					end if
			else
					update lastMinuteHire set
					--  jobProfileBusinessSiteId	=	jobProfilBusinessSite_Id
						shiftStartDateTime	=	shiftStart_DateTime
					,	shiftEndDateTime	=	shiftEnd_DateTime
					,	status	=	hire_Status
					,	updatedBy	=	created_By
					,	updatedOn	= utc_timestamp()
					where	lastMinuteHireId	=	lastMinuteHire_Id 
					if row_count()>0 then
						select lastMinuteHire_Id 
					end if
			end if
	else
			update lastMinuteHire set 	
						isDeleted=1
					,	updatedBy	=	created_By
					,	updatedOn	= utc_timestamp()
			where	lastMinuteHireId	=	lastMinuteHire_Id 
			if row_count()>0 then
				select lastMinuteHire_Id 
                
					update lastMinuteHireCandidate set 
						 isDeleted=1
						,updatedBy=created_By
						,updatedOn=utc_timestamp()
					where lastMinuteHireId=lastMinuteHire_Id 

			end if

	end if
-- else
	-- select 0 as lastMinuteHire_Id 
-- end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateLastMinuteHireCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateLastMinuteHireCandidate`(
	IN	lastMinute_HireId	bigint(20)
,	IN	candidate_UserIds	varchar(4000)
,	IN	candidate_Status	tinyint(4)
,	IN	created_By	bigint(20) 
)
BEGIN

/*
 Author: James
 Date  : 31/03/2015
 Description : Insert & update Last minute hire candidate
 
 candidate_Status 0-- Unselect 1--Select 2-- Notification sent 3- candidate Accepted 4-Notified
 
*/


	declare StatusValue int 
	DECLARE businessSite_Id BIGINT(20)
	DECLARE subClassification_Id BIGINT(20)
	DECLARE department_Id BIGINT(20)
	DECLARE shift_StartDateTime DATETIME
	DECLARE shift_EndDateTime DATETIME
	DECLARE request_Id BIGINT(20)
    DECLARE shiftOffer_Id bigint
    Declare business_name varchar(500) 
    declare can_Id bigint(20)
    declare total bigint(20)
	set @shiftOffer_Id = (select shiftOfferId from lastMinuteHire where lastMinuteHireId = lastMinute_HireId)
    set @ShiftofferedCandidateId = (select candidateId from candidateShiftOffer where shiftOfferId =@shiftOffer_Id)
    
	SELECT so.businessSiteId,so.departmentId ,so.subClassificationId,so.shiftStartDateTime,so.shiftEndDateTime,businessName
	INTO businessSite_Id,department_Id,subClassification_Id,shift_StartDateTime,shift_EndDateTime,business_name
	FROM candidateShiftOffer so INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN business b ON bs.businessId=b.businessId 
	WHERE so.shiftofferId=@shiftOffer_Id
   
	set StatusValue = 0
	DROP TABLE IF EXISTS tmpSelectCandSplit
    CREATE TEMPORARY TABLE tmpSelectCandSplit ( id bigint PRIMARY KEY auto_increment,candidate_Id bigint)

	SET @vars := candidate_UserIds
	SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
    
	SET @sql := CONCAT('INSERT INTO tmpSelectCandSplit (candidate_Id) ', ' VALUES ', @vars)
	PREPARE stmt FROM @sql
	EXECUTE stmt
	DEALLOCATE PREPARE stmt
		
		
		insert into  lastMinuteHireCandidate (lastMinuteHireId,candidateUserId,candidateStatus,createdBy,createdOn,isDeleted)
		select distinct lastMinute_HireId,candidate_Id,candidate_Status,created_By,utc_timestamp(),0
		from tmpSelectCandSplit 
		where candidate_Id not in (select candidateUserId from lastMinuteHireCandidate where lastMinuteHireId =lastMinute_HireId and isDeleted=0)
			
		if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if
		
	
		update lastMinuteHireCandidate set candidateStatus = candidate_Status
		, updatedBy = created_By
		,updatedOn = utc_timestamp()
		where candidateUserId in (select candidate_Id from tmpSelectCandSplit) and lastMinuteHireId = lastMinute_HireId
			
		if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if
	
			
	if (StatusValue=1) then	
		update lastMinuteHire set status=2 ,updatedBy=created_By ,updatedOn=utc_timestamp() where lastMinuteHireId =lastMinute_HireId 
        
		if (candidate_Status =  2) then
			  
				
                if (select status from candidateShiftOffer where shiftOfferId=@shiftOffer_Id)=10   then
					call InsertCandidateShiftCancel(@shiftOffer_Id,10,null,created_By,null,null) 
				end if
                				
                update candidateGiveAwayRequests set status=49,candidateStatus=1
                where shiftofferId=@shiftOffer_Id and find_in_set(candidateId,candidate_UserIds) 
                
				INSERT INTO candidateGiveAwayRequests(shiftOfferId,candidateId,STATUS)
				SELECT DISTINCT @shiftOffer_Id,crd.candidate_Id,49
				FROM tmpSelectCandSplit crd
				INNER JOIN scUser scu ON crd.candidate_Id=scu.userId
				where scu.isDeleted=0 AND CheckCandidateAvailability(crd.candidate_Id,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime)=1
			 	and candidate_Id not in (select candidateId from candidateGiveAwayRequests where shiftOfferId = @shiftOffer_Id) 
		 
				select count(candidateId)  into  total from candidateGiveAwayRequests 
				where shiftofferId=@shiftOffer_Id                 
                if total=1 then
					select candidateId  into  can_Id from candidateGiveAwayRequests 
					where shiftofferId=@shiftOffer_Id
                else 
					set can_Id=0
                end if
				
                UPDATE candidateShiftOffer
				SET updatedBy = created_By , updatedOn = utc_timestamp(), status = 46 ,candidateId=can_Id
				WHERE shiftofferId=@shiftOffer_Id
         end if
	end if
        
        
 
    DROP TABLE IF EXISTS tmpSelectCandSplit
    select  StatusValue,shift_StartDateTime,shift_EndDateTime,business_name


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateMasterData` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateMasterData`(
IN source_languageId bigint(20)
,IN target_languageId bigint(20)

)
BEGIN


/*
set source_languageId=264
set target_languageId=352
*/
-- show columns from allowancePaidTypeLocale  select * from allowancePaidTypeLocale  select * from masterDataTemp where tableName='allowancePaidTypeLocale'

insert into allowancePaidTypeLocale
(allowancePaidTypeId,allowancePaidType,languageId)
select bf.allowancePaidTypeId,bf.allowancePaidType,target_languageId  from allowancePaidTypeLocale bf 
left join allowancePaidTypeLocale bf2 on  bf.allowancePaidTypeId=bf2.allowancePaidTypeId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId  
where   bf2.allowancePaidTypeId is null and bf.languageId=source_languageId

update allowancePaidTypeLocale ap 
inner join masterDataTemp md on ap.allowancePaidTypeId=md.columnMappingId
set ap.allowancePaidType=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='allowancePaidTypeLocale' and  coalesce( md.col1ValueInOtherLang,'')<>''  

-- show columns from areaOfExpertiseLocale  select * from areaOfExpertiseLocale  select * from masterDataTemp where tableName='areaOfExpertiseLocale'
insert into areaOfExpertiseLocale
(areaOfExpertiseId,areaOfExpertise,languageId)
select bf.areaOfExpertiseId,bf.areaOfExpertise,target_languageId  from areaOfExpertiseLocale bf 
left join areaOfExpertiseLocale bf2 on  bf.areaOfExpertiseId=bf2.areaOfExpertiseId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.areaOfExpertiseId is null and bf.languageId=source_languageId

update areaOfExpertiseLocale ap 
inner join masterDataTemp md on ap.areaOfExpertiseId=md.columnMappingId
set ap.areaOfExpertise=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='areaOfExpertiseLocale' and  coalesce( md.col1ValueInOtherLang,'')<>''  

-- show columns from businessFunctionLocale  select * from businessFunctionLocale  select * from masterDataTemp where tableName='businessFunctionLocale'
insert into businessFunctionLocale
(businessFunctionId,languageId,businessFunctionName,businessFunctionDescription,parentBFName
,parentClaimId,showinUI,isHeader,roleCategoryIds,workFlowIds,roleIds,isBusinessSpecific)
select bf.businessFunctionId
		,target_languageId
		,bf.businessFunctionName
		,bf.businessFunctionDescription
		,bf.parentBFName
		,bf.parentClaimId
		,bf.showinUI
		,bf.isHeader
		,bf.roleCategoryIds
		,bf.workFlowIds
		,bf.roleIds
		,bf.isBusinessSpecific 
from businessFunctionLocale bf 
left join businessFunctionLocale bf2 on  bf.businessFunctionId=bf2.businessFunctionId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.businessFunctionId is null and bf.languageId=source_languageId

update businessFunctionLocale ap 
inner join masterDataTemp md on ap.businessFunctionId=md.columnMappingId
set ap.businessFunctionName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='businessFunctionLocale' and  coalesce( md.col1ValueInOtherLang,'')<>''  

-- show columns from candidateSearchExpLocale  select * from candidateSearchExpLocale  select * from masterDataTemp where tableName='candidateSearchExpLocale'

insert into candidateSearchExpLocale (
 candidateSearchExpId,candidateSearchExp,languageId,minExpMonth,maxExpMonth)
select 	cs.candidateSearchExpId
		,cs.candidateSearchExp
		,target_languageId
		,cs.minExpMonth
		,cs.maxExpMonth
 from  candidateSearchExpLocale cs 
left join candidateSearchExpLocale cs2 on cs.candidateSearchExpId=cs2.candidateSearchExpId  -- and cs.languageId=cs2.languageId 
and cs2.languageId=target_languageId
where cs2.candidateSearchExpId is null and cs.languageId=source_languageId

update candidateSearchExpLocale ap 
inner join masterDataTemp md on ap.candidateSearchExpId=md.columnMappingId
set ap.candidateSearchExp=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='candidateSearchExpLocale' and  coalesce( md.col1ValueInOtherLang,'')<>''  
 
-- show columns from cityLocale  select * from cityLocale  select * from masterDataTemp where tableName='cityLocale'

insert into cityLocale
(cityId,cityName,languageId)
select distinct bf.cityId,bf.cityName,target_languageId  from cityLocale bf 
left join cityLocale bf2 on  bf.cityId=bf2.cityId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.cityId is null and bf.languageId=source_languageId

update cityLocale ap 
inner join masterDataTemp md on ap.cityId=md.columnMappingId
set ap.cityName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='cityLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from countryLocale  select * from countryLocale  select * from masterDataTemp where tableName='countryLocale'

insert into countryLocale
(countryId,countryName,countryCode,languageId)
select distinct bf.countryId,bf.countryName,bf.countryCode,target_languageId  from countryLocale bf 
left join countryLocale bf2 on  bf.countryId=bf2.countryId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.countryId is null and bf.languageId=source_languageId

update countryLocale ap 
inner join masterDataTemp md on ap.countryId=md.columnMappingId
set ap.countryName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='countryLocale' and  coalesce( md.col1ValueInOtherLang,'')<>''  
 
-- show columns from courseLocale  select * from courseLocale  select * from masterDataTemp where tableName='courseLocale'
insert into courseLocale
(courseId,courseName,languageId)
select distinct bf.courseId,bf.courseName,target_languageId  from courseLocale bf 
left join courseLocale bf2 on  bf.courseId=bf2.courseId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.courseId is null and bf.languageId=source_languageId

update courseLocale ap 
inner join masterDataTemp md on ap.courseId=md.columnMappingId
set ap.courseName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='courseLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 
 
-- show columns from currencyLocale   select * from currencyLocale  select * from masterDataTemp where tableName='currencyLocale'
insert into currencyLocale
(currencyId,languageId,currencyName,currencyCode,code)
select distinct bf.currencyId,target_languageId,bf.currencyName,bf.currencyCode,bf.code
from currencyLocale bf 
left join currencyLocale bf2 on  bf.currencyId=bf2.currencyId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.currencyId is null and bf.languageId=source_languageId

update currencyLocale ap 
inner join masterDataTemp md on ap.currencyId=md.columnMappingId
set ap.currencyName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='currencyLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 
 

-- show columns from documentMimeTypeLocale   select * from documentMimeTypeLocale  select * from masterDataTemp where tableName='documentMimeTypeLocale'

insert into documentMimeTypeLocale
(documentMimeTypeId,documentMimeType,languageId)
select bf.documentMimeTypeId,bf.documentMimeType,target_languageId  from documentMimeTypeLocale bf 
left join documentMimeTypeLocale bf2 on  bf.documentMimeTypeId=bf2.documentMimeTypeId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.documentMimeTypeId is null and bf.languageId=source_languageId

-- show columns from employmentProfileLocale   select * from employmentProfileLocale  select * from masterDataTemp where tableName='employmentProfileLocale'
insert into employmentProfileLocale
(employmentProfileId,employmentProfile,languageId)
select bf.employmentProfileId,bf.employmentProfile,target_languageId  from employmentProfileLocale bf 
left join employmentProfileLocale bf2 on  bf.employmentProfileId=bf2.employmentProfileId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.employmentProfileId is null and bf.languageId=source_languageId

update employmentProfileLocale ap 
inner join masterDataTemp md on ap.employmentProfileId=md.columnMappingId
set ap.employmentProfile=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='employmentProfileLocale' 
and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from employmentTypeLocale   select * from employmentTypeLocale  select * from masterDataTemp where tableName='employmentTypeLocale'
insert into employmentTypeLocale
(employmentTypeId,employmentType,languageId)
select bf.employmentTypeId,bf.employmentType,target_languageId  from employmentTypeLocale bf 
left join employmentTypeLocale bf2 on  bf.employmentTypeId=bf2.employmentTypeId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.employmentTypeId is null and bf.languageId=source_languageId

update employmentTypeLocale ap 
inner join masterDataTemp md on ap.employmentTypeId=md.columnMappingId
set ap.employmentType=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='employmentTypeLocale' 
and  coalesce( md.col1ValueInOtherLang,'')<>'' 


-- show columns from featureLocale   select * from featureLocale  select * from masterDataTemp where tableName='featureLocale'
insert into featureLocale
(featureId ,featureName,description,languageId)
select bf.featureId ,bf.featureName,bf.description,target_languageId  from featureLocale bf 
left join featureLocale bf2 on  bf.featureId=bf2.featureId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.featureId is null and bf.languageId=source_languageId

update featureLocale ap 
inner join masterDataTemp md on ap.featureId=md.columnMappingId
set ap.featureName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='featureLocale' 
and  coalesce( md.col1ValueInOtherLang,'')<>'' 
  
-- show columns from genderLocale   select * from genderLocale  select * from masterDataTemp where tableName='genderLocale'
insert into genderLocale
(genderId,genderName,languageId)
select bf.genderId,bf.genderName,target_languageId  from genderLocale bf 
left join genderLocale bf2 on  bf.genderId=bf2.genderId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.genderId is null and bf.languageId=source_languageId

update genderLocale ap 
inner join masterDataTemp md on ap.genderId=md.columnMappingId
set ap.genderName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='genderLocale' 
and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from groupNameLocale   select * from groupNameLocale  select * from masterDataTemp where tableName='groupNameLocale'
insert into groupNameLocale
(groupNameId,groupName,languageId)
select bf.groupNameId,bf.groupName,target_languageId  from groupNameLocale bf 
left join groupNameLocale bf2 on  bf.groupNameId=bf2.groupNameId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.groupNameId is null and bf.languageId=source_languageId

update groupNameLocale ap 
inner join masterDataTemp md on ap.groupNameId=md.columnMappingId
set ap.groupName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='groupNameLocale' 
and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from industryLocale   select * from industryLocale  select * from masterDataTemp where tableName='industryLocale'
insert into industryLocale
(industryID,industryName,description,languageId)
select bf.industryID,bf.industryName,bf.description,target_languageId  from industryLocale bf 
left join industryLocale bf2 on  bf.industryID=bf2.industryID -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.industryID is null and bf.languageId=source_languageId

update industryLocale ap 
inner join masterDataTemp md on ap.industryID=md.columnMappingId
set ap.industryName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='industryLocale' 
and  coalesce( md.col1ValueInOtherLang,'')<>'' 


-- show columns from industryLocale   select * from industryLocale  select * from masterDataTemp where tableName='industryLocale'
insert into industryLocale
(industryID,industryName,description,languageId)
select bf.industryID,bf.industryName,bf.description,target_languageId  from industryLocale bf 
left join industryLocale bf2 on  bf.industryID=bf2.industryID -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.industryID is null and bf.languageId=source_languageId

update industryLocale ap 
inner join masterDataTemp md on ap.industryID=md.columnMappingId
set ap.industryName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='industryLocale' 
and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from jobClassificationLocale   select * from jobClassificationLocale  select * from masterDataTemp where tableName='jobClassificationLocale'

insert into jobClassificationLocale
(jobClassificationId,jobClassification,languageId)
select bf.jobClassificationId,bf.jobClassification,target_languageId  from jobClassificationLocale bf 
left join jobClassificationLocale bf2 on  bf.jobClassificationId=bf2.jobClassificationId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.jobClassificationId is null and bf.languageId=source_languageId

update jobClassificationLocale ap 
inner join masterDataTemp md on ap.jobClassificationId=md.columnMappingId
set ap.jobClassification=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='jobClassificationLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 
 
-- show columns from jobProfileExpLocale   select * from jobProfileExpLocale  select * from masterDataTemp where tableName='jobProfileExpLocale'

insert into jobProfileExpLocale
(jobProfileExpId,jobProfileExp,minExpMnth,maxExpMnth,languageId)
select bf.jobProfileExpId,bf.jobProfileExp,bf.minExpMnth,bf.maxExpMnth,target_languageId  from jobProfileExpLocale bf 
left join jobProfileExpLocale bf2 on  bf.jobProfileExpId=bf2.jobProfileExpId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.jobProfileExpId is null and bf.languageId=source_languageId

update jobProfileExpLocale ap 
inner join masterDataTemp md on ap.jobProfileExpId=md.columnMappingId
set ap.jobProfileExp=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='jobProfileExpLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from jobSubClassificationLocale   select * from jobSubClassificationLocale

insert into jobSubClassificationLocale
(jobSubClassificationId,jobSubClassification,languageId)
select bf.jobSubClassificationId,bf.jobSubClassification,target_languageId  from jobSubClassificationLocale bf 
left join jobSubClassificationLocale bf2 on  bf.jobSubClassificationId=bf2.jobSubClassificationId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.jobSubClassificationId is null and bf.languageId=source_languageId

update jobSubClassificationLocale ap 
inner join masterDataTemp md on ap.jobSubClassificationId=md.columnMappingId
set ap.jobSubClassification=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='jobSubClassificationLocale' and  coalesce( md.col1ValueInOtherLang,'')<>''  
 
-- show columns from periodLocale   select * from periodLocale  select * from masterDataTemp where tableName='periodLocale'

insert into periodLocale
(periodId,period,minMonth,maxMonth,languageId)
select bf.periodId,bf.period,bf.minMonth,bf.maxMonth,target_languageId  from periodLocale bf 
left join periodLocale bf2 on  bf.periodId=bf2.periodId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.periodId is null and bf.languageId=source_languageId

update periodLocale ap 
inner join masterDataTemp md on ap.periodId=md.columnMappingId
set ap.period=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='periodLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 
 
-- show columns from roleInfoLocale   select * from roleInfoLocale  select * from masterDataTemp where tableName='roleInfoLocale'

insert into roleInfoLocale
(roleId,roleName,languageId)
select bf.roleId,bf.roleName,target_languageId  from roleInfoLocale bf 
left join roleInfoLocale bf2 on  bf.roleId=bf2.roleId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.roleId is null and bf.roleId in(1,2,3,4,5,6) and bf.languageId=source_languageId

update roleInfoLocale ap 
inner join masterDataTemp md on ap.roleId=md.columnMappingId
set ap.roleName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='roleInfoLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 


-- show columns from salaryPerLocale   select * from salaryPerLocale  select * from masterDataTemp where tableName='salaryPerLocale'

insert into salaryPerLocale
(salaryPerId,salaryPerName,languageId)
select bf.salaryPerId,bf.salaryPerName,target_languageId  from salaryPerLocale bf 
left join salaryPerLocale bf2 on  bf.salaryPerId=bf2.salaryPerId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.salaryPerId is null and bf.languageId=source_languageId

update salaryPerLocale ap 
inner join masterDataTemp md on ap.salaryPerId=md.columnMappingId
set ap.salaryPerName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='salaryPerLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 
  
-- show columns from scMonthLocale   select * from scMonthLocale  select * from masterDataTemp where tableName='scMonthLocale'

insert into scMonthLocale
(monthId,monthName,languageId)
select bf.monthId,bf.monthName,target_languageId  from scMonthLocale bf 
left join scMonthLocale bf2 on  bf.monthId=bf2.monthId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.monthId is null and bf.languageId=source_languageId

update scMonthLocale ap 
inner join masterDataTemp md on ap.monthId=md.columnMappingId
set ap.monthName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='scMonthLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from skillLocale   select * from skillLocale  select * from masterDataTemp where tableName='skillLocale'

insert into skillLocale
(skillId,skillName,languageId)
select bf.skillId,bf.skillName,target_languageId  from skillLocale bf 
left join skillLocale bf2 on  bf.skillId=bf2.skillId and bf2.languageId=target_languageId 
inner join skill s on s.skillId=bf.skillId 
where   bf2.skillId is null  and bf.languageId=source_languageId

update skillLocale ap 
inner join masterDataTemp md on ap.skillId=md.columnMappingId
set ap.skillName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='skillLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 


-- show columns from stateLocale  select * from stateLocale  select * from masterDataTemp where tableName='stateLocale'

insert into stateLocale
(stateId,stateName,abbreviation,languageId)
select bf.stateId,bf.stateName,bf.abbreviation,target_languageId  from stateLocale bf 
left join stateLocale bf2 on  bf.stateId=bf2.stateId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.stateId is null and bf.languageId=source_languageId

update stateLocale ap 
inner join masterDataTemp md on ap.stateId=md.columnMappingId
set ap.stateName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='stateLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from timeSheetFormatLocale  select * from timeSheetFormatLocale  select * from masterDataTemp where tableName='timeSheetFormatLocale'

insert into timeSheetFormatLocale
(timeSheetFormatId,timeSheetFormat,languageId)
select bf.timeSheetFormatId,bf.timeSheetFormat,target_languageId  from timeSheetFormatLocale bf 
left join timeSheetFormatLocale bf2 on  bf.timeSheetFormatId=bf2.timeSheetFormatId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.timeSheetFormatId is null and bf.languageId=source_languageId

update timeSheetFormatLocale ap 
inner join masterDataTemp md on ap.timeSheetFormatId=md.columnMappingId
set ap.timeSheetFormat=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='timeSheetFormatLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from timeSheetweekEndLocale  select * from timeSheetweekEndLocale  select * from masterDataTemp where tableName='timeSheetweekEndLocale / weekDayLocale'

insert into timeSheetweekEndLocale
(weekEndDayId,weekEndDay,languageId)
select bf.weekEndDayId,bf.weekEndDay,target_languageId  from timeSheetweekEndLocale bf 
left join timeSheetweekEndLocale bf2 on  bf.weekEndDayId=bf2.weekEndDayId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.weekEndDayId is null and bf.languageId=source_languageId

update timeSheetweekEndLocale ap 
inner join masterDataTemp md on ap.weekEndDayId=md.columnMappingId
set ap.weekEndDay=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='timeSheetweekEndLocale / weekDayLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from weekDayLocale  select * from weekDayLocale  select * from masterDataTemp where tableName='timeSheetweekEndLocale / weekDayLocale'

insert into weekDayLocale
(weekDayId,weekDay,languageId)
select bf.weekDayId,bf.weekDay,target_languageId  from weekDayLocale bf 
left join weekDayLocale bf2 on  bf.weekDayId=bf2.weekDayId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.weekDayId is null and bf.languageId=source_languageId

update weekDayLocale ap 
inner join masterDataTemp md on ap.weekDayId=md.columnMappingId
set ap.weekDay=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='timeSheetweekEndLocale / weekDayLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from timeZoneLocale  select * from timeZoneLocale  select * from masterDataTemp where tableName='timeZoneLocale'

insert into timeZoneLocale
(timeZoneId,timeZoneName,timeZoneFormat,timeZoneGMT,sortOrder,languageId)
select bf.timeZoneId,bf.timeZoneName,bf.timeZoneFormat,bf.timeZoneGMT,bf.sortOrder,target_languageId  from timeZoneLocale bf 
left join timeZoneLocale bf2 on  bf.timeZoneId=bf2.timeZoneId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.timeZoneId is null and bf.languageId=source_languageId

update timeZoneLocale ap 
inner join masterDataTemp md on ap.timeZoneId=md.columnMappingId
set ap.timeZoneName=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='timeZoneLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 

-- show columns from wageTypeLocale  select * from wageTypeLocale  select * from masterDataTemp where tableName='wageTypeLocale'

insert into wageTypeLocale
(wageTypeId,wageType,languageId)
select bf.wageTypeId,bf.wageType,target_languageId  from wageTypeLocale bf 
left join wageTypeLocale bf2 on  bf.wageTypeId=bf2.wageTypeId -- and bf.languageId=bf2.languageId 
and bf2.languageId=target_languageId 
where   bf2.wageTypeId is null and bf.languageId=source_languageId

update wageTypeLocale ap 
inner join masterDataTemp md on ap.wageTypeId=md.columnMappingId
set ap.wageType=md.col1ValueInOtherLang
where ap.languageId=target_languageId and md.tableName='wageTypeLocale' and  coalesce( md.col1ValueInOtherLang,'')<>'' 
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateNotification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateNotification`(
  in   notification_Id   bigint(20)
-- , in   business_Id   bigint(20)
, in   businessSite_Id   bigint(20)
, in   manager_Id   bigint(20)
, in   notification_Message   varchar(5000)
, in   send_UserName   bit(1) 
, in   send_AppStoreLink   bit(1) 
, in   created_By   bigint(20)
, in   notification_Subject   varchar(200)
, in   authorization_Required bit(1)
)
BEGIN
/*
 Author: James
 Date  : 11/04/2016
 Description : insert & update notification request (sms & email)
*/
if coalesce(notification_Id,0)=0 then
	insert into notification(
			--   businessId
			  businessSiteId
			, managerId
            , notificationSubject
			, notificationMessage
			, sendUserName
            , sendAppStoreLink
			, isDeleted
			, createdBy
			, createdOn
            , authorizationRequired)
		values ( 
		   --   business_Id
			 businessSite_Id
			, manager_Id
            , notification_Subject
			, notification_Message
			, send_UserName
            , send_AppStoreLink
			, 0
			, created_By
			, utc_timestamp()
            , authorization_Required)
		if row_count()>0 then
			set notification_Id=LAST_INSERT_ID() 
        end if
else
		update notification set 
			--  businessId =  business_Id
			  businessSiteId =  businessSite_Id
			, managerId =  manager_Id
            , notificationSubject = notification_Subject
			, notificationMessage =  notification_Message
			, sendUserName =  send_UserName  
            , sendAppStoreLink = send_AppStoreLink
			, updatedBy =  created_By
			, updatedOn =  utc_timestamp()
            , authorizationRequired = authorization_Required
		where notificationId =  notification_Id
        if row_count()>0 then
			set notification_Id=notification_Id
        end if
end if

	select notification_Id 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateNotificationRecipient` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateNotificationRecipient`(
  in   notificationRecipient_Id   bigint(20)
, in   notificationRequest_Id   bigint(20)
, in   candidate_UserId   bigint(20)
, in   first_Name   varchar(50)
, in   last_Name   varchar(50)
, in   email_Id   varchar(100)
, in   mobile_No   varchar(50)
, in   notificationRecipient_GUID   varchar(100)
, in   notification_status   tinyint(4)
, in   created_By   bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 11/04/2016
 Description : insert & update notification request details (candidate wise status)
*/

if coalesce(notificationRecipient_Id,0)=0 then
	insert into notificationRecipient( 
				  notificationRequestId
				, userId
				, firstName
				, lastName
				, emailId
				, mobileNo
				, notificationRecipientGUID
				, status
				, createdBy
				, createdOn )
		values (  notificationRequest_Id
				, candidate_UserId
				, first_Name
				, last_Name
				, email_Id
				, mobile_No
				, notificationRecipient_GUID
				, notification_status
				, created_By
				, utc_timestamp())
			if row_count()>0 then
				set notificationRecipient_Id =last_insert_id()
            end if			
else 
			update notificationRecipient set 
					  status =  notification_status
					, updatedBy =  created_By
					, updatedOn = utc_timestamp()
			where notificationRecipientId =  notificationRecipient_Id 
			if row_count()>0 then
				set notificationRecipient_Id =notificationRecipient_Id
            end if	
end if
	select notificationRecipient_Id
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateNotificationRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateNotificationRequest`(
  in   notificationRequest_Id   bigint(20)
, in   notification_Id   bigint(20)
, in   framework_RequestGUID   VARCHAR(100)
, in   notification_Type   tinyint(4)
, in   req_Status tinyint(4)
, in   created_By   bigint(20) 
)
BEGIN
/*
 Author: James
 Date  : 11/04/2016
 Description : insert & update notification request Type (sms & email)
*/
if coalesce(notificationRequest_Id,0) =0 then
	insert into notificationRequest ( 
			  notificationId
			, frameworkRequestGUID
			, notificationType
            , status
			, createdBy
			, createdOn )
         values ( 
			  notification_Id
			, framework_RequestGUID
			, notification_Type
            , req_Status
			, created_By
            , utc_timestamp() ) 
		if row_count()>0 then
			set notificationRequest_Id=LAST_INSERT_ID() 
        end if
end if
	select notificationRequest_Id

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateNotificationRequestDetail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateNotificationRequestDetail`(
  in   notificationRequest_DetailId   bigint(20)
, in   notificationRequest_TypeId   bigint(20)
, in   candidate_UserId   bigint(20)
, in   first_Name   varchar(50)
, in   last_Name   varchar(50)
, in   email_Id   varchar(100)
, in   mobile_No   varchar(50)
, in   notificationRequestDetail_GUID   varchar(100)
, in   notification_status   tinyint(4)
, in   created_By   bigint(20)
)
BEGIN
/*
 Author: James
 Date  : 11/04/2016
 Description : insert & update notification request details (candidate wise status)
*/

if coalesce(notificationRequest_DetailId,0)=0 then
	insert into notificationRequestDetail( 
				  notificationRequestTypeId
				, candidateUserId
				, firstName
				, lastName
				, emailId
				, mobileNo
				, notificationRequestDetailGUID
				, status
				, createdBy
				, createdOn )
		values (  notificationRequest_TypeId
				, candidate_UserId
				, first_Name
				, last_Name
				, email_Id
				, mobile_No
				, notificationRequestDetail_GUID
				, notification_status
				, created_By
				, utc_timestamp())
			if row_count()>0 then
				set notificationRequest_DetailId =last_insert_id()
            end if			
else 
			update notificationRequestDetail set 
					  status =  notification_status
					, updatedBy =  created_By
					, updatedOn = utc_timestamp()
			where notificationRequestDetailId =  notificationRequest_DetailId 
			if row_count()>0 then
				set notificationRequest_DetailId =notificationRequest_DetailId
            end if	
end if
	select notificationRequest_DetailId
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateNotificationRequestDocument` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateNotificationRequestDocument`(
  in   notificationRequest_DocumentId   bigint(20)
, in   notificationRequest_Id   bigint(20)
, in   document_Name   varchar(200)
, in   document_Path   varchar(1000)
, in   documentMime_Type   varchar(6)
, in   e_Tag   varchar(1000)
, in   file_Status   tinyint(4)
, in   created_By   bigint(20)
, in   is_Deleted   bit(1)
, in   document_GUID varchar(50)
)
BEGIN
/*
 Author: James
 Date  : 11/04/2016
 Description : Inserting and Updating Notification Document
 FileStatus : 0 - inprogress 1-completed 2-corrupted
*/
if is_Deleted=0 then
	if coalesce(notificationRequest_DocumentId,0)=0 then
			insert into notificationRequestDocument (
					  notificationId
					, documentName
					, documentPath
					, documentMimeType
					, eTag
					, fileStatus
					, createdBy
					, createdOn
 					, isDeleted
                    , documentGUID)
				values (
					  notificationRequest_Id
					, document_Name
					, document_Path
					, documentMime_Type
					, e_Tag
					, file_Status
					, created_By
					, utc_timestamp()
                    , 0
                    , document_GUID)
				if row_count()>0 then
					set notificationRequest_DocumentId=last_insert_id() 
                end  if
    else
			update notificationRequestDocument set 
					  documentName =  coalesce(document_Name,documentName)
					, documentPath =  coalesce(document_Path,documentPath)
					, documentMimeType =  coalesce(documentMime_Type,documentMimeType)
					, eTag =  coalesce(e_Tag,eTag)
					, fileStatus =   file_Status  
					, updatedBy =  created_By
					, updatedOn =  utc_timestamp()
                    , documentGUID = document_GUID
			where  notificationRequestDocumentId =  notificationRequest_DocumentId 
			IF ROW_COUNT() > 0 THEN
					set notificationRequest_DocumentId=notificationRequest_DocumentId
			end if 
    end if
else
	update notificationRequestDocument set
		  isDeleted=1
		, updatedBy =  updatedBy
		, updatedOn =  updatedOn
	where notificationRequestDocumentId =  notificationRequest_DocumentId 
	IF ROW_COUNT() > 0 THEN
			set notificationRequest_DocumentId=notificationRequest_DocumentId
	end if 
end if

select notificationRequest_DocumentId

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateNotificationRequestType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateNotificationRequestType`(
  in   notificationRequest_TypeId   bigint(20)
, in   notificationRequest_Id   bigint(20)
, in   framework_RequestGUID   VARCHAR(100)
, in   typeOf_Notification   tinyint(4)
, in   req_Status tinyint(4)
, in   created_By   bigint(20) 
)
BEGIN
/*
 Author: James
 Date  : 11/04/2016
 Description : insert & update notification request Type (sms & email)
*/
if coalesce(notificationRequest_TypeId,0) =0 then
	insert into notificationRequestType ( 
			  notificationRequestId
			, frameworkRequestGUID
			, typeOfNotification
            , status
			, createdBy
			, createdOn )
         values ( 
			  notificationRequest_Id
			, framework_RequestGUID
			, typeOf_Notification
            , req_Status
			, created_By
            , utc_timestamp() ) 
		if row_count()>0 then
			set notificationRequest_TypeId=LAST_INSERT_ID() 
        end if
end if
	select notificationRequest_TypeId

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateQuoteRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateQuoteRequest`(

IN quoteRequest_Id bigint(20) , 
IN businessSite_Id bigint(20) ,
IN agencySiteIds nvarchar(5000) ,
IN jobProfile_Id bigint(20) ,
IN jobProfileHireRequest_Id bigint(20) ,
IN sendTo_QuoteBoard bit(1) ,
IN created_By bigint(20) ,
IN is_Deleted bit,
IN quote_Status tinyint

)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 20/01/2015
 Description :  Quote request creation
 call InsertUpdateQuoteRequest(0 , 69 ,"1,2,3" ,1 ,1 ,0 ,1 ,0)
*/

	declare agencySite_Id bigint


	if (is_Deleted =0) then
		if (quoteRequest_Id = 0) then
			insert into quoteRequest (businessSiteId ,jobProfileId ,jobProfileHireRequestId  ,sendToQuoteBoard  ,createdOn  ,createdBy ,isDeleted, quoteStatus)
			value (businessSite_Id ,jobProfile_Id ,jobProfileHireRequest_Id  ,sendTo_QuoteBoard ,utc_timestamp()  ,created_By ,is_Deleted, quote_Status)
			
            
			IF ROW_COUNT() > 0 THEN
				 set quoteRequest_Id = LAST_INSERT_ID() 
                 
                 if (agencySiteIds is not null) then
					DROP TABLE IF EXISTS tmpAgencySplit
					CREATE TEMPORARY TABLE tmpAgencySplit ( id bigint PRIMARY KEY auto_increment,variable VARCHAR(1000))

					SET @vars := agencySiteIds
					SET @vars := CONCAT("('", REPLACE(@vars, ",", "'),('"), "')")
					
					SET @sql := CONCAT('INSERT INTO tmpAgencySplit (variable) ', ' VALUES ', @vars)
					PREPARE stmt FROM @sql
					EXECUTE stmt
					DEALLOCATE PREPARE stmt
                    
					insert into quoteRequestAgencySite (quoteRequestId, agencySiteId, createdOn, createdBy, isDeleted, isNotified)
					select quoteRequest_Id, variable, utc_timestamp(), created_By, 0, 0 from tmpAgencySplit
                     
					drop table IF EXISTS tmpAgencySplit
				 end if
                
                 
                 select quoteRequest_Id
			end if
		else
			update quoteRequest set quoteStatus = quote_Status where quoteRequestId = quoteRequest_Id
		end if
    else
		update quoteRequest set isDeleted = is_Deleted where quoteRequestId = quoteRequest_Id
        
        IF ROW_COUNT() > 0 THEN
			select quoteRequest_Id
		end if
	end if
	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateQuoteRequestWfInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateQuoteRequestWfInstance`(
	IN	quoteRequestWfInstance_Id	bigint(20)
,	IN	workflowInstance_Id	bigint(20)
,	IN	businessSite_Id	bigint(20)
,	IN	quoteRequest_Id	bigint(20)
,	IN	created_By	bigint(20)
)
BEGIN
/*
	 Author: James
	 Date  : 25/02/2015
	 Description : insert update Quote Request workflow instance 
     call est_skillsconnect.InsertUpdateQuoteRequestWfInstance(0, 1, 2, 1, 3)

*/

if quoteRequestWfInstance_Id=0 then
	insert into quoteRequestWfInstance (
				workflowInstanceId
			,	businessSiteId
			,	quoteRequestId
			,	createdBy
			,	createdOn )
	values (	workflowInstance_Id
			,	businessSite_Id
			,	quoteRequest_Id
			,	created_By
			,	utc_timestamp()) 
            
     if row_count()>0 then
		set quoteRequestWfInstance_Id =last_insert_id()         
        select quoteRequestWfInstance_Id
     end if 
else
	update quoteRequestWfInstance set 
			workflowInstanceId	=	workflowInstance_Id
		,	businessSiteId	=	businessSite_Id
		,	quoteRequestId	=	quoteRequest_Id
	where	quoteRequestWfInstanceId	=	quoteRequestWfInstance_Id
    
    if row_count()>0 then        
        select quoteRequestWfInstance_Id
     end if 

end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateQuoteResponseWfInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateQuoteResponseWfInstance`(
	IN	quoteResponseWfInstance_Id	bigint(20)
,	IN	workflowInstance_Id	bigint(20)
,	IN	businessSite_Id	bigint(20)
,	IN	quoteResponse_Id	bigint(20)
,	IN	created_By	bigint(20)
)
BEGIN
/*
	 Author: James
	 Date  : 25/02/2015
	 Description : insert update Quote Response workflow instance 
*/

if quoteResponseWfInstance_Id=0 then
	insert into quoteResponseWfInstance(
			workflowInstanceId
		,	businessSiteId
		,	quoteResponseId
		,	createdBy
		,	createdOn )
	values (workflowInstance_Id
		,	businessSite_Id
		,	quoteResponse_Id
		,	created_By
		,	utc_timestamp()) 
        
        if row_count()>0 then
			set quoteResponseWfInstance_Id =last_insert_Id()
            
            select quoteResponseWfInstance_Id
        end if
        
        /*
else 
	update quoteResponseWfInstance set 
			workflowInstanceId	=	workflowInstance_Id
		,	businessSiteId	=	businessSite_Id
		,	quoteResponseId	=	quoteResponse_Id 
    where quoteResponseWfInstanceId	=	workflowInstance_Id 
      
        if row_count()>0 then
            select quoteResponseWfInstance_Id
        end if
*/
end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateRole`(
 IN role_Id bigint
,IN Site_Id bigint
,IN role_Name nvarchar(200)
,IN RoleCategory_Id tinyint
,IN created_By bigint(20) 
,IN language_Id bigint
,IN business_Id	bigint
)
BEGIN


/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Role for Business and HR agency
*/


		if (role_Id = 0) then
			
            insert into roleInfo (roleCategoryId,isSystemRole,isDeleted,createdBy,createdOn,businessId,createdBySiteId)
            values(RoleCategory_Id,0,0,created_By, utc_timestamp(),business_Id, Site_Id)
                        
            set role_Id =  LAST_INSERT_ID()
        
			insert into roleInfoLocale (roleId,languageId,roleName,createdBy,createdOn)
			values (role_Id,language_Id,role_Name,created_By, utc_timestamp())
              
            
            IF ROW_COUNT() > 0 THEN
                select role_Id
            END IF
            
		else
		
                                
			update roleInfoLocale rl inner join roleInfo r
			on rl.roleId=r.roleId set    
					 roleName = role_Name
					,rl.updatedBy = created_By
					,rl.updatedOn = utc_timestamp()
			where r.isSystemRole=0 and rl.roleId = role_Id and languageId=language_Id            
            
			IF ROW_COUNT() > 0 THEN
				select role_Id
            end if
		end if




END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateRosterAutoAssign` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateRosterAutoAssign`(
IN manager_Id bigint(20)
,IN businessSite_Id bigint(20)
,IN department_Id bigint(20)
,IN subClassification_Id bigint(20)
,IN prevStart_date date
,IN prevEnd_date date
,IN curStart_date date
,IN curEnd_date date
,IN assign_originalStaff bit(1)
,IN language_Id bigint(20)
,IN assign_Type tinyint
,IN save_Data bit

)
BEGIN 

/*
call est_skillsconnect_dev.InsertUpdateRosterAutoAssign(1369, 542, 286, 2, '2016-01-31', '2016-01-31', '2016-02-07', '2016-02-07', 0, 264, 1, 0)
-- assign_Type =1 - day	2 - week
*/

Declare total_Assigned bigint(20)
declare shiftId_From bigint(20)
declare shiftId_To bigint(20)

set @rown=0
set @shiftOfferId=0 
set @combId=''
set @candidateAcknowledgeReq=1
set @u_Uid =uuid()
set total_Assigned=0

-- @assign_Type =1 - day	2 - week
-- @search_Type=1 -- Get Errors, 2- update

 
     -- shift comparision 
 call InsertUpdateRosterAutoAssignProcess(@u_Uid,manager_Id,businessSite_Id,department_Id,subClassification_Id,prevStart_date,prevEnd_date,curStart_date,curEnd_date,assign_originalStaff,assign_Type)
 
 SET SQL_SAFE_UPDATES=0 
			update  candidateShiftOffer so inner join rosterCurrentWeekShift c
			on so.shiftOfferId=c.shiftOfferId
            inner join businessSite bs on bs.businessSiteId=so.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			set so.candidateId=c.prevCandidateId,so.status =60,so.updatedOn=utc_timestamp(),so.updatedBy=manager_Id
			where c.prevCandidateId<>0 and c.candidateId=0 and isAvailable=1 and save_Data =1 and totalOffer=0
            and DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)<so.shiftEndDateTime
            and c.uuid=@u_Uid
            set total_Assigned=row_count() 
            
            insert into  candidateGiveAwayRequests 
            (shiftOfferId,candidateId,status,candidateStatus,createdBy,createdOn)
            select  so.shiftOfferId,c.prevCandidateId,60,60,manager_Id,utc_timestamp() from   candidateShiftOffer so 
            inner join rosterCurrentWeekShift c on so.shiftOfferId=c.shiftOfferId            
			inner join businessSite bs on bs.businessSiteId=so.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			where c.prevCandidateId<>0 and c.candidateId=0 and isAvailable=1 and save_Data =1 and totalOffer=0
			and DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)<so.shiftEndDateTime
            and c.uuid=@u_Uid
            
            set shiftId_From= (select max(shiftOfferId) +1  from candidateShiftOffer)
            
            INSERT INTO candidateShiftOffer
			(candidateId,departmentId,subClassificationId,businessSiteId,shiftStartDateTime,shiftEndDateTime
				,actualShiftStartDateTime,actualShiftEndDateTime,STATUS,sourceModule,createdBy,createdOn
				, isShiftAcceptRequired, isTimeSheetSubmitRequired,isCantWork)
			select case when DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)<cs.shiftEndDateTime then coalesce(prevCandidateId,0) else 0 end as candidateId
				,cs.departmentId,cs.subClassificationId,cs.businessSiteId,shiftStartDateTime,shiftEndDateTime
				,shiftStartDateTime,shiftEndDateTime
                ,case when coalesce(prevCandidateId,0)<>0 and DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)<cs.shiftEndDateTime then 60 else 1 end as status,'ROSTER',manager_Id,utc_timestamp()
				,candidateAcknowledgeReq,approveHoursReq,0 from rosterCurrentWeekShift cs 
			inner join businessSettings bss on cs.businessSiteId=bss.businessSiteId AND cs.departmentId=bss.departmentId
			inner join businessSite bs on bs.businessSiteId=cs.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
            where shiftTemplateId<>0 and save_Data =1 and cs.uuid=@u_Uid
			
            set shiftId_To= (select max(shiftOfferId) from candidateShiftOffer)
            
			insert into  candidateGiveAwayRequests 
				(shiftOfferId,candidateId,status,candidateStatus,createdBy,createdOn)
			select so.shiftOfferId,so.candidateId,so.status,so.status,manager_Id,utc_timestamp() from candidateShiftOffer so 
			left join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and so.candidateId=cg.candidateId
			where so.status=60 and so.isDeleted=0 and so.candidateId<>0 and cg.shiftOfferId is null
            and save_Data =1
			set total_Assigned=coalesce(total_Assigned,0) + coalesce(row_count(),0) 

			select distinct  p.shiftOfferId,p.subClassificationId,jcl.jobSubClassification,p.shiftStartDateTime,p.shiftEndDateTime,null as CandidateId,null as firstName,null as lastName,errorCode as errorCode ,'Previous shift doesn’t exist' as Errormsg
			from rosterPreviousWeekShift p
			left join jobSubClassificationLocale jcl on p.subClassificationId=jcl.jobSubClassificationId and jcl.languageId=language_Id
			where p.errorCode=1 and p.uuid=@u_Uid
			union all
			select c.shiftOfferId,c.subClassificationId,jcl.jobSubClassification,c.shiftStartDateTime,c.shiftEndDateTime,c.prevCandidateId,u.firstName,u.lastName,2 as errorCode ,'Unavailable' as Errormsg 
			from rosterCurrentWeekShift c
			left join jobSubClassificationLocale jcl on c.subClassificationId=jcl.jobSubClassificationId and jcl.languageId=language_Id
			left join scUser u on u.userId=c.prevCandidateId
			where c.isAvailable=0 and c.uuid=@u_Uid   
			
            select total_Assigned as totalAssigned
			
            
            select so.shiftOfferId from  candidateShiftOffer so inner join rosterCurrentWeekShift c
			on so.shiftOfferId=c.shiftOfferId
            inner join businessSite bs on bs.businessSiteId=so.businessSiteId
			INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			where c.prevCandidateId<>0 and c.candidateId=0 and isAvailable=1 and save_Data =1 and totalOffer=0
            and DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE)<so.shiftEndDateTime
            and c.uuid=@u_Uid
            union 
            select shiftOfferId from candidateShiftOffer
			where shiftOfferId between shiftId_From  and shiftId_To
 
            
		delete from rosterCurrentWeekShift where uuid=@u_Uid     
		delete from rosterPreviousWeekShift where uuid=@u_Uid
	/*
		select * from rosterCurrentWeekShift where uuid=@u_Uid     
		select * from rosterPreviousWeekShift where uuid=@u_Uid*/
    SET SQL_SAFE_UPDATES=1  
    
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateRosterAutoAssignProcess` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateRosterAutoAssignProcess`(
 in u_Uid varchar(100)
,in manager_Id  bigint(20)
,in businessSite_Id  bigint(20)
,in department_Id  bigint(20)
,in subClassification_Id bigint(20)
,in prevStart_date date
,in prevEnd_date date
,in curStart_date date
,in curEnd_date date
,in assign_originalStaff bit(1)
,in assign_Type tinyint(4)
)
BEGIN
/*
 Author: James
 Date  : 08/03/2016
-- assign_Type =1 - day	2 - week
*/

set @rown=0
set @shiftOfferId=0 
set @combId='' 

		-- Inserting previous week shift data
	insert into rosterPreviousWeekShift   
    (uuid,shiftOfferId,businessSiteId,departmentId,subClassificationId,shiftStartDateTime,shiftEndDateTime,candidateId,STATUS)
	select distinct u_Uid, shiftOfferId,businessSiteId,departmentId,subClassificationId,shiftStartDateTime,shiftEndDateTime
		,case when assign_originalStaff=1 then coalesce(prevCandidate,candidateId) else candidateId end candidateId
		,case when assign_originalStaff=1 then coalesce(prevStatus,STATUS) else STATUS end shiftStatus
	from (
			SELECT so.shiftOfferId,so.candidateId,so.businessSiteId,so.departmentId,so.subClassificationId,so.shiftStartDateTime
				  ,so.shiftEndDateTime,so.STATUS,so.sourceModule,soh.candidateUserId as prevCandidate,soh.status as prevStatus
			FROM candidateShiftOffer so
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			left join (
					select * from( -- first assigned staff details for a shift
						SELECT so.shiftOfferId,soh.candidateUserId,2 as status
						 ,@rown :=if(@shiftOfferId =so.shiftOfferId,@rown +1,1) as rownum ,@shiftOfferId :=so.shiftOfferId
						FROM candidateShiftOffer so inner join candidateShiftOfferHistory soh on so.shiftOfferId=soh.shiftOfferId and soh.isDeleted=0
						INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
						INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
						WHERE DATE(so.shiftStartDateTime) between prevStart_date and prevEnd_date
						AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
						AND so.departmentId=department_Id AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId) AND so.STATUS NOT IN (19,33,36) 
						AND so.isDeleted=0
						order by so.shiftOfferId,soh.candidateShiftOfferHistoryId asc
						)a where rownum=1
					)soh
			on so.shiftOfferId=soh.shiftOfferId 
			WHERE DATE(so.shiftStartDateTime) between prevStart_date and prevEnd_date
				AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
				AND so.departmentId=department_Id AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId) AND so.STATUS NOT IN (19,33,36) AND so.isDeleted=0
				and so.sourceModule='ROSTER'		
	)a ORDER BY shiftStartDateTime

set @rown=0
set @shiftOfferId=0 
set @combId='' 

   -- Inserting current week shift data
	insert into rosterCurrentWeekShift   
    (uuid,shiftOfferId,businessSiteId,departmentId,subClassificationId,shiftStartDateTime,shiftEndDateTime,candidateId,STATUS,totalOffer,isFlexibleShiftTime)
	select distinct u_Uid,shiftOfferId,businessSiteId,departmentId,subClassificationId,shiftStartDateTime,shiftEndDateTime,candidateId  as candidateId,STATUS as shiftStatus,totalOffer,isFlexibleShiftTime
    from (
			SELECT so.shiftOfferId,so.candidateId,so.businessSiteId,so.departmentId,so.subClassificationId,so.shiftStartDateTime,so.shiftEndDateTime,so.STATUS,so.sourceModule,isFlexibleShiftTime
                  ,(select count(1) as tt from candidateGiveAwayRequests s where s.shiftOfferId=so.shiftOfferId)as totalOffer
			FROM candidateShiftOffer so
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			WHERE DATE(so.shiftStartDateTime) between curStart_date and curEnd_date
				AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
				AND so.departmentId=department_Id AND so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId) AND so.STATUS NOT IN (19,33,36) AND so.isDeleted=0
				and so.sourceModule='ROSTER'		
	)a ORDER BY shiftStartDateTime
    
	-- Shift Template data
    insert into rosterCurrentWeekShift   
    (uuid,shiftOfferId,businessSiteId,departmentId,subClassificationId,shiftStartDateTime,shiftEndDateTime,candidateId,STATUS,totalOffer,shiftTemplateId)
		select u_Uid, 0,a.businessSiteId,a.departmentId,subClassificationId,shiftStartDateTime,shiftEndDateTime,0,1,0,shiftTemplateId
 		 from (
			select bst.shiftTemplateId,bst.businessSiteId,bst.departmentId,bst.subClassificationId,dd.ss_Date,dd.ss_Day,bst.shiftStartTime,bst.shiftEndTime 
			,concat(dd.ss_Date,' ',shiftStartTime) as shiftStartDateTime
			,case when shiftStartTime>shiftEndTime then concat(date_add(dd.ss_Date, interval 1 day),' ',shiftEndTime) else concat(dd.ss_Date,' ',shiftEndTime) end as shiftEndDateTime
			from businessShiftTemplate  bst 
			inner join userRoleBusinessSite urbs on urbs.businessSiteId=bst.businessSiteId
			inner join userRole ur on ur.userRoleId=urbs.userRoleId
			and userId=manager_Id -- and date(so.shiftStartDateTime) between curStart_date and curEnd_date 
			and  bst.isDeleted=0 and urbs.isDeleted=0 and ur.IsDeleted=0
			and bst.businessSiteId=businessSite_Id and bst.departmentId=department_Id and bst.subClassificationId=coalesce(subClassification_Id,bst.subClassificationId)
			and case when assign_Type=1 then dayName(curEnd_date)=bst.weekDayName else 1=1 end 
			left join (
				select distinct  so.businessSiteId,so.departmentId,so.subClassificationId,date(so.shiftStartDateTime)shiftDate,dayname(so.shiftStartDateTime) shiftDay from candidateShiftOffer  so 
				inner join userRoleBusinessSite urbs on urbs.businessSiteId=so.businessSiteId
				inner join userRole ur on ur.userRoleId=urbs.userRoleId
				where userId=manager_Id and date(so.shiftStartDateTime) between curStart_date and curEnd_date 
				and so.sourceModule='ROSTER' and  so.isDeleted=0 and urbs.isDeleted=0 and ur.IsDeleted=0
				and so.businessSiteId=businessSite_Id and so.departmentId=department_Id and so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId)
			)so on bst.businessSiteId=so.businessSiteId and bst.departmentId=so.departmentId and bst.subClassificationId=so.subClassificationId and bst.weekDayName=so.shiftDay
			left join (
					select ss_date,dayName(ss_Date) as ss_Day,wdl.weekDayId from (
						select date_add(curStart_date ,interval weekDayId-1 day)ss_date from weekDay
					)a left join weekDayLocale wdl on wdl.weekDay=dayName(ss_Date) and wdl.languageId=264
                    where ss_date between curStart_date and curEnd_date )dd
			on bst.weekDayId=dd.weekDayId	
			where so.businessSiteId is null and coalesce(bst.subClassificationId,0)<>0 
		)a inner join businessSite bs on a.businessSiteId=bs.businessSiteId and bs.isDeleted=0
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		inner join businessSettings bss on a.businessSiteId=bss.businessSiteId and a.departmentId=bss.departmentId
		where DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)<shiftEndDateTime 
			
		   
    
   SET SQL_SAFE_UPDATES=0 
    
		update rosterCurrentWeekShift set dayId=case when assign_Type=1 then 1 else weekday(shiftstartDateTime)end where uuId=u_Uid
        update rosterPreviousWeekShift set dayId=case when assign_Type=1 then 1 else weekday(shiftstartDateTime)end where uuId=u_Uid
	    
	update rosterCurrentWeekShift set combId=concat(businessSiteId,'-',departmentId,'-',subClassificationId,'-',dayId,'-',time(shiftStartDateTime),'-',time(shiftEndDateTime))
    where uuId=u_Uid
	update rosterPreviousWeekShift set combId=concat(businessSiteId,'-',departmentId,'-',subClassificationId,'-',dayId,'-',time(shiftStartDateTime),'-',time(shiftEndDateTime))
    where uuId=u_Uid
  
    update rosterCurrentWeekShift c inner join rosterPreviousWeekShift p
    on  c.combId=p.combId and c.candidateId=p.candidateId and c.uuid=p.uuid
    set prevShiftOfferId=p.shiftOfferId,c.rowId=p.shiftOfferId,p.rowId=p.shiftOfferId
    where c.candidateId=p.candidateId and c.candidateId<>0 and  c.uuId=u_Uid 
	 
	update rosterPreviousWeekShift  p inner join (
			select prevShiftOfferId,count(1) from rosterCurrentWeekShift
			where prevShiftOfferId is not null and  uuId=u_Uid
			group by prevShiftOfferId having count(1)>1)a
	 on p.shiftOfferId=a.prevShiftOfferId and uuId=u_Uid
     set p.rowId=null
     
     update  rosterCurrentWeekShift c inner join rosterPreviousWeekShift p
     on c.prevShiftOfferId=p.shiftOfferId and c.uuId=p.uuid
     set c.prevShiftOfferId=null,c.rowId=null
     where p.rowId is null and c.uuId=u_Uid 
     
     update  rosterPreviousWeekShift p left join rosterCurrentWeekShift c
     on p.shiftOfferId=c.prevShiftOfferId and c.uuId=p.uuid
     set  p.rowId=null
	 where p.rowId is not null and c.rowId is null and p.uuid=u_Uid
     
set @rown=0 
set @combId=''
	-- rowId
	update  rosterPreviousWeekShift p inner join (
		 select rosterPreviousWeekShiftId,shiftOfferId,combId,@rown :=if(@combId =combId,@rown +1,1) as rownum ,@combId :=combId from rosterPreviousWeekShift
		 where rowId is null and uuid=u_Uid
         order by combId ) b
	on p.shiftOfferId=b.shiftOfferId and p.rosterPreviousWeekShiftId=b.rosterPreviousWeekShiftId
	set rowId=b.rownum
    where p.uuid=u_Uid
	      
set @rown=0 
set @combId=''	
	-- rowId
	update  rosterCurrentWeekShift p inner join (
		 select rosterCurrentWeekShiftId,shiftOfferId,combId,@rown :=if(@combId =combId,@rown +1,1) as rownum ,@combId :=combId from rosterCurrentWeekShift
		 where rowId is null and uuid=u_Uid
         order by combId,candidateId ) b
	on p.shiftOfferId=b.shiftOfferId and p.rosterCurrentWeekShiftId=b.rosterCurrentWeekShiftId
	set rowId=b.rownum
    where p.uuid=u_Uid
    
    -- update shiftOfferId
    update rosterCurrentWeekShift c inner join rosterPreviousWeekShift p 
    on p.combId=c.combId and p.rowId=c.rowId and c.uuid=p.uuid
    set prevCandidateId=p.candidateId,prevShiftOfferId=p.shiftOfferId
    where c.candidateId=0 and p.candidateId<>0 and c.uuid=u_Uid
    
    -- unavailable
    update rosterCurrentWeekShift set isAvailable= CheckCandidateAvailability(prevCandidateId,shiftOfferId,shiftStartDateTime,shiftEndDateTime)
    where prevCandidateId is not null and uuid=u_Uid 
	
    update  rosterCurrentWeekShift c inner join rosterPreviousWeekShift  p
    on c.prevCandidateId=p.candidateId and c.dayId=p.dayId and c.uuid=p.uuid
    and time(c.shiftEndDateTime)>time(p.shiftStartDateTime) AND time(c.shiftStartDateTime)<time(p.shiftEndDateTime)
    set isAvailable=0
    where c.prevShiftOfferId<>p.shiftOfferId and c.uuid=u_Uid 
   -- Previous shift doesnt exists 
    update  rosterPreviousWeekShift p left join rosterCurrentWeekShift c
    on p.combId=c.combId and p.rowId=c.rowId and c.uuid=p.uuid
    set errorCode=1
    where c.shiftOfferId is null and p.uuid=u_Uid   
  
  SET SQL_SAFE_UPDATES=1  
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateRosterGeneralSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateRosterGeneralSettings`(
IN setting_Id BIGINT(20),
in businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
in candidate_AcknowledgeReq bit,
in approve_HoursReq bit,
in maxTime_Confirm varchar(20),
in allow_Swap bit,
in req_ManagerApproval bit,
in use_OvertimeIndicator bit,
in fullTime_OTLimit int,
in partTime_OTLimit INT,
in casual_OTLimit INT,
in setting_Status tinyint(4),
in created_By BIGINT(20),
in updated_By BIGINT(20),
in is_Deleted bit,
IN roster_Breaks bit(1),
IN roster_BreakRules bit(1),
in allow_CantWork bit(1),
in last_RosterDay bit(1)

)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert/update general settings
*/
	IF approve_HoursReq=0 THEN
		SET maxTime_Confirm=NULL
	END IF
	
	IF use_OvertimeIndicator=0 THEN
		SET fullTime_OTLimit=NULL
		SET partTime_OTLimit=NULL
		SET casual_OTLimit=NULL
	END IF
	
	IF setting_Id=0 THEN
		IF NOT EXISTS(SELECT 1 FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id) THEN
			INSERT INTO businessSettings(businessSiteId,departmentId,candidateAcknowledgeReq,approveHoursReq,
				maxTimeToConfirm,allowSwap,reqManagerApproval,useOvertimeIndicator,fullTimeOTLimit,
				partTimeOTLimit,casualOTLimit,settingStatus,createdBy,createdOn,rosterBreaks,rosterBreakRules, allowCantWork,lastRosterDay
                )
			VALUES(businessSite_Id,department_Id,candidate_AcknowledgeReq,approve_HoursReq,
				maxTime_Confirm,allow_Swap,req_ManagerApproval,use_OvertimeIndicator,fullTime_OTLimit,
				partTime_OTLimit,casual_OTLimit,1,created_By,utc_timestamp(),roster_Breaks,roster_BreakRules, allow_CantWork,last_RosterDay)
				
			SET setting_Id = LAST_INSERT_ID()
		END IF
	ELSEIF is_Deleted=0 THEN
		UPDATE businessSettings SET businessSiteId=businessSite_Id,departmentId=department_Id,candidateAcknowledgeReq=candidate_AcknowledgeReq,
			approveHoursReq=approve_HoursReq,maxTimeToConfirm=maxTime_Confirm,allowSwap=allow_Swap,reqManagerApproval=req_ManagerApproval,
			useOvertimeIndicator=use_OvertimeIndicator,fullTimeOTLimit=fullTime_OTLimit,partTimeOTLimit=partTime_OTLimit,
			casualOTLimit=casual_OTLimit,updatedBy=updated_By,updatedOn=utc_timestamp(),
            rosterBreaks=roster_Breaks,rosterBreakRules=roster_BreakRules,
            allowCantWork = allow_CantWork,
            lastRosterDay=last_RosterDay
		WHERE settingId=setting_Id
	ELSE
		DELETE FROM businessSettings WHERE settingId=setting_Id
	END IF
	
	SELECT setting_Id AS settingId,1 AS STATUS
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateRosterShiftBreaks` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateRosterShiftBreaks`(
IN shiftbreak_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN break_StartDateTime DATETIME,
IN break_EndDateTime DATETIME,
in break_Type varchar(10),
IN is_Deleted BIT
,IN created_By	bigint(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert/update shift breaks
*/
	DECLARE status_Id BIGINT(20)
	DECLARE timeSheet_Id BIGINT(20)
	
	SELECT STATUS INTO status_Id FROM candidateShiftOffer WHERE shiftOfferId=shiftOffer_Id
	
	IF shiftbreak_Id=0 THEN
		-- set shiftOffer_Id=shiftOffer_Id-1
		-- set shiftOffer_Id=shiftOffer_Id+639
		SELECT MAX(shiftbreakId) INTO shiftbreak_Id FROM candidateShiftBreaks
			
		IF shiftbreak_Id IS NULL OR shiftbreak_Id=0 THEN
			SET shiftbreak_Id=1
		ELSE
			SET shiftbreak_Id=shiftbreak_Id+1
		END IF
		
		INSERT INTO candidateShiftBreaks(shiftbreakId,shiftOfferId,startTime,endTime,breakType,createdBy,createdOn)
		VALUES (shiftbreak_Id,shiftOffer_Id,break_StartDateTime,break_EndDateTime,break_Type,created_By,utc_timestamp())
		
		IF status_Id=2 THEN
		
			SELECT timeSheetId INTO timeSheet_Id FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
			
			INSERT INTO candidateTimesheetBreak(timeSheetId,startTime,endTime,breakType)
			SELECT timeSheet_Id,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftbreakId=shiftbreak_Id
		END IF
	ELSEIF is_Deleted=0 THEN
		UPDATE candidateShiftBreaks SET shiftOfferId=shiftOffer_Id,startTime=break_StartDateTime,
			endTime=break_EndDateTime 
            ,updatedBy=created_By
			,updatedOn=utc_timestamp()
            WHERE shiftbreakId=shiftbreak_Id
            
	ELSE
		UPDATE candidateShiftBreaks SET isDeleted=1 WHERE shiftbreakId=shiftbreak_Id
	END IF
	
	SELECT shiftbreak_Id AS shiftbreakId,1 AS STATUS
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateRosterShiftOffer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateRosterShiftOffer`(
IN shiftOffer_Id BIGINT(20),
in candidate_Id varchar(5000),
in jobProfile_Id BIGINT(20),
in department_Id BIGINT(20),
in subClassification_Id BIGINT(20),
in businessSite_Id BIGINT(20),
in shift_StartDateTime datetime,
in shift_EndDateTime DATETIME,
in offer_status varchar(50),
in offer_comment VARCHAR(2000),
in source_Module VARCHAR(20),
in created_By BIGINT(20),
in updated_By BIGINT(20),
in is_Deleted bit,
in isFlexible_ShiftTime bit(1),
in shiftEndTime_Type TINYINT(4),
in shiftEndTime_Value varchar(30)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert/update shift offers
 shiftEndTimeType And ShiftEndTypeValues : 1 - Close
										   2 - Time(2:00PM)
                                           3 - Custom Time
*/
	DECLARE status_Id TINYINT(4)
	DECLARE isCandidateAckReq BIT
    DECLARE is_TimeSheetSubmitRequired BIT
	DECLARE newshiftOffer_Id BIGINT(20)
	DECLARE original_CandidateId BIGINT(20)
	DECLARE timeSheet_Id BIGINT(20)
	DECLARE exchanged_shiftOfferId BIGINT(20)
	DECLARE current_statusId BIGINT(20)
	DECLARE original_ShiftStartDateTime DATETIME
	DECLARE original_ShiftEndDateTime DATETIME
	DECLARE old_status_Id TINYINT(4)
	DECLARE timeDiff_InMinutes INT(11)
    Declare unassignedCandidateId bigint
    Declare isCant_work bit(1)
    declare total_Candidates int
    declare declined_count int
	DECLARE message VARCHAR(20)
	Declare candidate_userId_Single bigint(20)
	SET SQL_SAFE_UPDATES=0
	
    set isCant_work=(select isCantWork from candidateShiftOffer where shiftOfferId=shiftOffer_Id)
    set isCant_work=coalesce(isCant_work,0) 
	set candidate_Id=coalesce(candidate_Id,0)
    set old_status_Id=(select status from candidateShiftOffer where shiftOfferId=shiftOffer_Id)
    
    
    delete from candidateGiveAwayRequests 
	where shiftOfferId in(    
			select shiftOfferId from candidateShiftOffer
			where shiftOfferId =shiftOffer_Id and status in (32,28))
    
    if exists( select shiftOfferId from candidateShiftOffer
		where shiftOfferId=shiftOffer_Id and status in(2,4,7,9,15,16,19,20,22,24,25,26,27,28,29,31,32,33,48,14,17,21,22,30,36,48,61)
        and offer_status in('PENDING','NOTNOTIFIED') and candidateId<>0) then 
	SET message='ShiftAccepted'
    
    else
				if old_status_Id=10 and offer_status in('PENDING','LASTMINUTESHIFTREQUEST','SICKREQUESTED','STAFFREQUESTED','NOTNOTIFIED') then
					call InsertCandidateShiftCancel(shiftOffer_Id,10,null,created_By,null,null) 
				end if				
				if subClassification_Id=0 then
					SELECT subClassificationId INTO subClassification_Id FROM candidateShiftOffer WHERE shiftofferId=shiftOffer_Id
				end if

				select count(1) tt into total_Candidates  from (    
						select userId from scUser where find_in_set(userId,candidate_Id)
						union 
						select candidateId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id)a
				  
						select count(candidateId) as tt into declined_count from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateStatus=3
					   set declined_count=coalesce(declined_count,0)
					   
				SET message='SUCCESS'
				SELECT candidateAcknowledgeReq,approveHoursReq INTO isCandidateAckReq,is_TimeSheetSubmitRequired FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
				IF   total_Candidates=1 then
						select userId into candidate_userId_Single  from (    
								select userId from scUser where find_in_set(userId,candidate_Id)
								union select candidateId as userId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id)a
				  
						IF offer_status in ('PENDING','FORCEOFFER') AND subClassification_Id<>0 and isCandidateAckReq=b'0' and declined_count=0 THEN
								SET offer_status='ACCEPTED'
						END IF
						if offer_status in ('PENDING') and old_status_Id in(62) then
							SET offer_status='FORCEOFFER'
                        end if
                    
				END IF         
				set candidate_userId_Single=coalesce(candidate_userId_Single,0)
				SELECT statusId INTO status_Id FROM statusLookup WHERE statusName=offer_status
				
				IF offer_comment='' THEN
					SET offer_comment=NULL
				END IF

			select tz.timeDiffInMinutes  into timeDiff_InMinutes
			from businessSite bs INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			where businessSiteId=businessSite_Id 

			-- IF DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)<shift_EndDateTime THEN
				IF shiftOffer_Id=0 THEN
					IF NOT EXISTS(SELECT 1 FROM candidateShiftOffer WHERE candidateId=candidate_Id AND shiftStartDateTime=shift_StartDateTime AND shiftEndDateTime=shift_EndDateTime and isDeleted=0) OR candidate_Id=0 THEN
						
						INSERT INTO candidateShiftOffer(candidateId,jobProfileId,departmentId,subClassificationId,
							businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue,STATUS,COMMENT,sourceModule,createdBy,createdOn, isShiftAcceptRequired, isTimeSheetSubmitRequired,isCantWork)
						VALUES(candidate_userId_Single,NULL,department_Id,subClassification_Id,
							businessSite_Id,shift_StartDateTime,shift_EndDateTime,shift_StartDateTime,shift_EndDateTime,isFlexible_ShiftTime,shiftEndTime_Type,shiftEndTime_Value,status_Id,offer_comment,source_Module,created_By,utc_timestamp(), isCandidateAckReq, is_TimeSheetSubmitRequired,isCant_Work)
						
						set shiftOffer_Id=last_insert_id() 
						call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,status_Id,created_By)
						  
						IF offer_status='ACCEPTED' THEN
							INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
							  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
							  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
							VALUES
							  (shiftOffer_Id,candidate_userId_Single,1,NULL,NULL,NULL,NULL,candidate_userId_Single,utc_timestamp(),candidate_userId_Single,utc_timestamp()) 
						END IF
					ELSE
						SET message='ALREADYEXISTS'
					END IF
				ELSEIF is_Deleted=0 THEN
						SELECT so.candidateId,exchangedShiftOfferId,STATUS,shiftStartDateTime,shiftEndDateTime
						INTO original_CandidateId,exchanged_shiftOfferId,current_statusId,original_ShiftStartDateTime,original_ShiftEndDateTime
						FROM candidateShiftOffer so
						WHERE so.shiftofferId=shiftOffer_Id
						
						IF original_CandidateId=candidate_userId_Single THEN
							 
								IF offer_status='ACCEPTED' THEN
									UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
									businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,COMMENT=offer_comment,
									updatedBy=updated_By,updatedOn=utc_timestamp(),STATUS=2,isFlexibleShiftTime=coalesce(isFlexible_ShiftTime,isFlexibleShiftTime),shiftEndTimeType=shiftEndTime_Type,shiftEndTimeValue=shiftEndTime_Value
									WHERE shiftOfferId=shiftOffer_Id
									-- /*
									INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
									  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
									  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
									VALUES
									  (shiftOffer_Id,/*shift_StartDateTime,shift_EndDateTime,*/
										candidate_userId_Single,1,NULL,NULL,NULL,NULL,
										candidate_userId_Single,utc_timestamp(),candidate_userId_Single,utc_timestamp()
									  ) 
									-- */
									DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
								ELSE						
											UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
											businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=status_Id,COMMENT=offer_comment,
											updatedBy=updated_By,updatedOn=utc_timestamp(),isFlexibleShiftTime=coalesce(isFlexible_ShiftTime,isFlexibleShiftTime),shiftEndTimeType=shiftEndTime_Type,shiftEndTimeValue=shiftEndTime_Value
											WHERE shiftOfferId=shiftOffer_Id
											
											call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,1,created_By)
								END IF
								 
							ELSE
								-- SELECT timeSheetId INTO timeSheet_Id FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
											
									DELETE FROM candidateTimesheetBreak WHERE timeSheetId in(
										SELECT timeSheetId   FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id)   
															
									DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
			 
								
								IF offer_status='ACCEPTED' THEN
										UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
										businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=2,COMMENT=offer_comment,
										updatedBy=updated_By,updatedOn=utc_timestamp(),isNotified=0,isFlexibleShiftTime=coalesce(isFlexible_ShiftTime,isFlexibleShiftTime),shiftEndTimeType=shiftEndTime_Type,shiftEndTimeValue=shiftEndTime_Value
										WHERE shiftOfferId=shiftOffer_Id
										--  /*
										INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
										  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
										  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
										VALUES
										  (shiftOffer_Id,/*shift_StartDateTime,shift_EndDateTime,*/
											candidate_userId_Single,1,NULL,NULL,NULL,NULL,
											candidate_userId_Single,utc_timestamp(),candidate_userId_Single,utc_timestamp()
										  ) 
										 --  */
										 DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
								ELSE
										if 	status_Id in (4,38,40,46) then 
										
											UPDATE candidateShiftOffer SET  departmentId=department_Id,subClassificationId=subClassification_Id,
											businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=status_Id,COMMENT=offer_comment,
											updatedBy=updated_By,updatedOn=utc_timestamp(),isFlexibleShiftTime=coalesce(isFlexible_ShiftTime,isFlexibleShiftTime),shiftEndTimeType=shiftEndTime_Type,shiftEndTimeValue=shiftEndTime_Value -- ,isNotified=0
											WHERE shiftOfferId=shiftOffer_Id  
											
											call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,1,created_By)
										else 
											UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
											businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=status_Id,COMMENT=offer_comment,
											updatedBy=updated_By,updatedOn=utc_timestamp(),isFlexibleShiftTime=coalesce(isFlexible_ShiftTime,isFlexibleShiftTime),shiftEndTimeType=shiftEndTime_Type,shiftEndTimeValue=shiftEndTime_Value,isNotified=0
											WHERE shiftOfferId=shiftOffer_Id
											
											call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,1,created_By)
										end if
								END IF 
							END IF 		
					 
						-- END IF
				ELSE
					UPDATE candidateShiftOffer SET isDeleted=1,updatedBy=updated_By,updatedOn=utc_timestamp() WHERE shiftOfferId=shiftOffer_Id
					
					DELETE FROM candidateTimesheetBreak WHERE timeSheetId in(
						SELECT timeSheetId   FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id)   
											
					DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
			 
				END IF 
					UPDATE candidateShiftOffer SET sourceModule=coalesce(source_Module,sourceModule),isNotified=case when status_Id=61 then 0 else isNotified end
					WHERE shiftOfferId=shiftOffer_Id
					
					update candidateGiveAwayRequests set status =18
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=4
				
					update candidateGiveAwayRequests set status =39
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=38
					
					update candidateGiveAwayRequests set status =41
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=40
					
					update candidateGiveAwayRequests set status =49
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=46        
				
					select count(candidateId) as tt into declined_count from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateStatus=3
					set declined_count=coalesce(declined_count,0)
				   -- select declined_count
					UPDATE candidateShiftOffer SET  isNotified=0,status=1
					WHERE shiftOfferId=shiftOffer_Id and candidateId=0 and total_Candidates=0
					
                    update candidateShiftOffer so 
					inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and cg.status=60
					set so.status=60
					where so.shiftOfferId=shiftOffer_Id and so.status =1
                    
				if total_Candidates =declined_count and total_Candidates<>0 then
					UPDATE candidateShiftOffer SET  STATUS=3,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=1
					
					UPDATE candidateShiftOffer SET  STATUS=32,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=4
					
					UPDATE candidateShiftOffer SET  STATUS=12,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=38
							
					UPDATE candidateShiftOffer SET  STATUS=42,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=40
					
					UPDATE candidateShiftOffer SET  STATUS=47,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=46        
				end if
		end if	 
	SET SQL_SAFE_UPDATES=1
	
	IF message='SUCCESS' THEN
		SELECT shiftOffer_Id AS shiftOfferId,1 AS STATUS,message AS message 
	ELSE
		SELECT shiftOffer_Id AS shiftOfferId,0 AS STATUS,message AS message  
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateRosterShiftOffersRev` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateRosterShiftOffersRev`(
IN shiftOffer_Id BIGINT(20),
in candidate_Id varchar(5000),
in jobProfile_Id BIGINT(20),
in department_Id BIGINT(20),
in subClassification_Id BIGINT(20),
in businessSite_Id BIGINT(20),
in shift_StartDateTime datetime,
in shift_EndDateTime DATETIME,
in offer_status varchar(50),
in offer_comment VARCHAR(2000),
in source_Module VARCHAR(20),
in created_By BIGINT(20),
in updated_By BIGINT(20),
in is_Deleted bit)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert/update shift offers
*/
	DECLARE status_Id TINYINT(4)
	DECLARE isCandidateAckReq BIT
    DECLARE is_TimeSheetSubmitRequired BIT
	DECLARE newshiftOffer_Id BIGINT(20)
	DECLARE original_CandidateId BIGINT(20)
	DECLARE timeSheet_Id BIGINT(20)
	DECLARE exchanged_shiftOfferId BIGINT(20)
	DECLARE current_statusId BIGINT(20)
	DECLARE original_ShiftStartDateTime DATETIME
	DECLARE original_ShiftEndDateTime DATETIME
	DECLARE old_status_Id TINYINT(4)
	DECLARE timeDiff_InMinutes INT(11)
    Declare unassignedCandidateId bigint
    Declare isCant_work bit(1)
    declare total_Candidates int
    declare declined_count int
	DECLARE message VARCHAR(20)
	Declare candidate_userId_Single bigint(20)
	SET SQL_SAFE_UPDATES=0
	
    set isCant_work=(select isCantWork from candidateShiftOffer where shiftOfferId=shiftOffer_Id)
    set isCant_work=coalesce(isCant_work,0) 
	set candidate_Id=coalesce(candidate_Id,0)
    set old_status_Id=(select status from candidateShiftOffer where shiftOfferId=shiftOffer_Id)
    
    delete from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and status=21
    
    if exists( select shiftOfferId from candidateShiftOffer
		where shiftOfferId=shiftOffer_Id and status in(2,4,7,9,15,16,19,20,22,24,25,26,27,28,29,31,32,33,48,14,17,21,22,30,36,48,61)
        and offer_status in('PENDING','NOTNOTIFIED') and candidateId<>0) then 
	SET message='ShiftAccepted'
    
    else
				if old_status_Id=10 and offer_status in('PENDING','LASTMINUTESHIFTREQUEST','SICKREQUESTED','STAFFREQUESTED','NOTNOTIFIED') then
					call InsertCandidateShiftCancel(shiftOffer_Id,10,null,created_By,null,null) 
				end if				
				if subClassification_Id=0 then
					SELECT subClassificationId INTO subClassification_Id FROM candidateShiftOffer WHERE shiftofferId=shiftOffer_Id
				end if

				select count(1) tt into total_Candidates  from (    
						select userId from scUser where find_in_set(userId,candidate_Id)
						union 
						select candidateId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id)a
				  
						select count(candidateId) as tt into declined_count from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateStatus=3
					   set declined_count=coalesce(declined_count,0)
					   
				SET message='SUCCESS'
				SELECT candidateAcknowledgeReq,approveHoursReq INTO isCandidateAckReq,is_TimeSheetSubmitRequired FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
				IF   total_Candidates=1 then
						select userId into candidate_userId_Single  from (    
								select userId from scUser where find_in_set(userId,candidate_Id)
								union select candidateId as userId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id)a
				  
						IF offer_status in ('PENDING','FORCEOFFER') AND subClassification_Id<>0 and isCandidateAckReq=b'0' and declined_count=0 THEN
								SET offer_status='ACCEPTED'
						END IF
						if offer_status in ('PENDING') and old_status_Id in(62) then
							SET offer_status='FORCEOFFER'
                        end if
                    
				END IF         
				set candidate_userId_Single=coalesce(candidate_userId_Single,0)
				SELECT statusId INTO status_Id FROM statusLookup WHERE statusName=offer_status
				
				IF offer_comment='' THEN
					SET offer_comment=NULL
				END IF

			select tz.timeDiffInMinutes  into timeDiff_InMinutes
			from businessSite bs INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
			where businessSiteId=businessSite_Id 

			-- IF DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)<shift_EndDateTime THEN
				IF shiftOffer_Id=0 THEN
					IF NOT EXISTS(SELECT 1 FROM candidateShiftOffer WHERE candidateId=candidate_Id AND shiftStartDateTime=shift_StartDateTime AND shiftEndDateTime=shift_EndDateTime and isDeleted=0) OR candidate_Id=0 THEN
						
						INSERT INTO candidateShiftOffer(candidateId,jobProfileId,departmentId,subClassificationId,
							businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,STATUS,COMMENT,sourceModule,createdBy,createdOn, isShiftAcceptRequired, isTimeSheetSubmitRequired,isCantWork)
						VALUES(candidate_userId_Single,NULL,department_Id,subClassification_Id,
							businessSite_Id,shift_StartDateTime,shift_EndDateTime,shift_StartDateTime,shift_EndDateTime,status_Id,offer_comment,source_Module,created_By,utc_timestamp(), isCandidateAckReq, is_TimeSheetSubmitRequired,isCant_Work)
						
						set shiftOffer_Id=last_insert_id() 
						call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,status_Id,created_By)
						  
						IF offer_status='ACCEPTED' THEN
							INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
							  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
							  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
							VALUES
							  (shiftOffer_Id,candidate_userId_Single,1,NULL,NULL,NULL,NULL,candidate_userId_Single,utc_timestamp(),candidate_userId_Single,utc_timestamp()) 
						END IF
					ELSE
						SET message='ALREADYEXISTS'
					END IF
				ELSEIF is_Deleted=0 THEN
						SELECT so.candidateId,exchangedShiftOfferId,STATUS,shiftStartDateTime,shiftEndDateTime
						INTO original_CandidateId,exchanged_shiftOfferId,current_statusId,original_ShiftStartDateTime,original_ShiftEndDateTime
						FROM candidateShiftOffer so
						WHERE so.shiftofferId=shiftOffer_Id
						
						IF original_CandidateId=candidate_userId_Single THEN
							 
								IF offer_status='ACCEPTED' THEN
									UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
									businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,COMMENT=offer_comment,
									updatedBy=updated_By,updatedOn=utc_timestamp(),STATUS=2
									WHERE shiftOfferId=shiftOffer_Id
									-- /*
									INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
									  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
									  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
									VALUES
									  (shiftOffer_Id,/*shift_StartDateTime,shift_EndDateTime,*/
										candidate_userId_Single,1,NULL,NULL,NULL,NULL,
										candidate_userId_Single,utc_timestamp(),candidate_userId_Single,utc_timestamp()
									  ) 
									-- */
									DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
								ELSE						
											UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
											businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=status_Id,COMMENT=offer_comment,
											updatedBy=updated_By,updatedOn=utc_timestamp()
											WHERE shiftOfferId=shiftOffer_Id
											
											call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,1,created_By)
								END IF
								 
							ELSE
								-- SELECT timeSheetId INTO timeSheet_Id FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
											
									DELETE FROM candidateTimesheetBreak WHERE timeSheetId in(
										SELECT timeSheetId   FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id)   
															
									DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
			 
								
								IF offer_status='ACCEPTED' THEN
										UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
										businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=2,COMMENT=offer_comment,
										updatedBy=updated_By,updatedOn=utc_timestamp(),isNotified=0
										WHERE shiftOfferId=shiftOffer_Id
										--  /*
										INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
										  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
										  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
										VALUES
										  (shiftOffer_Id,/*shift_StartDateTime,shift_EndDateTime,*/
											candidate_userId_Single,1,NULL,NULL,NULL,NULL,
											candidate_userId_Single,utc_timestamp(),candidate_userId_Single,utc_timestamp()
										  ) 
										 --  */
										 DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
								ELSE
										if 	status_Id in (4,38,40,46) then 
										
											UPDATE candidateShiftOffer SET  departmentId=department_Id,subClassificationId=subClassification_Id,
											businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=status_Id,COMMENT=offer_comment,
											updatedBy=updated_By,updatedOn=utc_timestamp() -- ,isNotified=0
											WHERE shiftOfferId=shiftOffer_Id  
											
											call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,1,created_By)
										else 
											UPDATE candidateShiftOffer SET candidateId=candidate_userId_Single,departmentId=department_Id,subClassificationId=subClassification_Id,
											businessSiteId=businessSite_Id,shiftStartDateTime=shift_StartDateTime,shiftEndDateTime=shift_EndDateTime,actualShiftStartDateTime=shift_StartDateTime,actualShiftEndDateTime=shift_EndDateTime,STATUS=status_Id,COMMENT=offer_comment,
											updatedBy=updated_By,updatedOn=utc_timestamp()  ,isNotified=0
											WHERE shiftOfferId=shiftOffer_Id
											
											call InsertUpdateCandidateGiveAwayRequests (shiftOffer_Id,candidate_Id,status_Id,1,created_By)
										end if
								END IF 
							END IF 		
					 
						-- END IF
				ELSE
					UPDATE candidateShiftOffer SET isDeleted=1,updatedBy=updated_By,updatedOn=utc_timestamp() WHERE shiftOfferId=shiftOffer_Id
					
					DELETE FROM candidateTimesheetBreak WHERE timeSheetId in(
						SELECT timeSheetId   FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id)   
											
					DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
			 
				END IF 
					UPDATE candidateShiftOffer SET sourceModule=coalesce(source_Module,sourceModule),isNotified=case when status_Id=61 then 0 else isNotified end
					WHERE shiftOfferId=shiftOffer_Id
					
					update candidateGiveAwayRequests set status =18
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=4
				
					update candidateGiveAwayRequests set status =39
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=38
					
					update candidateGiveAwayRequests set status =41
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=40
					
					update candidateGiveAwayRequests set status =49
					where shiftOfferId=shiftOffer_Id and find_in_set(candidateId,candidate_Id) and status=46        
				
					select count(candidateId) as tt into declined_count from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateStatus=3
					set declined_count=coalesce(declined_count,0)
				   -- select declined_count
					UPDATE candidateShiftOffer SET  isNotified=0,status=1
					WHERE shiftOfferId=shiftOffer_Id and candidateId=0 and total_Candidates=0
					
                    update candidateShiftOffer so 
					inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and cg.status=60
					set so.status=60
					where so.shiftOfferId=shiftOffer_Id and so.status =1
                    
				if total_Candidates =declined_count and total_Candidates<>0 then
					UPDATE candidateShiftOffer SET  STATUS=3,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=1
					
					UPDATE candidateShiftOffer SET  STATUS=32,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=4
					
					UPDATE candidateShiftOffer SET  STATUS=12,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=38
							
					UPDATE candidateShiftOffer SET  STATUS=42,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=40
					
					UPDATE candidateShiftOffer SET  STATUS=47,updatedBy=updated_By,updatedOn=utc_timestamp() 
					WHERE shiftOfferId=shiftOffer_Id and status=46        
				end if
		end if	 
	SET SQL_SAFE_UPDATES=1
	
	IF message='SUCCESS' THEN
		SELECT shiftOffer_Id AS shiftOfferId,1 AS STATUS,message AS message 
	ELSE
		SELECT shiftOffer_Id AS shiftOfferId,0 AS STATUS,message AS message  
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateShiftBreakRulesSettings` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateShiftBreakRulesSettings`(
IN generalSettings_Id BIGINT(20),
IN breakRule_Id BIGINT(20),
in businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id int,
in long_BreakDuration int,
in short_BreakDuration int,
in min_ShortShiftHours int,
in max_ShortShiftHours int,
in min_MediumShiftHours int,
in max_MediumShiftHours int,
in min_LongShiftHours int,
in max_LongShiftHours INT,
in longer_ShiftHours INT,
in created_By BIGINT(20),
in updated_By BIGINT(20),
in is_Deleted bit)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Insert/update shift break rules settings
*/
	IF breakRule_Id=0 THEN
		IF NOT EXISTS(SELECT 1 FROM shiftBreakRuleSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id AND subClassificationId=subClassification_Id) THEN
			INSERT INTO shiftBreakRuleSettings(businessSiteId,departmentId,subClassificationId,longBreakDuration,shortBreakDuration,
				minShortShiftHours,maxShortShiftHours,minMediumShiftHours,maxMediumShiftHours,minLongShiftHours,maxLongShiftHours,
				longerShiftHours,createdBy,createdOn)
			VALUES(businessSite_Id,department_Id,subClassification_Id,long_BreakDuration,short_BreakDuration,
				min_ShortShiftHours,max_ShortShiftHours,min_MediumShiftHours,max_MediumShiftHours,min_LongShiftHours,max_LongShiftHours,
				longer_ShiftHours,created_By,utc_timestamp())
				
			SET breakRule_Id = LAST_INSERT_ID()
			
			UPDATE businessSettings SET settingStatus=2 WHERE settingId=generalSettings_Id
		ELSE
			SELECT breakRuleId INTO breakRule_Id FROM shiftBreakRuleSettings WHERE businessSiteId=businessSite_Id
		END IF
	ELSEIF is_Deleted=0 THEN
		UPDATE shiftBreakRuleSettings SET businessSiteId=businessSite_Id,departmentId=department_Id,subClassificationId=subClassification_Id,longBreakDuration=long_BreakDuration,shortBreakDuration=short_BreakDuration,
		minShortShiftHours=min_ShortShiftHours,maxShortShiftHours=max_ShortShiftHours,minMediumShiftHours=min_MediumShiftHours,maxMediumShiftHours=max_MediumShiftHours,
		minLongShiftHours=min_LongShiftHours,maxLongShiftHours=max_LongShiftHours,longerShiftHours=longer_ShiftHours,
		updatedBy=updated_By,updatedOn=utc_timestamp() 
		WHERE breakRuleId=breakRule_Id
	ELSE
		DELETE FROM shiftBreakRuleSettings WHERE breakRuleId=breakRule_Id
		
		UPDATE businessSettings SET settingStatus=1 WHERE settingId=generalSettings_Id
	END IF
	
	SELECT breakRule_Id AS breakRuleId,1 AS STATUS
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdatetBusinessCostCenter` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdatetBusinessCostCenter`( IN Cost_Centre_Id bigint(20) , IN Business_Id bigint(20) , IN Cost_Centre_code varchar(15) , IN Cost_Centre_Description varchar(500) , IN Created_By bigint(20))
BEGIN 

DECLARE StatusValue bigint


		if (Cost_Centre_Id = 0) then
			INSERT INTO businessCostCentre
				(					
					code 
					,description 
					,createdBy 
					,createdOn 
					,isDeleted 
					,status
				)
			 VALUES
				( 
					 Cost_Centre_code 
					,Cost_Centre_Description 
					,Created_By 
					,utc_timestamp()
					,0
					,1
				)
			
			IF ROW_COUNT() > 0 THEN
			set StatusValue = 5002
			select StatusValue 
			end if

		else
			update businessCostCentre set 
				   code = Cost_Centre_code
				  ,description = Cost_Centre_Description
				  ,isDeleted = is_Deleted
				  ,updatedBy = Created_By
				  ,updatedOn = utc_timestamp()
				  where costCentreId = Cost_Centre_Id

				IF ROW_COUNT() > 0 THEN
					set StatusValue = 5003
					select StatusValue 
				 end if
		end if


		
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateTestOfflineSync` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateTestOfflineSync`(
 IN i_d int(11) 
,IN sample_Text varchar(100) 
,IN gu_id varchar(45) 
,IN is_Deleted bit(1)
)
BEGIN
 
	if (is_Deleted =0) then 
		if (i_d = 0) then
			insert into testOfflineSync(sampleText, guid, createdOn)
            values (sample_Text, gu_id, utc_timestamp())
            
            IF ROW_COUNT() > 0 THEN
				select last_insert_id() as StatusValue
			end if
		else
			update testOfflineSync set sampleText = sample_Text
            , guid = gu_id
            ,updatedOn  = utc_timestamp()
            where id = i_d
            
             IF ROW_COUNT() > 0 THEN
				select i_d as StatusValue
			end if
        end if
	else
		update testOfflineSync set isDeleted = 1 where id=i_d
    end if
   
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateTimeSheet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateTimeSheet`( IN user_Id bigint(20) , IN timeSheetDate_Offset int(11) , IN timeSheetDateTime_ZoneId varchar(50) , IN timeSheet_Created_Offset int(11) , IN timeSheet_Created_TimeZoneId varchar(50) , IN timeSheetDetails varchar(8000) , IN created_By bigint(20) , IN timeSheet_StatusId tinyint(4) )
BEGIN

/*
 Author: Ecanarys
 Date  : 
 Description : 
 */
declare time_Sheet_Id bigint
declare job_Id bigint
declare business_Site_Id bigint
declare agency_Site_Id bigint
declare timeSheet_date bigint
declare timeSheet_StartTime int 
declare timeSheet_EndTime int
declare timeSheet_Created_On bigint(20)
declare StatusValue smallint
set @i =1
set @rowCount = (select ExtractValue(timeSheetDetails,'count(/timeSheet/timeSheetId)'))
CREATE TEMPORARY TABLE  timeSheet_Sheet_Status
(
  time_Sheet_Id bigint
 ,timeSheet_Created_On bigint
 ,StatusValue smallint
)
WHILE @i <= @rowCount DO
	set time_Sheet_Id = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/timeSheetId'))
	set job_Id = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/jobId'))
	set business_Site_Id = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/businessSiteId'))
	set agency_Site_Id = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/agencySiteId'))
	set timeSheet_date = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/timeSheetDate'))
	set timeSheet_StartTime = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/timeSheetStartTime'))
	set timeSheet_EndTime = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/timeSheetEndTime'))
	set timeSheet_Created_On = (select ExtractValue(timeSheetDetails, '//timeSheet[$@i]/timeSheetCreatedOn'))
	if (time_Sheet_Id =0) then
		if not exists (select 1 from timeSheet where userId=user_Id and jobId=job_Id and timeSheetDate=timeSheet_date and (( timeSheet_StartTime between timeSheetStartTime and timeSheetEndTime) or  (timeSheet_EndTime  between timeSheetStartTime and timeSheetEndTime))) then
			insert into timeSheet (userId, jobId, businessSiteId, agencySiteId, timeSheetDate,timeSheetDateOffset,timeSheetDateTimeZoneId, timeSheetStartTime, timeSheetEndTime,timeSheetCreatedOn,timeSheetCreatedOffset, timeSheetCreatedTimeZoneId, createdBy, createdOn, timeSheetStatusId)
			values ( user_Id, job_Id, business_Site_Id, agency_Site_Id, timeSheet_date, timeSheetDate_Offset,timeSheetDateTime_ZoneId, timeSheet_StartTime, timeSheet_EndTime, timeSheet_Created_On, timeSheet_Created_Offset, timeSheet_Created_TimeZoneId, created_By, utc_timestamp(), timeSheet_StatusId )
			IF ROW_COUNT() > 0 THEN
				set time_Sheet_Id = (select LAST_INSERT_ID())
				set StatusValue = 1
			end if
		else
			set StatusValue = 0
		end if
	else	if not exists (select 1 from timeSheet where userId=user_Id and timeSheetId <> time_Sheet_Id and jobId=job_Id and timeSheetDate=timeSheet_date and (( timeSheet_StartTime between timeSheetStartTime and timeSheetEndTime) or  (timeSheet_EndTime  between timeSheetStartTime and timeSheetEndTime))) then
			update timeSheet set  timeSheetStartTime = timeSheet_StartTime
								, timeSheetEndTime = timeSheet_EndTime
								, timeSheetStatusId = timeSheet_StatusId
								where timeSheetId = time_Sheet_Id
			IF ROW_COUNT() > 0 THEN
				set StatusValue = 1
			end if
		else
			set StatusValue = 0
		end if
	end if
	
	insert into timeSheet_Sheet_Status (time_Sheet_Id, timeSheet_Created_On ,StatusValue)
	values (time_Sheet_Id, timeSheet_Created_On, StatusValue)
	set  @i =  @i + 1
END WHILE	
select * from timeSheet_Sheet_Status
DROP TABLE timeSheet_Sheet_Status
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateUser`( 
IN user_Id bigint(20) 
, IN site_ID bigint(20) 
, IN first_Name varchar(100) 
, IN middle_Name varchar(100) 
, IN last_Name varchar(100) 
, IN User_Password varchar(1000) 
, IN Role_Category_Id smallint(6) 
, IN Role_Id bigint(20)
, IN email_Id varchar(100) 
, IN created_By bigint(20)  
, IN userRole_Id bigint(20)  
, IN userRoleSite_Id bigint(20)  
, IN old_Role_Id bigint(20)
, IN encryption_Key varchar(100)
 )
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Insert Update Business/Agency User
*/


DECLARE userUniqueId nvarchar(75)
DECLARE StatusValue tinyint
DECLARE userRole_Id_new bigint
set StatusValue =0

 


if (Role_Category_Id = 3) THEN  -- Business

	call InsertUpdateBusinessUser(
							   user_Id 
							,  site_ID 
							,  first_Name 
							,  middle_Name  
							,  last_Name 
							,  User_Password 
							,  Role_Category_Id 
							,  Role_Id 
							,  email_Id
							,  created_By 
							,  userRole_Id 
							,  userRoleSite_Id   
                            ,  old_Role_Id
                            ,  encryption_Key
								)
else
	call InsertUpdateAgencyUser(
							   user_Id 
							,  site_ID 
							,  first_Name 
							,  middle_Name  
							,  last_Name 
							,  User_Password 
							,  Role_Category_Id 
							,  Role_Id 
							,  email_Id
							,  created_By 
							,  userRole_Id 
							,  userRoleSite_Id   
                            ,  encryption_Key
								)
end if


-- select User_Id,userUniqueId,StatusValue 


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateUserContactDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateUserContactDetails`( 

IN user_ID bigint(20) ,
IN home_Phone longtext ,
IN work_Phone longtext ,
IN mobile_Phone longtext ,
IN is_Deleted bit ,
IN User_fax varchar(15) ,
IN created_By bigint(20), 
IN sec_email varchar(100)

)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : User contact details
 call InsertUpdateUserContactDetails( 1 ,"9035847655","9035847655","9035847655",0,"903584765511")
*/


	if (is_Deleted =0) then
		if exists (select 1 from userContact where userID = user_ID) then
        
			  update scUser set secondaryEmail = sec_email 
							  , updatedBy = created_By
							  , updatedOn = utc_timestamp()
							   where userID = user_ID
			update userContact set homePhone = home_Phone
                                ,workPhone = work_Phone
                                ,mobilePhone = mobile_Phone
                                ,fax = User_fax
								,isDeleted = 0
								where  userID = user_ID 
                                
			IF ROW_COUNT() > 0 THEN
				SELECT user_ID
			END IF
		else
			update scUser set secondaryEmail = sec_email 
							, updatedBy = created_By
							, updatedOn = utc_timestamp()
							where userID = user_ID
            
			insert into userContact (userID , homePhone , workPhone, mobilePhone, fax, isDeleted, createdBy, createdOn)
			values (user_ID , home_Phone , work_Phone, mobile_Phone, User_fax, is_Deleted, created_By, utc_timestamp() )
            
            IF ROW_COUNT() > 0 THEN
				SELECT user_ID
			END IF
		end if
	else
		update userContact set  isDeleted = is_Deleted 
							, updatedBy = created_By
							, updatedOn = utc_timestamp() where  userID = user_ID 
        
        IF ROW_COUNT() > 0 THEN
			SELECT user_ID
		END IF
    end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateUserLastLogin` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateUserLastLogin`(
  in user_Id	bigint(20)
 ,in device_TypeId	smallint(4) 
)
BEGIN

/*
 Author: James
 Date  : 17/02/2015
 Description : Insert Update User Last login details
*/

if not exists (select userId from  userLastLogin where userId=user_Id and deviceTypeId=device_TypeId) then  
		insert into userLastLogin  (
					userId
				,	deviceTypeId
				,	lastLoginTime
				,	createdBy
				,	createdOn )
		values (	user_Id
				,	device_TypeId
				,	utc_timestamp()
				,	user_Id
				,	utc_timestamp() )
			if row_count() >0 then 
				select user_Id
			end if
else
		update userLastLogin set 
			 lastLoginTime= utc_timestamp()
            ,updatedBy	= user_Id
            ,updatedOn	= utc_timestamp()
        where userId=user_Id and deviceTypeId=device_TypeId
		if row_count() >0 then 
			select user_Id
		end if
end if 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateUserProfilePicture` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateUserProfilePicture`(

 IN user_Id bigint(20) 
,IN image_Name varchar(200) 
,IN image_Path varchar(1000) 
,IN imageMime_Type varchar(6) 
,IN e_Tag varchar(1000) 
,IN file_Status tinyint(4) 
,IN created_By bigint(20) 
,IN is_Deleted bit(1)

)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 11/11/2014
 Description : Upating user profile picture
 call InsertUpdateUserProfilePicture( 1,"TJ","Joseph",".jpeg","e-tag",1,1,1)
*/
 
if (is_Deleted = 0) THEN
	if not exists(select 1 from userProfileImage where userId = user_Id) then
		insert into userProfileImage (userId ,imageName  ,imagePath ,imageMimeType ,eTag ,fileStatus ,createdBy ,createdOn ,isDeleted)
		values (user_Id ,image_Name  ,image_Path ,imageMime_Type ,e_Tag ,file_Status ,created_By ,utc_timestamp() ,0)
        
		if ROW_COUNT() > 0 then
			select user_Id
		end if
	else
		update userProfileImage set isDeleted =coalesce(is_Deleted ,isDeleted)
									,imageName = coalesce(image_Name , imageName)
									,imageMimeType = coalesce(imageMime_Type , imageMimeType)
									,eTag = coalesce(e_Tag , eTag)
									,fileStatus = coalesce(file_Status , fileStatus)
									,updatedBy = coalesce(created_By, updatedBy ,createdBy)
									,updatedOn = utc_timestamp()
                                    ,imagePath = coalesce(image_Path, imagePath)
									where userId = user_Id
		if ROW_COUNT() > 0 then
			select user_Id
		end if
    end if
else
	update userProfileImage set isDeleted =1 where userId = user_Id
    
    if ROW_COUNT() > 0 then
			select user_Id
		end if
end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateUserStep` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateUserStep`(
	IN 	business_Id		bigint
    ,IN step_No			tinyint
    ,IN  is_Completed	bit
    ,IN  roleCategory_Id	tinyint
    ,IN  created_By		bigint
)
BEGIN

/*
 Author: James
 Date  : 26/03/2015
 Description :  Updating user step
*/

if roleCategory_Id=3 then
		if not exists(select 1 from businessStepCompletion where businessId=business_Id and stepNo=step_No) then
				insert into businessStepCompletion (
								businessId
							,	stepNo
							,	isCompleted
							,	createdBy
							,	createdOn  )
					values (	business_Id
							,	step_No
							,	is_Completed
							,	created_By
                            ,   utc_timestamp())      
				IF ROW_COUNT() > 0 THEN 
					select business_Id 
				 end if
        else
				update businessStepCompletion set 
						isCompleted =is_Completed
					,	updatedBy	= created_By
					,	updatedOn	= utc_timestamp()
				where businessId=business_Id and stepNo=step_No     
                IF ROW_COUNT() > 0 THEN 
					select business_Id 
				 end if
        end if
elseif roleCategory_Id=4 then
 		if not exists(select 1 from agencyStepCompletion where agencyId=business_Id and stepNo=step_No) then
				insert into agencyStepCompletion (
								agencyId
							,	stepNo
							,	isCompleted
							,	createdBy
							,	createdOn  )
					values (	business_Id
							,	step_No
							,	is_Completed
							,	created_By
                            ,   utc_timestamp())     
				IF ROW_COUNT() > 0 THEN 
					select business_Id 
				 end if
        else
				update agencyStepCompletion set 
						isCompleted =is_Completed
					,	updatedBy	= created_By
					,	updatedOn	= utc_timestamp()
				where agencyId=business_Id and stepNo=step_No        
                
                IF ROW_COUNT() > 0 THEN 
					select business_Id 
				 end if
        end if

end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateUserTempEmailId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateUserTempEmailId`(
IN user_Id bigint(20) 
, IN email_Id varchar(100)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 12/04/2016
 Description : Insert Update user temp emailId
*/


if exists(select 1 from userTempEmailId where userId = user_Id) then
	update userTempEmailId set 
						emailId = email_Id
                        ,isCompleted = 0
						,updatedOn = utc_timestamp()
						where userId = user_Id
			if row_count() >0 then 
				select user_Id
			end if
else 
	insert into userTempEmailId ( userId,emailId,isCompleted,createdOn )
	values (user_Id ,email_Id ,0,utc_timestamp() )
	
    if row_count() >0 then 
		select user_Id
	end if
end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUpdateWorkFlowInstance` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUpdateWorkFlowInstance`(
	IN	workflowInstance_Id	bigint(20)
,	IN	workFlow_Id	tinyint(4)
,	IN	currentState_Id	int(11)
,	IN	parentWorkflowInstance_Id	bigint
,	IN	businessSite_Id	bigint(20)
,	IN	jobProfileHireRequest_Id	bigint(20)
,	IN	created_By	bigint(20)
,	IN	event_Id	int(11)
, 	IN  prev_StateId int
,	out	workflowInstance_Id_out bigint 
)
BEGIN
	/*
	 Author: James
	 Date  : 25/02/2015
	 Description : insert update workflow instance
     call est_skillsconnect.InsertUpdateWorkFlowInstance(0, 5, 4, 1, 2, 2, 2)
	*/
 declare transit_id int


if workflowInstance_Id=0 then
		insert into workFlowInstance(
				workFlowId
			,	currentStateId
			,	parentWorkflowInstanceId
			,	businessSiteId
			,	jobProfileHireRequestId
			,	createdOn
			,	createdBy )
		values (workFlow_Id
			,	currentState_Id
			,	parentWorkflowInstance_Id
			,	businessSite_Id
			,	jobProfileHireRequest_Id
			,	utc_timestamp()
			,	created_By) 
			
		if row_Count()>0 then
			set workflowInstance_Id=last_insert_id()  
            set workflowInstance_Id_out=workflowInstance_Id
           --  select workflowInstance_Id             
        end if
else 
	update workFlowInstance set 
		-- 	workFlowId	=	workFlow_Id
		 	currentStateId	=	currentState_Id 
            ,updatedBy=created_By
            ,updatedOn=utc_timestamp()
	where 	workflowInstanceId	=	workflowInstance_Id 

		if row_Count()>0 then 
            set workflowInstance_Id_out=workflowInstance_Id   
            
            set transit_id=(select transitId from workFlowStateTransition where stateId=prev_StateId and eventId=event_Id and transitStateId=currentState_Id)

				 if not exists(select workflowInstanceId from workFlowHistory where workflowInstanceId=workflowInstance_Id and transitId=transit_id) then
						insert into workFlowHistory (
									workflowInstanceId
								,	transitId
								,	createdBy
								,	createdOn)
						values (	workflowInstance_Id
								,	transit_id
								,	created_By
								,	utc_timestamp() )
				 end if				
        end if         
end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUser`( 
IN First_Name varchar(100) 
, IN Last_Name varchar(100) 
, IN Email_Id varchar(1000) 
, IN UPassword varchar(5000) 
, IN URoleCategoryId int(11) 
, IN accept_TermsConditions bit(1) 
, IN encryption_Key varchar(100)
, in user_Type tinyint(1)
)
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 10-07-2014
 Description : Register user 
 */

DECLARE StatusValue bigint
DECLARE User_Id bigint
DECLARE userUniqueId nvarchar(75)
DECLARE claimSet_Id bigint



set Email_Id =  TRIM(BOTH '' FROM Email_Id) 
set claimSet_Id = (select case when URoleCategoryId=1 then 1 when URoleCategoryId=2 then 2 when URoleCategoryId=3 then 3 else 4 end)

		INSERT INTO scUser(FirstName,LastName,emailId,userPassword,RoleCategoryId,status,createdOn,acceptTermsConditions,isLoggedInOnce,encryptionKey,userType)
		VALUES(First_Name,Last_Name,Email_Id,UPassword,URoleCategoryId,1,utc_timestamp(),accept_TermsConditions,0,encryption_Key,user_Type)

		IF ROW_COUNT() > 0 THEN
			
			set StatusValue = 5002
			set User_Id =  LAST_INSERT_ID()
			set userUniqueId = UUID() 
			set userUniqueId =CONCAT(userUniqueId , '-' , User_Id)  
			update scUser set userUIId = userUniqueId where userId = User_Id
            
            
              if not exists(select 1 from userRole where userId= User_Id and roleId = claimSet_Id) then
				insert into userRole(userId,roleId,createdBy,createdOn,RoleCategoryId, isDeleted) 
				values (User_Id,claimSet_Id,User_Id,utc_timestamp(),URoleCategoryId, 0)
            end if
            
			 if (URoleCategoryId =2) then
				 insert into candidateUser (candidateuserId,createdBy,createdOn)
				 values (User_Id,User_Id,utc_timestamp())
                  
					insert into candidateDetail (candidateUserId,createdBy,createdOn)
					values (User_Id,User_Id,utc_timestamp())
			 end if	

			select  User_Id ,userUniqueId, StatusValue 
			

		 end if
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertUserDeviceDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertUserDeviceDetails`( 
  IN User_ID bigint(20) 
, IN Device_Type_ID smallint(6) 
, IN Device_Token varchar(200) 
, IN is_Deleted bit
, IN device_Id varchar(200) 
)
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 10-01-2015
 Description : Inserting user device details
 */

	if (is_Deleted = 0) then
		if not exists(select 1 from userDevice where  deviceTypeID =Device_Type_ID and deviceId = device_Id and userId =User_ID) then
			INSERT INTO userDevice(userID,deviceTypeID,deviceToken,createdBy,createdOn, isDeleted, deviceId)
			 VALUES (User_ID,Device_Type_ID,Device_Token,User_ID,utc_timestamp(),0, device_Id)

			IF ROW_COUNT() > 0 THEN
				select 1 as InsertedSucessfully
			end if	
		else
			update userDevice set 
			
			updatedBy = User_ID
			,updatedOn = utc_timestamp()
             ,isDeleted = 0
             ,deviceToken = Device_Token
			where deviceTypeID =Device_Type_ID and deviceId = device_Id and userId =User_ID
        
			IF ROW_COUNT() > 0 THEN
				select 1 as InsertedSucessfully
			end if	
		end if
	else
		update userDevice set 
         updatedBy = User_ID
        ,updatedOn = utc_timestamp()
        ,isDeleted = is_Deleted
        where deviceTypeID =Device_Type_ID and deviceId = device_Id and userId =User_ID
        
          IF ROW_COUNT() > 0 THEN
			select 1 as InsertedSucessfully
		end if	
    end if
    


		
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `InsertWorkFlowHistory` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `InsertWorkFlowHistory`(
	IN	wfHistory_Id	bigint(20)
,	IN	workflowInstance_Id	bigint(20)
,	IN	state_Id	int(11)
,	IN	event_Id	int(11)
,	IN	created_By	bigint(20) 
)
BEGIN 
	/*
	 Author: James
	 Date  : 26/02/2015
	 Description : insert workflow history
          
	*/

if  wfHistory_Id=0 then
	insert into workFlowHistory (
				workflowInstanceId
			,	stateId
			,	eventId
			,	createdBy
			,	createdOn)
	values (	workflowInstance_Id
			,	state_Id
			,	event_Id
			,	created_By
			,	utc_timestamp() )
            
	if row_count()>0 then
		set wfHistory_Id=last_insert_id()
        
        select wfHistory_Id     
    end if

end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `RosteringAutoAssignProcess` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `RosteringAutoAssignProcess`(
IN manager_Id BIGINT(20),
IN businessSite_Id BIGINT(20),
IN department_Id BIGINT(20),
IN subClassification_Id BIGINT(20),
IN roster_date DATE
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Auto assign shifts
*/
	DECLARE current_count INT
	DECLARE lastWeek_count INT
	DECLARE previousWeek_Date DATE
	DECLARE shiftTimes_UnmatchCount INT
	
	DECLARE currentShiftOffer_Id BIGINT(20)
	DECLARE previousShiftOffer_Id BIGINT(20)
	DECLARE shiftOffer_StartTime TIME
	DECLARE shiftOffer_EndTime TIME
	DECLARE currentCandidate_Id BIGINT(20)
	DECLARE previousCandidate_Id BIGINT(20)
	
	DECLARE unavailability_count INT
	DECLARE autoAssign_count INT
	DECLARE is_Available BIT
	
	DECLARE isCandidateAckReq BIT
	
	SET SQL_SAFE_UPDATES=0
	
	SET previousWeek_Date=DATE_SUB(roster_date, INTERVAL 1 WEEK)
	
	DROP TABLE IF EXISTS PreviousWeekRosterShiftOffers
	DROP TABLE IF EXISTS CurrentWeekRosterShiftOffers
	
	CREATE TEMPORARY TABLE  PreviousWeekRosterShiftOffers
	(
	  shiftOfferId BIGINT(20),
	  candidateId BIGINT(20),
	  jobProfileId BIGINT(20),
	  departmentId BIGINT(20),
	  subClassificationId INT(11),
	  businessSiteId BIGINT(20),
	  shiftStartDateTime DATETIME,
	  shiftEndDateTime DATETIME,
	  STATUS TINYINT(4),
	  sourceModule VARCHAR(20),
	  createdBy BIGINT(20),
	  createdOn DATETIME,
	  updatedBy BIGINT(20),
	  updatedOn DATETIME,
	  isChecked BIT
	)
	
	CREATE TEMPORARY TABLE  CurrentWeekRosterShiftOffers
	(
	  shiftOfferId BIGINT(20),
	  candidateId BIGINT(20),
	  jobProfileId BIGINT(20),
	  departmentId BIGINT(20),
	  subClassificationId INT(11),
	  businessSiteId BIGINT(20),
	  shiftStartDateTime DATETIME,
	  shiftEndDateTime DATETIME,
	  STATUS TINYINT(4),
	  sourceModule VARCHAR(20),
	  createdBy BIGINT(20),
	  createdOn DATETIME,
	  updatedBy BIGINT(20),
	  updatedOn DATETIME,
	  isChecked BIT
	)
		
	
	-- insert previous week shift offers
	INSERT INTO PreviousWeekRosterShiftOffers (shiftOfferId,candidateId,jobProfileId,departmentId,subClassificationId,businessSiteId,
		shiftStartDateTime,shiftEndDateTime,STATUS,sourceModule,createdBy,createdOn,updatedBy,updatedOn,isChecked)
	SELECT so.shiftOfferId,so.candidateId,so.jobProfileId,so.departmentId,so.subClassificationId,so.businessSiteId, 
		so.shiftStartDateTime,so.shiftEndDateTime,so.STATUS,so.sourceModule,so.createdBy,so.createdOn,so.updatedBy,so.updatedOn,0
	FROM candidateShiftOffer so
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE DATE(so.shiftStartDateTime)=previousWeek_Date AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
		AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id AND so.STATUS NOT IN (19,33,36)
		AND so.isDeleted=0
	ORDER BY so.shiftStartDateTime
	
	-- insert current week shift offers
	INSERT INTO CurrentWeekRosterShiftOffers (shiftOfferId,candidateId,jobProfileId,departmentId,subClassificationId,businessSiteId,
		shiftStartDateTime,shiftEndDateTime,STATUS,sourceModule,createdBy,createdOn,updatedBy,updatedOn,isChecked)
	SELECT so.shiftOfferId,so.candidateId,so.jobProfileId,so.departmentId,so.subClassificationId,so.businessSiteId, 
		so.shiftStartDateTime,so.shiftEndDateTime,so.STATUS,so.sourceModule,so.createdBy,so.createdOn,so.updatedBy,so.updatedOn,0
	FROM candidateShiftOffer so
	INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
	INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
	WHERE DATE(so.shiftStartDateTime)=roster_date AND ucs.userId=manager_Id AND so.businessSiteId=businessSite_Id
		AND so.departmentId=department_Id AND so.subClassificationId=subClassification_Id
		AND so.isDeleted=0
	ORDER BY so.shiftStartDateTime
	
	SELECT COUNT(shiftOfferId)
	INTO current_count
	FROM CurrentWeekRosterShiftOffers
	
	IF current_count > 0 THEN
		SELECT COUNT(shiftOfferId)
		INTO lastWeek_count
		FROM PreviousWeekRosterShiftOffers
	END IF
		
	IF current_count>0 THEN
		IF lastWeek_count>0 THEN
			-- check counts are equal
			IF lastWeek_count=current_count THEN
				
				-- check times are matching
				SELECT COUNT(uniqueCount) 
				INTO shiftTimes_UnmatchCount
				FROM (
				SELECT COUNT(startTime)  AS uniqueCount
				FROM (
				SELECT TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime FROM PreviousWeekRosterShiftOffers
				UNION ALL
				SELECT TIME(shiftStartDateTime) AS startTime,TIME(shiftEndDateTime) AS endTime FROM CurrentWeekRosterShiftOffers
				) AS tbl
				GROUP BY startTime,endTime
				HAVING COUNT(startTime) = 1
				) AS p1
				WHERE uniqueCount=1
				
				IF shiftTimes_UnmatchCount IS NULL OR shiftTimes_UnmatchCount=0 THEN
					
					WHILE (SELECT COUNT(1) FROM CurrentWeekRosterShiftOffers WHERE isChecked=0 > 0  ) DO
						
						SELECT shiftOfferId,candidateId,TIME(shiftStartDateTime),TIME(shiftEndDateTime) 
						INTO currentShiftOffer_Id,currentCandidate_Id,shiftOffer_StartTime,shiftOffer_EndTime
						FROM CurrentWeekRosterShiftOffers WHERE isChecked =0 ORDER BY shiftOfferId LIMIT 1
						
						IF currentCandidate_Id IS NULL OR currentCandidate_Id=0 THEN
						
							SELECT shiftOfferId,candidateId
							INTO previousShiftOffer_Id,previousCandidate_Id
							FROM PreviousWeekRosterShiftOffers
							WHERE shiftStartDateTime=CONCAT(previousWeek_Date,' ',shiftOffer_StartTime) 
								AND shiftEndDateTime=CONCAT(previousWeek_Date,' ',shiftOffer_EndTime)
								AND isChecked =0
							ORDER BY shiftOfferId LIMIT 1
								
							IF previousCandidate_Id>0 THEN
							
								-- check for unavailability
								/*select count(*) 
								into unavailability_count
								from candidateUnavailability 
								where candidateId=previousCandidate_Id 
									and concat(roster_date,' ',shiftOffer_StartTime) <= endDateTime
									and concat(roster_date,' ',shiftOffer_EndTime) >= startDateTime*/
								
								-- if unavailability_count=0 then
								SET is_Available = CheckCandidateAvailability(previousCandidate_Id,currentShiftOffer_Id,CONCAT(roster_date,' ',shiftOffer_StartTime),CONCAT(roster_date,' ',shiftOffer_EndTime))
								
								IF is_Available=1 THEN
									
									SELECT candidateAcknowledgeReq INTO isCandidateAckReq FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
									
									IF isCandidateAckReq=1 THEN
										UPDATE candidateShiftOffer SET candidateId=previousCandidate_Id,STATUS=1,updatedBy=manager_Id,updatedOn=utc_timestamp()
										WHERE shiftOfferId=currentShiftOffer_Id
									ELSE
										UPDATE candidateShiftOffer SET candidateId=previousCandidate_Id,STATUS=2,updatedBy=manager_Id,updatedOn=utc_timestamp()
										WHERE shiftOfferId=currentShiftOffer_Id
									END IF
									
									UPDATE CurrentWeekRosterShiftOffers SET candidateId=previousCandidate_Id,isChecked=1 
									WHERE shiftOfferId=currentShiftOffer_Id
									
									UPDATE PreviousWeekRosterShiftOffers SET isChecked=1 
									WHERE shiftOfferId=previousShiftOffer_Id
								-- end if
								ELSE
									UPDATE CurrentWeekRosterShiftOffers SET isChecked=1 
									WHERE shiftOfferId=currentShiftOffer_Id
								END IF
							ELSE
								UPDATE CurrentWeekRosterShiftOffers SET isChecked=1 
								WHERE shiftOfferId=currentShiftOffer_Id
							END IF
						ELSE
							UPDATE CurrentWeekRosterShiftOffers SET isChecked=1 
							WHERE shiftOfferId=currentShiftOffer_Id
						END IF
						
					END WHILE
					
					SELECT 1 AS isSuccess, 'SUCCESS' AS statusMessage
				ELSE
					SELECT 0 AS isSuccess, 'SHIFT TIMES DOES NOT MATCH' AS statusMessage
				END IF
			ELSE
				SELECT 0 AS isSuccess, 'SHIFTS COUNT DOES NOT MATCH' AS statusMessage
			END IF
		ELSE
			SELECT 0 AS isSuccess, 'LAST WEEK SHIFTS NOT FOUND' AS statusMessage
		END IF
	ELSE
		SELECT 0 AS isSuccess, 'CURRENT WEEK SHIFTS NOT FOUND' AS statusMessage
	END IF
	
	SET SQL_SAFE_UPDATES=1
	
	DROP TABLE PreviousWeekRosterShiftOffers
	DROP TABLE CurrentWeekRosterShiftOffers
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `setDefaultClaimWrokFlowRoleCategory` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `setDefaultClaimWrokFlowRoleCategory`()
BEGIN

/*
Tijo
call setDefaultClaimWrokFlowRoleCategory()
Use for only backend purpose
*/

	insert into businessFunctionWorkFlow(businessFunctionId,workFlowId )
	select a.businessFunctionId, a.workFlowId 
	from
	(
	select businessFunctionId, 1 as workFlowId from businessFunctionLocale 
	where workFlowIds like "%1%"
	union 
	select businessFunctionId, 2 as workFlowId from businessFunctionLocale 
	where workFlowIds like "%2%"
	union 
	select businessFunctionId, 3 as workFlowId from businessFunctionLocale 
	where workFlowIds like "%3%"
	union 
	select businessFunctionId, 4 as workFlowId from businessFunctionLocale 
	where workFlowIds like "%4%"
	)a
	left join businessFunctionWorkFlow cwf on cwf.BusinessFunctionId = a.BusinessFunctionId and cwf.workFlowId = a.workFlowId
	where cwf.BusinessFunctionId is null and cwf.workFlowId is null 
    
    insert into businessFunctionRoleCategory (BusinessFunctionId, roleCategoryId)
	select a.BusinessFunctionId,a.roleCategoryId from
	(
	select BusinessFunctionId, 3 as roleCategoryId from businessFunctionLocale 
	where roleCategoryIds like "%3%"
	union 
	select BusinessFunctionId, 4 as roleCategoryId from businessFunctionLocale 
	where roleCategoryIds like "%4%"
	) a
	left join businessFunctionRoleCategory rc on rc.BusinessFunctionId = a.BusinessFunctionId and rc.roleCategoryId=a.roleCategoryId
	where rc.BusinessFunctionId is null and rc.roleCategoryId is null
    
    
    insert into roleBusinessFunctionDefault(businessFunctionId,RoleId )
	select a.businessFunctionId, a.RoleId 
	from
	(
	select BusinessFunctionId, 1 as RoleId from businessFunctionLocale 
	where roleIds like "%1%"
	union 
	select BusinessFunctionId, 2 as RoleId from businessFunctionLocale 
	where roleIds like "%2%"
	union 
	select BusinessFunctionId, 3 as RoleId from businessFunctionLocale 
	where roleIds like "%3%"
	union 
	select BusinessFunctionId, 4 as RoleId from businessFunctionLocale 
	where roleIds like "%4%"
    union 
	select BusinessFunctionId, 5 as RoleId from businessFunctionLocale 
	where roleIds like "%5%"
    union 
	select BusinessFunctionId, 6 as RoleId from businessFunctionLocale 
	where roleIds like "%6%"
	)a
	left join roleBusinessFunctionDefault rc on rc.BusinessFunctionId = a.BusinessFunctionId and rc.RoleId = a.RoleId
	where rc.RoleId is null and rc.RoleId is null 

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `test` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `test`(
 in  business_SiteId  bigint(20)
,in  department_Id  bigint(20)
,in  subClassification_Id bigint(20)
,in  candidate_UserId varchar(5000)
, in  manager_Id bigint(20)

)
BEGIN

declare shiftOffer_Id bigint(20)
declare candidate_Id bigint(20)
declare total_Candidates int
declare declined_count int
declare candidate_userId_Single bigint(20)
    
DROP TABLE IF EXISTS TempShiftData
CREATE TEMPORARY TABLE  TempShiftData
(
	shiftOfferId BIGINT(20),
	candidateId BIGINT(20),
    STATUS TINYINT(4),
    recNo bigint(20)
) 

set @rown=0 
set @i=1
set @totalRec =0

	select * from hireRequestCandidate hrc 
	inner join jobProfileHireRequest jphr on jphr.jobProfileHireRequestId=hrc.jobProfileHireRequestId 
	and hrc.isDeleted=0 and hrc.candidateHRStatus=11 and jphr.isDeleted=0 and find_in_set(hrc.candidateUserId,candidate_UserId)
	inner join jobProfileBusinessSite jpbs on jpbs.jobProfileBusinessSiteId=jphr.jobProfileBusinessSiteId and jpbs.isDeleted=0
	inner join jobProfile jp on jp.jobProfileId=jpbs.jobProfileId
	where jpbs.businessSiteId=business_SiteId and jp.departmentId=department_Id 
	and jp.jobSubClassificationId=subClassification_Id

	insert into TempShiftData
	(shiftOfferId, candidateId,status,recNo)
	select *,@rown :=@rown + 1 as rown from (
		select so.shiftOfferId,so.candidateId,so.status from candidateShiftOffer so 
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and so.isDeleted=0 and bs.isDeleted=0
		inner join timeZone tz on tz.timeZoneId=bs.timeZoneId
		where so.businessSiteId=business_SiteId and departmentId=department_Id 
		and subClassificationId=subClassification_Id and find_in_set(candidateId,candidate_UserId)
		and date(shiftStartDateTime)>date( DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)) 
		union
		select so.shiftOfferId,cg.candidateId,so.status from candidateShiftOffer so 
		inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId and find_in_set(cg.candidateId,candidate_UserId)
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId and so.isDeleted=0 and bs.isDeleted=0
		inner join timeZone tz on tz.timeZoneId=bs.timeZoneId
		where so.businessSiteId=business_SiteId and departmentId=department_Id 
		and subClassificationId=subClassification_Id 
		and date(shiftStartDateTime)>date( DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE))
	 )a 

	set @totalRec=(select max(recNo) as recNo from TempShiftData)

	while @i<=@totalRec do
		select shiftOfferId,candidateId into shiftOffer_Id,candidate_Id from TempShiftData where recNo=@i
		-- unassign
		call InsertCandidateShiftUnassign(shiftOffer_Id,candidate_Id,manager_Id)
 
		select count(candidateId)  into total_Candidates from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id

		select count(candidateId) as tt into declined_count from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateStatus=3
		set declined_count=coalesce(declined_count,0)
		set total_Candidates=coalesce(total_Candidates,0)
        
        select candidateId into candidate_userId_Single from candidateGiveAwayRequests 
        where shiftOfferId=shiftOffer_Id and total_Candidates=1
        
        set candidate_userId_Single=coalesce(candidate_userId_Single,0)
        
        UPDATE candidateShiftOffer SET  STATUS=1,candidateId=0,updatedBy=manager_Id,updatedOn=utc_timestamp() 
		WHERE shiftOfferId=shiftOffer_Id and total_Candidates=0
        
		UPDATE candidateShiftOffer SET  candidateId=candidate_userId_Single,updatedBy=manager_Id,updatedOn=utc_timestamp() 
		WHERE shiftOfferId=shiftOffer_Id and total_Candidates<>0
        
        if total_Candidates =declined_count and total_Candidates<>0 then
			UPDATE candidateShiftOffer SET  STATUS=3,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=1
			
			UPDATE candidateShiftOffer SET  STATUS=32,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=4
			
			UPDATE candidateShiftOffer SET  STATUS=12,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=38
					
			UPDATE candidateShiftOffer SET  STATUS=42,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=40
			
			UPDATE candidateShiftOffer SET  STATUS=47,updatedBy=manager_Id,updatedOn=utc_timestamp() 
			WHERE shiftOfferId=shiftOffer_Id and status=46        
		end if      
        
	set @i =@i + 1 
	end while 
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateActualTimesForShiftOffer` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateActualTimesForShiftOffer`(
in shiftOffer_Id BIGINT(20),
in actual_ShiftStartDateTime datetime,
IN actual_ShiftEndDateTime DATETIME,
in comments varchar(2000),
in shift_status VARCHAR(50),
in updated_By BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update actual times for shift offer
*/
	DECLARE iCount INT
	DECLARE timeSheet_Id BIGINT(20)
	DECLARE manager_name NVARCHAR(500)
	DECLARE timeDiff_InMinutes INT(11)
	
	SET SQL_SAFE_UPDATES=0
	
	IF comments='' THEN
		SET comments=NULL
	END IF
	
	SELECT CONCAT(firstName,' ',lastName) INTO manager_name FROM scUser WHERE userId=updated_By
	
	UPDATE candidateShiftOffer SET actualShiftStartDateTime=actual_ShiftStartDateTime,actualShiftEndDateTime=actual_ShiftEndDateTime,
		updatedBy=updated_By,updatedOn=UTC_TIMESTAMP()
	WHERE shiftOfferId=shiftOffer_Id
	
	SELECT timeSheetId INTO timeSheet_Id FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
		
	IF shift_status='DECLINED' THEN
		UPDATE candidateTimesheet SET STATUS=3, actionBy=updated_By, actionOn=UTC_TIMESTAMP()
		WHERE shiftOfferId=shiftOffer_Id
		
		SET iCount=ROW_COUNT()
	ELSEIF shift_status='SUBMITTED' THEN
		UPDATE candidateTimesheet SET STATUS=34, disputeComment=comments, actionBy=updated_By, actionOn=UTC_TIMESTAMP()
		WHERE shiftOfferId=shiftOffer_Id
		
		SET iCount=ROW_COUNT()
	ELSE
		UPDATE candidateTimesheet SET disputeComment=comments, actionBy=updated_By, actionOn=UTC_TIMESTAMP()
		WHERE shiftOfferId=shiftOffer_Id
		
		SET iCount=ROW_COUNT()
	END IF
	
	IF comments IS NOT NULL THEN
		SELECT tz.timeDiffInMinutes INTO timeDiff_InMinutes
		FROM candidateShiftOffer so
		INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
		INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
		WHERE so.shiftOfferId=shiftOffer_Id
		
		INSERT INTO candidateTimesheetComments(timeSheetId,userId,COMMENT,createdDate,isUnread)
		VALUES(timeSheet_Id,updated_By,comments,DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE),1)
	END IF
	
	SET SQL_SAFE_UPDATES=1
	
	IF iCount>0 THEN
		SELECT so.candidateId AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,shift_status AS timesheetStatus,
			manager_name AS managerName,
			coalesce(so.shiftStartDateTime,ct.shiftStartDateTime) as shiftStartDateTime,
            coalesce(so.shiftEndDateTime,ct.shiftEndDateTime) as shiftEndDateTime,
            ud.deviceTypeID,ud.deviceToken,scu.RoleCategoryId
		FROM candidateShiftOffer so
		INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId
		INNER JOIN scUser scu ON so.candidateId=scu.userId
		LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
		WHERE so.shiftOfferId=shiftOffer_Id
		
		-- select shiftOffer_Id as shiftOfferId,1 as status,'SUCCESS' as statusMessage
	ELSE
		SELECT 0 AS candidateId,shiftOffer_Id AS shiftOfferId,0 AS timeSheetId,'FAILED' AS timesheetStatus,
			'' AS empFullName,NULL,NULL,NULL,NULL,NULL
		-- SELECT shiftOffer_Id AS shiftOfferId,0 AS STATUS,'FAILED' AS statusMessage
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateAgencyGroupName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateAgencyGroupName`( 
  IN agency_Id bigint(20) 
, IN groupName_Id tinyint
, IN isOther_GroupName bit(1)
, IN group_Name varchar(100) 
, IN User_ID bigint(20)
, IN have_Site bit 

)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Updating Agency Group Name
*/


DECLARE StatusValue tinyint

	update agency set    haveSite =have_Site
						,updatedBy = User_ID
						,updatedOn = utc_timestamp()
                        ,groupNameId = groupName_Id
                        ,isOtherGroupName = isOther_GroupName
                        ,otherGroupName = group_Name
						where agencyId = agency_Id
    
    
    
    IF ROW_COUNT() > 0 THEN
    set StatusValue = 1
	select StatusValue 
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBeaconSummary` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateBeaconSummary`(
 IN beacon_Id BIGINT(20)
, IN GPSLocationDisparity_Count BIGINT(20)
, IN clockOn_Count  BIGINT(20)
, IN manualSubmittedTimesheet_Count BIGINT(20)
, IN reset_Count BIT(1)
, IN shiftOffer_Id BIGINT(20)
, IN user_Id BIGINT(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 16/05/2016
 Description : Insert Update Beacon Summary
 call est_skillsconnect_dev.UpdateBeaconSummary(6, 1, 0, 0, 0, 0, 136)
*/
	DECLARE status_value bit(1)
    SET status_value = 0
    SET SQL_SAFE_UPDATES = 0
    SET GPSLocationDisparity_Count = coalesce(GPSLocationDisparity_Count,0)
    SET clockOn_Count = coalesce(clockOn_Count,0)
    SET manualSubmittedTimesheet_Count = coalesce(manualSubmittedTimesheet_Count,0)
    
    IF reset_Count = 0 THEN
		IF coalesce(beacon_Id,0)<>0 THEN
				
			UPDATE beaconSummary SET GPSLocationDisparityCount = GPSLocationDisparityCount + GPSLocationDisparity_Count,
				clockOnCount = clockOnCount + clockOn_Count,
				manualSubmittedTimesheets = manualSubmittedTimesheets + manualSubmittedTimesheet_Count,
				updatedBy = user_Id,
				updatedOn = utc_timestamp()
				WHERE beaconId = beacon_Id
                
			IF ROW_COUNT() > 0 THEN
				set status_value = 1
			END IF
        
		ELSEIF coalesce(shiftOffer_Id,0)<>0 THEN
        
			UPDATE  candidateShiftOffer  so  
				INNER JOIN beaconBusinessSite bs ON bs.businessSiteId=so.businessSiteId 
					AND bs.departmentId=so.departmentId
                    AND bs.subClassificationId=so.subClassificationId
                    AND bs.isDeleted=0
				INNER JOIN beaconSummary bss ON bss.beaconId=bs.beaconId
				SET bss.GPSLocationDisparityCount=bss.GPSLocationDisparityCount + GPSLocationDisparity_Count,
                bss.clockOnCount=bss.clockOnCount + clockOn_Count,
                bss.manualSubmittedTimesheets = bss.manualSubmittedTimesheets + manualSubmittedTimesheet_Count,
                bss.updatedBy = user_Id,
				bss.updatedOn = utc_timestamp()
				where shiftOfferId=shiftOffer_Id  
			
            IF ROW_COUNT() > 0 THEN
				set status_value = 1
			END IF
                
		END IF
        
	ELSE
		IF EXISTS (SELECT 1 FROM beaconSummary WHERE beaconId = beacon_Id) THEN
        
			UPDATE beaconSummary SET GPSLocationDisparityCount = 0,
				clockOnCount = 0,
				manualSubmittedTimesheets = 0,
				updatedBy = user_Id,
				updatedOn = utc_timestamp()
				WHERE beaconId = beacon_Id
                
			IF ROW_COUNT() > 0 THEN
				set status_value = 1
			END IF
            
		END IF
	END IF
    select status_value  
 
    SET SQL_SAFE_UPDATES=1
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBreakTimeForTimesheet` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateBreakTimeForTimesheet`(
in break_Id BIGINT(20),
in timeSheet_Id BIGINT(20),
in start_Time datetime,
IN end_Time DATETIME)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update break time for timesheet
*/
	IF break_Id=0 THEN
		INSERT INTO `candidateTimesheetBreak` (
		  `timeSheetId`, `startTime`, `endTime`) 
		VALUES
		  (timeSheet_Id,start_Time,end_Time) 
	ELSE
		UPDATE `candidateTimesheetBreak`
		SET `timeSheetId`=timeSheet_Id, `startTime`=start_Time,`endTime`=end_Time
		WHERE timesheetBreakId=break_Id
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBusinessGroupName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateBusinessGroupName`( 
  IN business_Id bigint(20) 
, IN groupName_Id tinyint
, IN isOther_GroupName bit(1)
, IN group_Name varchar(100) 
, IN User_ID bigint(20)
, IN have_Site bit
, IN departmentGroupName_Id tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Updating Business Group Name 
*/


DECLARE StatusValue tinyint

	update business set  haveSite =have_Site
						,updatedBy = User_ID
						,updatedOn = utc_timestamp()
                        ,groupNameId = groupName_Id
                        ,isOtherGroupName = isOther_GroupName
                        ,OtherGroupName = group_Name
                        ,departmentGroupNameId = departmentGroupName_Id
						where businessId = business_Id
    
    
    
    IF ROW_COUNT() > 0 THEN
    set StatusValue = 1
	select StatusValue 

        if (have_Site = 0) then
			update businessSite set isDeleted =1 
            ,updatedBy = User_ID
			,updatedOn = utc_timestamp()
            where businessId = business_Id and parentBusinessSiteId is not null
            
		end if
        
	end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBusinessPrefferedHrNotification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateBusinessPrefferedHrNotification`(

IN businessSite_Id bigint(20) ,
IN updated_By bigint(20)

)
BEGIN

/*
	 Author: Tijo
	 Date  : 16/02/2014
	 Description : Notification for business preffered agency
*/

	update businessSitePreferredAgency set isNotified = 1 
										, updatedBy = updated_By 
										, updatedOn = utc_timestamp()
    where  businessSiteId =businessSite_Id
    
    IF ROW_COUNT() > 0 THEN
		select businessSite_Id 
	end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBusinessSetUp` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateBusinessSetUp`(
  IN business_Id bigint(20) 
, IN groupName_Id tinyint
, IN isOther_GroupName bit(1)
, IN group_Name varchar(100) 
, IN User_ID bigint(20)
, IN have_Site bit
, IN departmentGroupName_Id tinyint
, in business_DepartmentName varchar(100)
, in workflow_Id tinyint
)
BEGIN

/*
 Author: James
 Date  : 24/05/2016
 Description : Updating Business Group Name , Department 
*/

declare businessDepartment_Id bigint(20)
declare Role_Category_ID tinyint
DECLARE StatusValue tinyint

set Role_Category_ID=(select roleCategoryId from scUser where userId=User_ID)

						update business set  
							 haveSite =have_Site
							,updatedBy = User_ID
							,updatedOn = utc_timestamp()
							,groupNameId = groupName_Id
							,isOtherGroupName = isOther_GroupName
							,OtherGroupName = group_Name
							,departmentGroupNameId = departmentGroupName_Id
							,workFlowId = coalesce(workflow_Id,workFlowId)
						where businessId = business_Id
    
					IF ROW_COUNT() > 0 THEN 
						if (have_Site = 0) then
							update businessSite set isDeleted =1 
							,updatedBy = User_ID
							,updatedOn = utc_timestamp()
							where businessId = business_Id and parentBusinessSiteId is not null             
						end if        
					end if                     
				
			set businessDepartment_Id=(select departmentId from businessDepartment 
										where businessId=business_Id and departmentName=business_DepartmentName and isDeleted=0)
			if coalesce(businessDepartment_Id,0)= 0 then
						insert into businessDepartment (
									businessId
								,	departmentName
								,	createdBy
								,	createdOn
								,	isDeleted )
						 values ( 	business_Id
								,	business_DepartmentName
								,	User_ID
								,	utc_timestamp()
								,	0)
                      if row_count()>0 then
							set businessDepartment_Id= last_insert_id()  
                      end if            
            end if 
			if coalesce(workflow_Id,0)<>0 then 
				    if (Role_Category_ID =3) then  
							insert into roleBusinessFunction (roleId,businessFunctionId,businessId,roleCategoryId,createdBy,createdOn)
							select rbf.roleId,rbf.businessFunctionId,business_Id,ri.roleCategoryId,User_ID,utc_timestamp()
							from roleBusinessFunction rbf
							inner join roleWorkFlow rwf on rbf.roleId = rwf.roleId
							inner join roleInfo ri on ri.roleId = rbf.roleId
							left join roleBusinessFunction rbf1 on rbf.roleId = rbf1.roleId and rbf.businessFunctionId = rbf1.businessFunctionId and rbf1.businessId =business_Id
							where rbf.businessId =0 and ri.roleCategoryId =Role_Category_ID and workFlowId = workflow_Id
							and rbf1.businessFunctionId is null and rbf1.roleId is null   
					else 
							insert into roleBusinessFunction (roleId,businessFunctionId,businessId,roleCategoryId,createdBy,createdOn)
							select rbf.roleId,rbf.businessFunctionId,business_Id,ri.roleCategoryId,User_ID,utc_timestamp()
							from roleBusinessFunction rbf
							inner join roleInfo ri on ri.roleId = rbf.roleId
							left join roleBusinessFunction rbf1 on rbf.roleId = rbf1.roleId and rbf.businessFunctionId = rbf1.businessFunctionId and rbf1.businessId =business_Id
							where rbf.businessId =0 and ri.roleCategoryId =Role_Category_ID 
							and rbf1.businessFunctionId is null and rbf1.roleId is null  
					end if
            end if
	select business_Id, businessDepartment_Id
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateBusinessWorkFlow` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateBusinessWorkFlow`( 
 IN business_Id bigint(20) 
,IN workflow_Id tinyint
,IN User_ID bigint(20) 
,IN Role_Category_ID tinyint
)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Updating Business Work Flow
 call UpdateBusinessWorkFlow(1, 1, 3, 4)

*/
	if (Role_Category_ID =3) then
		update business set workFlowId = workflow_Id ,updatedBy = User_ID
							,updatedOn = utc_timestamp()
		where businessId = business_Id
		
		IF ROW_COUNT() > 0 THEN
			SELECT 	business_Id 
			
               
			set @businessSite_Id = (select businessSiteId from businessSite where businessId=business_Id and parentBusinessSiteId is null)
               
			insert into roleBusinessFunction (roleId,businessFunctionId,businessId,roleCategoryId,createdBy,createdOn)
			select rbf.roleId,rbf.businessFunctionId,business_Id,ri.roleCategoryId,User_ID,utc_timestamp()
			from roleBusinessFunction rbf
			inner join roleWorkFlow rwf on rbf.roleId = rwf.roleId
			inner join roleInfo ri on ri.roleId = rbf.roleId
			left join roleBusinessFunction rbf1 on rbf.roleId = rbf1.roleId and rbf.businessFunctionId = rbf1.businessFunctionId and rbf1.businessId =business_Id
			where rbf.businessId =0 and ri.roleCategoryId =Role_Category_ID and workFlowId = workflow_Id
			and rbf1.businessFunctionId is null and rbf1.roleId is null   
                
		END IF
    else
		update agency set workFlowId = workflow_Id ,updatedBy = User_ID
							,updatedOn = utc_timestamp()
		where agencyId = business_Id
        
		
		IF ROW_COUNT() > 0 THEN
			SELECT 	business_Id
            
            insert into roleBusinessFunction (roleId,businessFunctionId,businessId,roleCategoryId,createdBy,createdOn)
			select rbf.roleId,rbf.businessFunctionId,business_Id,ri.roleCategoryId,User_ID,utc_timestamp()
			from roleBusinessFunction rbf
			inner join roleInfo ri on ri.roleId = rbf.roleId
			left join roleBusinessFunction rbf1 on rbf.roleId = rbf1.roleId and rbf.businessFunctionId = rbf1.businessFunctionId and rbf1.businessId =business_Id
			where rbf.businessId =0 and ri.roleCategoryId =Role_Category_ID 
			and rbf1.businessFunctionId is null and rbf1.roleId is null  
            
            
		END IF
    end if
    
	

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateContact` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateContact`( 
  IN user_Id bigint(20) 
, IN street_address_line1 longtext 
, IN street_address_line2 longtext 
, IN zip_code longtext  
, IN can_dob longtext 
, IN mobile_Phone longtext 
, IN created_By bigint(20) 
, IN encryption_Key	varchar(500)
)
BEGIN



/*
 Author: James
 Date  : 03/06/2015
 Description : Update candidate profile details from CSV upload
*/


declare StatusValue bit
set StatusValue = 0
		
			update scUser set encryptionKey=coalesce(encryption_Key,encryptionKey)
                    ,updatedBy = created_By
					,updatedOn = utc_timestamp() 
			where userId=user_Id

 
			update candidateDetail set 
					streetaddressline1 = street_address_line1
					,streetaddressline2 = street_address_line2
					,zipCode = zip_code			
					,dob = can_dob
					,updatedBy = created_By
					,updatedOn = utc_timestamp() 
			where candidateuserID = user_Id
			
			IF ROW_COUNT() > 0 THEN
				set StatusValue =1 
			end if 
	
	if (StatusValue =1) then 		 
			update userContact set   
					mobilePhone = mobile_Phone
			where userID = user_Id          
	end if
	
	select StatusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateDataForEncryption` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateDataForEncryption`(
	IN 	user_Id bigint
,	IN 	cn_Dob longtext
,	IN  streetAddress_Line1	longtext
,	IN  streetAddress_Line2	longtext
,	IN  zip_Code	longtext
,	IN  emgncyContact_Person	longtext
,	IN  emgncyContact_Reltn	longtext
,	IN  emgncyContact_Phone	longtext
,	IN  payroll_Pin	longtext
,	IN  home_Phone	longtext
,	IN  work_Phone	longtext
,	IN  mobile_Phone	longtext 
,	in 	created_By longtext
,IN encryption_Key varchar(100)
)
BEGIN
/* 
used for encrypting existing data 
*/

Declare status_value tinyint 

set status_value =0


	update scUser set encryptionKey=encryption_Key
	where userId=user_Id

	IF ROW_COUNT() > 0 THEN
		set status_value =1 
	end if 

	update candidateDetail set 
			streetAddressLine1	=	streetAddress_Line1
		,	streetAddressLine2	=	streetAddress_Line2
		,	zipCode	=	zip_Code
		,	dob	=	cn_dob
      --  ,	updatedBy = created_By
        ,	updatedOn = utc_timestamp()
	where candidateUserId = user_Id 

	IF ROW_COUNT() > 0 THEN
		set status_value =1 
	end if 

	update candidateEmergencyContact set 		
			emgncyContactPerson	=	emgncyContact_Person
		,	emgncyContactReltn	=	emgncyContact_Reltn
		,	emgncyContactPhone	=	emgncyContact_Phone
		-- ,	updatedBy = created_By
        ,	updatedOn = utc_timestamp()
	where	candidateUserId	=	user_Id  
	IF ROW_COUNT() > 0 THEN
		set status_value =1 
	end if 
/*
	update candidateUser set 
			pin =payroll_Pin	
	where candidateUserId = user_Id  
	IF ROW_COUNT() > 0 THEN
		set status_value =1 
	end if 
*/
	update userContact set 
			homePhone	=	home_Phone
		,	workPhone	=	work_Phone
		,	mobilePhone	=	mobile_Phone
		-- ,	updatedBy = created_By
        ,	updatedOn = utc_timestamp()
	where	userID	=	user_Id 
	IF ROW_COUNT() > 0 THEN
		set status_value =1 
	end if 
    
select status_value


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateDlSSNo` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateDlSSNo`(
IN candidateUser_Id bigint(20)
,IN dl_No varchar(15)
,IN ssn_No	varchar(15)
)
BEGIN


/*
 Author: Tijo
 Date  : 03/06/2015
 Description : Update candidate driving licence and SSN no
*/


	update candidateDetail set dlNo=dl_No,ssnNo=ssn_No 
    where candidateUserId=candidateUser_Id
    
    if row_count()>0 then
		select 1 as statusValue
    end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateGiveAwayRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateGiveAwayRequest`(
IN candidateUser_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN action_by BIGINT(20) ,
IN candidate_comments VARCHAR(2000)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update candidate giveaway requests
*/
	DECLARE businessSite_Id BIGINT(20)
	DECLARE subClassification_Id BIGINT(20)
	DECLARE department_Id BIGINT(20)
	DECLARE shift_StartDateTime DATETIME
	DECLARE shift_EndDateTime DATETIME
	DECLARE request_Id BIGINT(20)
	DECLARE timeDiff_InMinutes INT(11)
	
	SELECT so.businessSiteId,so.departmentId ,so.subClassificationId,so.shiftStartDateTime,so.shiftEndDateTime,tz.timeDiffInMinutes 
	INTO businessSite_Id,department_Id,subClassification_Id,shift_StartDateTime,shift_EndDateTime,timeDiff_InMinutes
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.shiftofferId=shiftOffer_Id
	
	IF DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)<shift_EndDateTime THEN
		
		UPDATE `candidateShiftOffer` 
			SET `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
				`status` = 4 , `comment` = candidate_comments
			WHERE `shiftofferId`=shiftOffer_Id
		
		IF ROW_COUNT() > 0 THEN	
			delete from candidateGiveAwayRequests
            where shiftOfferId=shiftOffer_Id
        
			INSERT INTO candidateGiveAwayRequests(shiftOfferId,candidateId,STATUS)
			SELECT shiftOffer_Id,t1.candidateId,18 FROM 
			(SELECT DISTINCT crd.candidateId
			FROM vwCandidateRosterDetails crd
			INNER JOIN scUser scu ON crd.candidateId=scu.userId
			WHERE crd.candidateId<>candidateUser_Id AND crd.businessSiteId=businessSite_Id AND crd.departmentId=department_Id AND crd.jobSubClassificationId=subClassification_Id  
				AND scu.isDeleted=0 AND CheckCandidateAvailability(crd.candidateId,shiftOffer_Id,shift_StartDateTime,shift_EndDateTime)=1) AS t1
			IF ROW_COUNT() = 0 THEN	
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
					`status` = 2 , `comment` = null
				WHERE `shiftofferId`=shiftOffer_Id
            end if
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,4 AS shiftStatusId,'GIVEAWAYREQUESTED' AS shiftStatus,
			CONCAT(scu.firstName,' ',scu.lastName) AS empFullName,
			so.shiftStartDateTime,so.shiftEndDateTime,so.createdBy,ud.deviceTypeID,ud.deviceToken,b.businessName,scu.RoleCategoryId ,cg.candidateId as candidateUserId
			FROM candidateGiveAwayRequests cg
			INNER JOIN candidateShiftOffer so ON cg.shiftOfferId=so.shiftOfferId
			INNER JOIN scUser scu ON so.candidateId=scu.userId
			LEFT JOIN userDevice ud ON cg.candidateId=ud.userID AND ud.isDeleted=0
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN business b ON bs.businessId=b.businessId
			WHERE cg.shiftOfferId=shiftOffer_Id
		ELSE
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,0 AS shiftStatusId,'NOTFOUND' AS shiftStatus,
			'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS createdBy,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS businessName,NULL AS RoleCategoryId,null as candidateUserId
		END IF
	ELSE
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,52 AS shiftStatusId,'TIMEELAPSED' AS shiftStatus,
			'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS createdBy,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS businessName,NULL AS RoleCategoryId,null as candidateUserId
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateMoreInfo` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateMoreInfo`(
  IN	candidateUser_Id	bigint(20)
  ,IN 	more_Information varchar(1000)
)
BEGIN


/*
 Author: James
 Date  : 03/06/2015
 Description : Update candidate more info
*/
 
		update candidateDetail set moreInformation =more_Information
		where candidateUserId=candidateUser_Id

		IF ROW_COUNT() > 0 THEN
			select 1 StatusValue 
            
				call insertUpdateCandidateScreenSectionDetail(candidateUser_Id,9,1)
		end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateNotified` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateNotified`(
in candidate_UserId	  bigint
,in upd_type	tinyint
)
BEGIN

/*
	type -- 1 -- Job Related
			2 -- LMH
*/

SET SQL_SAFE_UPDATES = 0

if upd_type=1 then
	update hireRequestCandidate set
		isCandidateNotified=1,
        updatedOn=utc_timestamp()
    where candidateUserId = candidate_UserId
    
    IF ROW_COUNT() > 0 THEN
		select 1 as statusValue 
    end if

elseif upd_type=2 then
	update lastMinuteHireCandidate set 
		candidateStatus=4,
        updatedOn=utc_timestamp()
	where candidateUserId = candidate_UserId
	
    IF ROW_COUNT() > 0 THEN
		select 1 as statusValue 
    end if

end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidatePersonalDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidatePersonalDetails`( IN candidate_id bigint(20) , IN street_address_line1 varchar(2000) , IN street_address_line2 varchar(2000) , IN country_id bigint(20) , IN state_id bigint(20) , IN city_id bigint(20) , IN zipCode varchar(10) , IN contact_Details varchar(2000) , IN dob date , IN emgncy_contact_person varchar(50) , IN emgncy_contact_reltn_id smallint(6) , IN emgncy_contact_phone_no varchar(50) , IN user_id bigint(20) , IN is_Delete bit(1) )
BEGIN 


DECLARE StatusValue bigint
DECLARE candidate_user_id bigint
set candidate_user_id = (select candidateUserId from candidateUser where userid =candidate_id)

if (is_Delete =0) then
	if not exists (select 1 as val from userDetail where userID= candidate_id) then
			insert into userDetail ( userID
			,streetAddressLine1 
			,streetAddressLine2 
			,countryId 
			,stateId 
			,cityId 
			,zipCode 
			,dob  
			,createdBy 
			,createdOn )
			values ( candidate_user_id 
			,street_address_line1 
			,street_address_line2 
			,country_id
			,state_id 
			,city_id
			,zipCode   
			,dob  
			,user_id 
			,utc_timestamp()  
			)

			IF ROW_COUNT() > 0 THEN
			Select 1 as StatusValue

			if (EMGNCY_CONTACT_PERSON is not null) then
				insert into candidateEmergencyContact (candidateUserId,emgncyContactPerson,emgncyContactReltnId,emgncyContactPhone)
				values (candidate_user_id,EMGNCY_CONTACT_PERSON,EMGNCY_CONTACT_RELTN_ID,emgncy_contact_phone_no)
			end if

			 call InsertUpdateUserContactDetails (candidate_user_id,contact_Details,is_Delete)
	end if
	else
		
		update userDetail set
		streetaddressline1 = street_address_line1
		,streetaddressline2 = street_address_line2
		,countryid = country_id
		,stateid = state_id
		,cityid = city_id
		,zipCode = zipCode
		,dob  = dob
		,updatedby = user_id
		,updatedon = utc_timestamp()
		where userid = candidate_id
		
		IF ROW_COUNT() > 0 THEN
			Select 1 as StatusValue

			if exists (select 1 from candidateEmergencyContact where candidateUserId =candidate_user_id) then
				update candidateEmergencyContact set 
										emgncycontactperson = emgncy_contact_person
										,emgncycontactreltnid = emgncy_contact_reltn_id
										,emgncycontactphone = emgncy_contact_phone_no
										where candidateUserId =candidate_user_id
			else
				insert into candidateEmergencyContact (candidateUserId,emgncyContactPerson,emgncyContactReltnId,emgncyContactPhone)
				values (candidate_user_id,emgncy_contact_person,emgncy_contact_reltn_id,emgncy_contact_phone_no)
			end if

			call InsertUpdateUserContactDetails (candidate_user_id,contact_Details,is_Delete)
		end if
	end if

else
	Delete from userDetail where userID=candidate_user_id
	IF ROW_COUNT() > 0 THEN
		Select 1 as StatusValue
		delete from candidateEmergencyContact where candidateUserId =candidate_user_id
		call InsertUpdateUserContactDetails (candidate_user_id,contact_Details,is_Delete)
	end if
end if


END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateProfileDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateProfileDetails`( IN candidate_id bigint(20) , IN name_salutation_Id smallint(6) , IN first_name varchar(100) , IN middle_name varchar(100) , IN last_name varchar(100) , IN nationality_Id bigint(20) , IN email_id varchar(200) , IN secondary_email varchar(200) , IN user_password varchar(10000) , IN contact_type_Id smallint(6) , IN contact_details varchar(50) , IN createdby_user_id bigint(20) , IN like_promotional_mails bit(1) , IN accept_terms_conditions bit(1) , IN reg_Complete_Percentage int(11) , IN is_Reg_Completed bit(1) , IN user_pin bigint(20) )
BEGIN 


DECLARE StatusValue bigint



					update scUser set 	 
							 nameSalutationId = name_salutation_Id
							,firstName = first_name
							,middleName = middle_name
							,lastName = last_name
							,emailId = email_id
							,UserPassword  =  user_password
							,updatedBy = createdby_user_id
							,updatedOn = utc_timestamp()
							,secondaryEmail = SECONDARY_EMAIL 
							,nationalityId = nationality_Id
							,pin = user_pin
							where userID = candidate_id
					
					update candidateUser set 
						-- 	regCompletePercentage = reg_Complete_Percentage
						--   ,isRegCompleted = is_Reg_Completed
						   likePromotionalMails = like_promotional_mails
						   -- ,acceptTermsConditions = accept_terms_conditions
						   ,updatedBy = createdby_user_id
						   ,updatedOn = utc_timestamp() 
						   where userID = candidate_id

					IF ROW_COUNT() > 0 THEN
						Select 1 as StatusValue
						-- call InsertUpdateUserContactDetails (candidate_id,contact_type_Id,contact_Details,0)

					if exists (select 1 from userContact where userID = candidate_id and contactTypeId = contact_Type_Id) then
								update userContact set 
													contactDetails = contact_details
													,isDeleted = 0
													where  userID = candidate_id and contactTypeId = contact_Type_Id
					else
						insert into userContact (userID , contactTypeId , contactDetails,isDeleted)
						values (candidate_id, contact_Type_Id, contact_details,0)
					end if
					end if
					




END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateShiftOfferUnAssign` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateShiftOfferUnAssign`()
BEGIN

/*
Author			: James
Date  			: 19/05/2016
Description 	: clearing roster staff assignment for demo users.

*/
Declare statusValue bit(1)
set statusValue=0


set SQL_SAFE_UPDATES=0

delete from candidateGiveAwayRequests
where shiftOfferId in (
	select so.shiftOfferId from userRole ur 
	inner join userRoleBusinessSite urbs on ur.userRoleId=urbs.userRoleId  and ur.isDeleted=0 and urbs.isDeleted=0
	inner join scUser u on u.userId=ur.userId and u.isDeleted=0   and u.userType=1
	inner join businessSite bs on bs.businessSiteId=urbs.businessSiteId and bs.isDeleted=0
	inner join timeZone tz ON bs.timeZoneId = tz.timeZoneId
	inner join candidateShiftOffer so on so.businessSiteId=urbs.businessSiteId and so.isDeleted=0  
	where datediff((u.createdOn) ,DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE))<=-15
	)
	if row_count()>0 then 
		set statusValue=1
    end if
    
	update userRole ur 
	inner join userRoleBusinessSite urbs on ur.userRoleId=urbs.userRoleId  and ur.isDeleted=0 and urbs.isDeleted=0
	inner join scUser u on u.userId=ur.userId and u.isDeleted=0   and u.userType=1
	inner join businessSite bs on bs.businessSiteId=urbs.businessSiteId and bs.isDeleted=0
	inner join timeZone tz ON bs.timeZoneId = tz.timeZoneId
	inner join candidateShiftOffer so on so.businessSiteId=urbs.businessSiteId and so.isDeleted=0  
		set so.candidateId=0,so.updatedBy=coalesce(so.updatedBy,so.createdBy),so.updatedOn=utc_timestamp()
	where datediff((u.createdOn) ,DATE_ADD(UTC_TIMESTAMP(), INTERVAL tz.timeDiffInMinutes MINUTE))<=-15 
    if row_count()>0 then 
		set statusValue=1
    end if
    
set SQL_SAFE_UPDATES=1

select statusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateShiftStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateShiftStatus`(
IN candidateUser_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN shift_status VARCHAR(50),
IN updated_by BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update candidate shift status
*/
	DECLARE status_Id BIGINT(20)
	DECLARE old_status_Id BIGINT(20)
	DECLARE old_candidate_Id BIGINT(20)
	DECLARE source_candidateId BIGINT(20)
	DECLARE source_shiftOfferId BIGINT(20)
	DECLARE isManagerReq BIT
	DECLARE timesheet_Id BIGINT(20)
	DECLARE current_jobProfileId BIGINT(20)
	DECLARE department_Id BIGINT(20)
	DECLARE subClassification_Id BIGINT(20)
	DECLARE businessSite_Id BIGINT(20)
	DECLARE start_DateTime DATETIME
	DECLARE end_DateTime DATETIME
	DECLARE created_By BIGINT(20)
	DECLARE timeDiff_InMinutes INT(11)
    Declare RoleCategory_Id tinyint(4)
	Declare upd_StatusId bigint(20) 
    declare IcantWork_Status bit(1)
    
	DECLARE affectedRows INT
	
	DECLARE is_available BIT
	
	DECLARE empFullName VARCHAR(100)
    DECLARE isFlexible_ShiftTime bit(1)
    DECLARE shiftEndTime_Type TINYINT(4)
    DECLARE shiftEndTime_Value varchar(30)
	
	SET SQL_SAFE_UPDATES=0
	
    set IcantWork_Status=(select isCantWork from candidateShiftOffer where shiftOfferId=shiftOffer_Id)
    set IcantWork_Status= coalesce(IcantWork_Status,0)
    
	SELECT CONCAT(scu.firstName,' ',scu.lastName)
	INTO empFullName
	FROM scUser scu WHERE scu.UserId=candidateUser_Id
	
	SELECT so.businessSiteId,so.departmentId,so.shiftStartDateTime,so.shiftEndDateTime,so.exchangedShiftOfferId,so.status,so.candidateId,tz.timeDiffInMinutes,so.isFlexibleShiftTime,so.shiftEndTimeType,so.shiftEndTimeValue 
	INTO businessSite_Id,department_Id,start_DateTime,end_DateTime,source_shiftOfferId,old_status_Id,old_candidate_Id,timeDiff_InMinutes,isFlexible_ShiftTime,shiftEndTime_Type,shiftEndTime_Value 
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.shiftOfferId=shiftOffer_Id
	
	IF DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)>=end_DateTime THEN
		SET shift_status='TIMEELAPSED'
	elseif DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)>=(
		select sos.shiftEndDateTime  from candidateShiftOffer  so 
		inner join  candidateShiftOffer sos on so.exchangedShiftOfferId=sos.shiftOfferId
		where so.shiftOfferId=shiftOffer_Id and shift_status='SWAPACCEPTED' limit 1) then  		
        SET shift_status='TIMEELAPSED'
	END IF
	
	SET is_available=CheckCandidateAvailability(candidateUser_Id,shiftOffer_Id,start_DateTime,end_DateTime)
	
    if exists(select candidateId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateId=candidateUser_Id and status in (62,63)) then 
		SET is_available=(select case when CheckCandidateRosterClash(candidateUser_Id,shiftOffer_Id,start_DateTime,end_DateTime)=1 then 0 else 1 end as isAvailable)
	end if
    
	SELECT reqManagerApproval INTO isManagerReq FROM businessSettings WHERE businessSiteId=businessSite_Id AND departmentId=department_Id
	
	IF shift_status='SWAPACCEPTED' THEN
		IF isManagerReq=1 THEN
			SET shift_status='SWAPACCEPTMANAGERINVITED'
		ELSE
			SET shift_status='SWAPACCEPTCOMPLETE'
		END IF
	ELSEIF shift_status='GIVEAWAYACCEPTED' THEN
		IF EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND candidateId=candidateUser_Id) THEN
			IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND STATUS=23) THEN
				IF isManagerReq=1 THEN
					SET shift_status='GIVEAWAYACCEPTMANAGERINVITED'
				ELSE
					SET shift_status='GIVEAWAYACCEPTCOMPLETE'
				END IF
			ELSE
				SET shift_status='GIVEAWAYMANAGERINVITED'
			END IF
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF (shift_status='SICKCOMPLETE' OR shift_status='SICKDECLINED' OR shift_status='STAFFACCEPTED' OR shift_status='STAFFDECLINED' OR shift_status='LASTMINUTESHIFTACCEPTED' OR shift_status='LASTMINUTESHIFTDECLINED') THEN
		IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND candidateId=candidateUser_Id) THEN
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	END IF
	if shift_status in('SICKCOMPLETE','ACCEPTED','STAFFACCEPTED','LASTMINUTESHIFTACCEPTED') and IcantWork_Status=1 then
			set shift_status='SICKCOMPLETE'
    end if
	IF shift_status='ACCEPTED' THEN
		IF not exists(select shiftOfferId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateId=candidateUser_Id and candidateStatus=1) THEN
			  
    		SET shift_status='ALREADYDEALLOCATED'
		ELSEIF old_status_Id in(1,60,62,63) THEN
			IF is_available=1 THEN
				SELECT shiftStartDateTime,shiftEndDateTime 
				INTO start_DateTime,end_DateTime FROM candidateShiftOffer
				WHERE shiftOfferId=shiftOffer_Id
			    
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 2,candidateId= candidateUser_Id ,isCantWork=0 -- `comment` = null
				WHERE `shiftOfferId`=shiftOffer_Id
				
                call InsertCandidateShiftCancel(shiftOffer_Id,57,candidateUser_Id,updated_by,null,null) 
                
                DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id 
            
				INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
				  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
				  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
				VALUES
				  (shiftOffer_Id,/*start_DateTime,end_DateTime,*/
				    candidateUser_Id,1,NULL,NULL,NULL,NULL,
				    candidateUser_Id,utc_timestamp(),candidateUser_Id,utc_timestamp()
				  ) 
				  
				SET timesheet_Id = LAST_INSERT_ID()
				SET affectedRows=ROW_COUNT()
				  
				INSERT INTO candidateTimesheetBreak(timeSheetId,startTime,endTime,breakType)
				SELECT timesheet_Id,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftOfferId=shiftOffer_Id AND isDeleted=0
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSEIF old_status_Id=3 THEN
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF shift_status='DECLINED' THEN
		IF not exists(select shiftOfferId from candidateGiveAwayRequests where shiftOfferId=shiftOffer_Id and candidateId=candidateUser_Id and candidateStatus=1) THEN
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		ELSE
				UPDATE `candidateGiveAwayRequests` 
				SET `status` = 3,candidateStatus=3 ,updatedBy = updated_by , updatedOn = utc_timestamp() 
				WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
				if not exists(select candidateId from  candidateGiveAwayRequests where shiftofferId=shiftOffer_Id and candidateStatus in(1,60)) then 
						UPDATE `candidateShiftOffer` 
						SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
							`status` = 3  -- `comment` = null
						WHERE `shiftOfferId`=shiftOffer_Id
				end if
                
			SET affectedRows=ROW_COUNT()
		END IF
	ELSEIF shift_status='SWAPACCEPTCOMPLETE' THEN
		IF old_status_Id=14 THEN
			IF is_available=1 THEN
				SELECT shiftOfferId,candidateId INTO source_shiftOfferId,source_candidateId FROM candidateShiftOffer
				WHERE exchangedShiftOfferId=shiftOffer_Id AND STATUS=7
			
                call InsertCandidateShiftOfferHistory (shiftOffer_Id,15) 
                
				-- update target candidate's record with source candidate ID
				UPDATE `candidateShiftOffer` 
				SET `candidateId` = source_candidateId , `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 24 , `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
				
				UPDATE candidateTimesheet SET candidateId=source_candidateId
				WHERE shiftOfferId=shiftOffer_Id
				 
                call InsertCandidateShiftOfferHistory (source_shiftOfferId,24) 
                
				-- update source candidate's record with target candidate ID
				UPDATE `candidateShiftOffer` 
				SET `candidateId` = candidateUser_Id , `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 15 , `comment` = NULL
				WHERE shiftOfferId=source_shiftOfferId
				
				UPDATE candidateTimesheet SET candidateId=candidateUser_Id
				WHERE shiftOfferId=source_shiftOfferId
				
				SET affectedRows=ROW_COUNT()
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSEIF old_status_Id=9 THEN 
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
		
	ELSEIF shift_status='SWAPACCEPTMANAGERINVITED' THEN
		IF old_status_Id=14 THEN
			IF is_available=1 THEN
				SELECT shiftOfferId,candidateId INTO source_shiftOfferId,source_candidateId FROM candidateShiftOffer
				WHERE exchangedShiftOfferId=shiftOffer_Id AND STATUS=7
				
				-- update target candidate's record 
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 30  -- `comment` = null
				WHERE `shiftOfferId`=shiftOffer_Id
				                 
				-- update source candidate's record 
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 22  -- `comment` = null
				WHERE `shiftOfferId`=source_shiftOfferId
				
				SET affectedRows=ROW_COUNT()
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSEIF old_status_Id=17 THEN 
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
		
	ELSEIF shift_status='SWAPACCEPTDECLINED' THEN
		IF old_status_Id=14 THEN
         
			-- update target candidate's record 
			UPDATE `candidateShiftOffer` 
			SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
				`status` = 9 ,`comment` = NULL
			WHERE `shiftOfferId`=shiftOffer_Id
			
		 	
			-- update source candidate's record 
			UPDATE `candidateShiftOffer` 
			SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
				`status` = 26 , `comment` = NULL
			WHERE `shiftOfferId`=source_shiftOfferId
			
			SET affectedRows=ROW_COUNT()
		ELSEIF old_status_Id=9 THEN 
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
		
	ELSEIF shift_status='GIVEAWAYACCEPTCOMPLETE' THEN
		IF old_status_Id=4 THEN
			IF is_available=1 THEN
				SELECT candidateId,jobProfileId,departmentId,subClassificationId,businessSiteId,shiftStartDateTime,shiftEndDateTime,createdBy 
				INTO source_candidateId,current_jobProfileId,department_Id,subClassification_Id,businessSite_Id,start_DateTime,end_DateTime,created_By FROM candidateShiftOffer
				WHERE shiftOfferId=shiftOffer_Id
			
				INSERT INTO candidateShiftOffer(candidateId,exchangedShiftOfferId,jobProfileId,departmentId,subClassificationId,
					businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue,STATUS,COMMENT,sourceModule,createdBy,createdOn,updatedBy,updatedOn)
				VALUES(candidateUser_Id,shiftOffer_Id,NULL,department_Id,subClassification_Id,
					businessSite_Id,start_DateTime,end_DateTime,start_DateTime,end_DateTime,isFlexible_ShiftTime,shiftEndTime_Type,shiftEndTime_Value,27,NULL,'ROSTER',created_By,utc_timestamp(),updated_by,utc_timestamp())
				
                set source_shiftOfferId=last_insert_id() 
                
				INSERT INTO candidateShiftBreaks(shiftOfferId,startTime,endTime,breakType)
					SELECT source_shiftOfferId,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftOfferId=shiftOffer_Id AND isDeleted=0 
				
                insert into candidateShiftOfferHistory
				(shiftOfferId,candidateUserId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,status,createdBy,createdOn)
				select source_shiftOfferId,candidateId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,19,createdBy,utc_timestamp() from candidateShiftOffer
				where `shiftOfferId`=shiftOffer_Id
                
				UPDATE `candidateShiftOffer` 
				SET `exchangedShiftOfferId` = source_shiftOfferId , `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 19  -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
				
                call InsertCandidateShiftCancel(shiftOffer_Id,56,null,updated_by,null,null) 
                
				DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
				
				UPDATE candidateTimesheet SET candidateId=candidateUser_Id,shiftOfferId=source_shiftOfferId
				WHERE shiftOfferId=shiftOffer_Id
				
				SET affectedRows=ROW_COUNT()
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSEIF old_status_Id=32 THEN 
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
		
	ELSEIF shift_status='GIVEAWAYACCEPTMANAGERINVITED' THEN
		IF old_status_Id=4 THEN
			IF is_available=1 THEN
				UPDATE `candidateGiveAwayRequests` 
				SET `status` = 23,candidateStatus=2 ,updatedBy = updated_by , updatedOn = utc_timestamp() 
				WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
				
				SET affectedRows=ROW_COUNT()
				
			UPDATE `candidateShiftOffer` 
			SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
				`status` = 31 -- ,`comment` = NULL
			WHERE `shiftOfferId`=shiftOffer_Id
            
				DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id AND candidateId<>candidateUser_Id
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSEIF old_status_Id=32 THEN 
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF shift_status='GIVEAWAYACCEPTDECLINED' THEN
		IF old_status_Id=4 THEN
			UPDATE `candidateGiveAwayRequests` 
			SET `status` = 6,candidateStatus=3 ,updatedBy = updated_by , updatedOn = utc_timestamp() 
			WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
			
			IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND STATUS=18) THEN
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 32  -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
			END IF
			
			SET affectedRows=ROW_COUNT()
		ELSEIF old_status_Id=32 THEN 
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF shift_status='SICKCOMPLETE' THEN
		IF old_status_Id in(1,40,46,38) THEN
			IF is_available=1 THEN
				SELECT candidateId,jobProfileId,departmentId,subClassificationId,businessSiteId,shiftStartDateTime,shiftEndDateTime,createdBy 
				INTO source_candidateId,current_jobProfileId,department_Id,subClassification_Id,businessSite_Id,start_DateTime,end_DateTime,created_By 
				FROM candidateShiftOffer
				WHERE shiftOfferId=shiftOffer_Id
			 				
				INSERT INTO candidateShiftOffer(candidateId,exchangedShiftOfferId,jobProfileId,departmentId,subClassificationId,
					businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue,STATUS,COMMENT,sourceModule,createdBy,createdOn,updatedBy,updatedOn,isCantWork,isNotified)
				VALUES(candidateUser_Id,shiftOffer_Id,NULL,department_Id,subClassification_Id,
					businessSite_Id,start_DateTime,end_DateTime,start_DateTime,end_DateTime,isFlexible_ShiftTime,shiftEndTime_Type,shiftEndTime_Value,2,NULL,'ROSTER',created_By,utc_timestamp(),updated_by,utc_timestamp(),0,1)
				
                set source_shiftOfferId=last_insert_id() 
                
				insert into candidateShiftOfferHistory(shiftOfferId,candidateUserId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,status,isNotified,createdBy,createdOn,updatedBy,updatedOn)
                select source_shiftOfferId,candidateUserId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,status,isNotified,createdBy,createdOn,updatedBy,updatedOn
				from candidateShiftOfferHistory 
				where shiftOfferId=shiftOffer_Id order by candidateShiftOfferHistoryId desc limit 1

                INSERT INTO candidateShiftBreaks(shiftOfferId,startTime,endTime,breakType)
					SELECT source_shiftOfferId,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftOfferId=shiftOffer_Id AND isDeleted=0 
			       
				UPDATE `candidateShiftOffer` 
				SET `exchangedShiftOfferId` = source_shiftOfferId , `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , candidateId=candidateUser_Id,
					`status` = 36 ,isCantWork=0 -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
				
                call InsertCandidateShiftCancel(shiftOffer_Id,57,candidateUser_Id,updated_by,null,null) 
                
				DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
				
				DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
				
				INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
				  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
				  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
				VALUES (source_shiftOfferId,/*start_DateTime,end_DateTime,*/
				    candidateUser_Id,1,NULL,NULL,NULL,NULL,
				    candidateUser_Id,utc_timestamp(),candidateUser_Id,utc_timestamp() ) 
				  
				SET timesheet_Id = LAST_INSERT_ID()
				SET affectedRows=ROW_COUNT()
				  
				INSERT INTO candidateTimesheetBreak(timeSheetId,startTime,endTime,breakType)
				SELECT timesheet_Id,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftOfferId=source_shiftOfferId AND isDeleted=0
					if  old_status_Id in(46) then
						UPDATE lastMinuteHireCandidate SET candidateStatus = 3 WHERE lastMinuteHireId in (SELECT lastMinuteHireId FROM lastMinuteHire WHERE shiftOfferId = shiftOffer_Id and isDeleted=0) AND candidateUserId = candidateUser_Id
						UPDATE lastMinuteHire SET STATUS = 3,shiftOfferId = source_shiftOfferId WHERE shiftOfferId = shiftOffer_Id 
						UPDATE candidateShiftOffer SET status = 48 WHERE `shiftOfferId`=source_shiftOfferId
					end if
            
            ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF shift_status='SICKDECLINED' THEN
		IF old_status_Id=36 THEN
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		ELSE
			UPDATE `candidateGiveAwayRequests` 
			SET `status` = 12,candidateStatus=3 ,updatedBy = updated_by , updatedOn = utc_timestamp() 
			WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
			
			IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND STATUS=39) THEN
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 12  -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
			END IF
			
			SET affectedRows=ROW_COUNT()
		END IF
	ELSEIF shift_status='STAFFACCEPTED' THEN
		IF old_status_Id=40 THEN
			IF is_available=1 THEN
				SELECT shiftStartDateTime,shiftEndDateTime 
				INTO start_DateTime,end_DateTime FROM candidateShiftOffer
				WHERE shiftOfferId=shiftOffer_Id
				
                 
				UPDATE `candidateShiftOffer` 
				SET `candidateId` = candidateUser_Id , `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 2  ,isCantWork=0 -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
				
                call InsertCandidateShiftCancel(shiftOffer_Id,57,candidateUser_Id,updated_by,null,null) 
                
				DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
				
				INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
				  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
				  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
				VALUES
				  (shiftOffer_Id,/*start_DateTime,end_DateTime,*/
				    candidateUser_Id,1,NULL,NULL,NULL,NULL,
				    candidateUser_Id,utc_timestamp(),candidateUser_Id,utc_timestamp()
				  ) 
				  
				SET timesheet_Id = LAST_INSERT_ID()
				SET affectedRows=ROW_COUNT()
				SET shift_status='ACCEPTED'
				  
				INSERT INTO candidateTimesheetBreak(timeSheetId,startTime,endTime,breakType)
				SELECT timesheet_Id,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftOfferId=shiftOffer_Id AND isDeleted=0
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF shift_status='STAFFDECLINED' THEN
		IF old_status_Id=2 THEN
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		ELSE
			UPDATE `candidateGiveAwayRequests` 
			SET `status` = 42,candidateStatus=3 ,updatedBy = updated_by , updatedOn = utc_timestamp() 
			WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
			
			IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND STATUS=41) THEN
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 42  -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
			END IF
			
			SET affectedRows=ROW_COUNT()
		END IF
	ELSEIF shift_status='LASTMINUTESHIFTACCEPTED' THEN	
		IF old_status_Id in(46,1,60,62,63) THEN
			IF is_available=1 THEN
				SELECT shiftStartDateTime,shiftEndDateTime 
				INTO start_DateTime,end_DateTime FROM candidateShiftOffer
				WHERE shiftOfferId=shiftOffer_Id
				
                call InsertCandidateShiftCancel(shiftOffer_Id,57,candidateUser_Id,updated_by,null,null) 
                
				UPDATE `candidateShiftOffer` 
				SET `candidateId` = candidateUser_Id , `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 48  ,isCantWork=0  -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
				
				DELETE FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id
				
				DELETE FROM candidateTimesheet WHERE shiftOfferId=shiftOffer_Id
				
				INSERT INTO `candidateTimesheet` (`shiftOfferId`,/*`shiftStartDateTime`,`shiftEndDateTime`,*/
				  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
				  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
				VALUES
				  (shiftOffer_Id,/*start_DateTime,end_DateTime,*/
				    candidateUser_Id,1,NULL,NULL,NULL,NULL,
				    candidateUser_Id,utc_timestamp(),candidateUser_Id,utc_timestamp()
				  ) 
				  
				SET timesheet_Id = LAST_INSERT_ID()
				SET affectedRows=ROW_COUNT()
				  
				INSERT INTO candidateTimesheetBreak(timeSheetId,startTime,endTime,breakType)
				SELECT timesheet_Id,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftOfferId=shiftOffer_Id AND isDeleted=0
				
				UPDATE lastMinuteHire SET STATUS = 3 WHERE shiftOfferId = shiftOffer_Id 
				UPDATE lastMinuteHireCandidate SET candidateStatus = 3 WHERE lastMinuteHireId in (SELECT lastMinuteHireId FROM lastMinuteHire WHERE shiftOfferId = shiftOffer_Id and isDeleted=0) AND candidateUserId = candidateUser_Id
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF shift_status='LASTMINUTESHIFTDECLINED' THEN
		IF old_status_Id in(48) THEN
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		ELSE
			UPDATE `candidateGiveAwayRequests` 
			SET `status` = 47,candidateStatus=3 ,updatedBy = updated_by , updatedOn = utc_timestamp() 
			WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
			
			UPDATE lastMinuteHireCandidate SET candidateStatus = 4 WHERE lastMinuteHireId in (SELECT lastMinuteHireId FROM lastMinuteHire WHERE shiftOfferId = shiftOffer_Id and isDeleted=0) AND candidateUserId = candidateUser_Id
			
			IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND candidateStatus=1) THEN
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = updated_by , `updatedOn` = utc_timestamp() , 
					`status` = 47  -- `comment` = NULL
				WHERE `shiftOfferId`=shiftOffer_Id
				
				UPDATE lastMinuteHire SET STATUS = 4 WHERE shiftOfferId = shiftOffer_Id 
			END IF
			
			SET affectedRows=ROW_COUNT()
		END IF
	END IF
	
	SET SQL_SAFE_UPDATES=1
	
	SELECT statusId INTO status_Id FROM statusLookup WHERE statusName=shift_status
	
	select status into upd_StatusId from candidateShiftOffer where shiftOfferId=shiftOffer_Id 
    
    set RoleCategory_Id=(select roleCategoryId from scUser where userId=candidateUser_Id)
	
	IF shift_status='GIVEAWAYALREADYASSIGNED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,43 AS shiftStatusId,'ALREADYASSIGNED' AS shiftStatus,
		'' AS targetEmpFullName, '' AS sourceEmpFullName, NULL AS shiftStartDateTime, NULL AS shiftEndDateTime,
		NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId,candidateUser_Id as CandidateUserIdDevice,IcantWork_Status as iCantWork
	ELSEIF shift_status='ALREADYDECLINED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,43 AS shiftStatusId,'ALREADYDECLINED' AS shiftStatus,
		'' AS targetEmpFullName, '' AS sourceEmpFullName, NULL AS shiftStartDateTime, NULL AS shiftEndDateTime,
		NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId,candidateUser_Id as CandidateUserIdDevice,IcantWork_Status as iCantWork
	ELSEIF shift_status='ALREADYDEALLOCATED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,43 AS shiftStatusId,'ALREADYDEALLOCATED' AS shiftStatus,
		'' AS targetEmpFullName, '' AS sourceEmpFullName, NULL AS shiftStartDateTime, NULL AS shiftEndDateTime,
		NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId,candidateUser_Id as CandidateUserIdDevice,IcantWork_Status as iCantWork
	ELSEIF shift_status='TIMEELAPSED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,52 AS shiftStatusId,'TIMEELAPSED' AS shiftStatus,
		'' AS targetEmpFullName, '' AS sourceEmpFullName, NULL AS shiftStartDateTime, NULL AS shiftEndDateTime,
		NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId,candidateUser_Id as CandidateUserIdDevice,IcantWork_Status as iCantWork
		
	ELSEIF shift_status='GIVEAWAYMANAGERINVITED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,44 AS shiftStatusId,'WENTTOMANAGER' AS shiftStatus,
		'' AS targetEmpFullName, '' AS sourceEmpFullName, NULL AS shiftStartDateTime, NULL AS shiftEndDateTime,
		NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId,candidateUser_Id as CandidateUserIdDevice,IcantWork_Status as iCantWork
		
	ELSEIF affectedRows > 0 OR shift_status='SHIFTOVERLAP' THEN
	
		IF shift_status='SWAPACCEPTMANAGERINVITED' THEN
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
			empFullName AS targetEmpFullName, 
			CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
			so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu1.RoleCategoryId ,ucs.userId as CandidateUserIdDevice,IcantWork_Status as iCantWork
			FROM candidateShiftOffer so
			INNER JOIN scUser scu ON so.candidateId=scu.userId
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			INNER JOIN scUser scu1 ON ucs.userId=scu1.userId
			-- LEFT JOIN userDevice ud ON ucs.userId=ud.userID AND ud.isDeleted=0
			WHERE so.shiftOfferId=source_shiftOfferId AND ucs.RoleCategoryId = 3
		ELSEIF shift_status in('GIVEAWAYACCEPTMANAGERINVITED','LASTMINUTESHIFTACCEPTED')  THEN
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
			empFullName AS targetEmpFullName, 
			CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
			so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken
            , scu1.RoleCategoryId as RoleCategoryId, ucs.userId   as CandidateUserIdDevice,IcantWork_Status as iCantWork
			FROM candidateShiftOffer so
			INNER JOIN scUser scu ON so.candidateId=scu.userId
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			INNER JOIN scUser scu1 ON ucs.userId=scu1.userId
			-- LEFT JOIN userDevice ud ON ucs.userId=ud.userID AND ud.isDeleted=0
			WHERE so.shiftOfferId=shiftOffer_Id AND ucs.RoleCategoryId = 3
	   ELSEIF shift_status in('SICKDECLINED') and IcantWork_Status=1 then
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
			empFullName AS targetEmpFullName, 
			(select CONCAT(firstName,' ',lastName) AS sourceEmpFullName 
			from candidateShiftCancel sc inner join scUser u on sc.candidateUserId=u.userId
			where shiftOfferId=shiftOffer_Id and sc.status=10 order by candidateShiftCancelId desc limit 1) AS sourceEmpFullName,
			so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu1.RoleCategoryId ,ucs.userId as CandidateUserIdDevice,IcantWork_Status as iCantWork
			FROM candidateShiftOffer so
           --  left join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
			left JOIN scUser scu ON so.candidateId=scu.userId
           -- left join scUser scut on  sot.candidateId=scut.userId
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			INNER JOIN scUser scu1 ON ucs.userId=scu1.userId 
			WHERE so.shiftOfferId=shiftOffer_Id AND ucs.RoleCategoryId = 3
		ELSEIF (shift_status in('ACCEPTED','SICKCOMPLETE') and IcantWork_Status=1) or (shift_status in('DECLINED')   and IcantWork_Status=1) then
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
			empFullName AS targetEmpFullName, 
			(select CONCAT(firstName,' ',lastName) AS sourceEmpFullName 
			from candidateShiftCancel sc inner join scUser u on sc.candidateUserId=u.userId
			where shiftOfferId=shiftOffer_Id and sc.status=10 order by candidateShiftCancelId desc limit 1) AS sourceEmpFullName,
			so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu1.RoleCategoryId ,ucs.userId as CandidateUserIdDevice,IcantWork_Status as iCantWork
			FROM candidateShiftOffer so
           --  left join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
			left JOIN scUser scu ON so.candidateId=scu.userId
           -- left join scUser scut on  sot.candidateId=scut.userId
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			INNER JOIN scUser scu1 ON ucs.userId=scu1.userId 
			WHERE so.shiftOfferId=shiftOffer_Id AND ucs.RoleCategoryId = 3

		ELSEIF shift_status in('GIVEAWAYACCEPTDECLINED','LASTMINUTESHIFTDECLINED','SICKDECLINED' ) or (shift_status='DECLINED' and upd_StatusId=3 ) THEN
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,upd_StatusId AS shiftStatusId,sl.statusName AS shiftStatus,
			empFullName AS targetEmpFullName, 
			CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
			so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken
            ,case when so.status=32 then scu.RoleCategoryId else scu1.RoleCategoryId end RoleCategoryId
			,case when so.status=32 then so.candidateId else ucs.userId end as CandidateUserIdDevice,IcantWork_Status as iCantWork
            ,IcantWork_Status as iCantWork
			FROM candidateShiftOffer so
			left JOIN scUser scu ON so.candidateId=scu.userId
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			INNER JOIN scUser scu1 ON ucs.userId=scu1.userId
			-- LEFT JOIN userDevice ud ON ucs.userId=ud.userID AND ud.isDeleted=0
            left join  statusLookup sl on sl.statusId=so.status
			WHERE so.shiftOfferId=shiftOffer_Id AND ucs.RoleCategoryId = 3
		elseIf shift_status='SWAPACCEPTDECLINED' then
				SELECT so.candidateId AS candidateId,so.shiftOfferId AS shiftOfferId , status_Id AS shiftStatusId,shift_status AS shiftStatus,
				CONCAT(scu.firstName,' ',scu.lastName) AS targetEmpFullName, 
				CONCAT(scut.firstName,' ',scut.lastName) AS sourceEmpFullName,
				sot.shiftStartDateTime,sot.shiftEndDateTime ,null as deviceTypeID,null as deviceToken,scut.RoleCategoryId ,sot.candidateId as CandidateUserIdDevice,IcantWork_Status as iCantWork
				FROM candidateShiftOffer so
				INNER JOIN scUser scu ON so.candidateId=scu.userId 
				inner join candidateShiftOffer sot on sot.shiftOfferId=so.exchangedShiftOfferId
				INNER JOIN scUser scut ON sot.candidateId=scut.userId 
				-- LEFT JOIN userDevice ud ON sot.candidateId=ud.userID AND ud.isDeleted=0
				where so.shiftOfferId=shiftOffer_Id             
        
		ELSEIF shift_status='GIVEAWAYACCEPTCOMPLETE' OR shift_status='SWAPACCEPTCOMPLETE' THEN
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
				empFullName AS targetEmpFullName, 
				CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
				so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu.RoleCategoryId ,scu.userId as CandidateUserIdDevice,IcantWork_Status as iCantWork
			FROM candidateShiftOffer so
			INNER JOIN scUser scu ON so.candidateId=scu.userId
			-- LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
			WHERE so.shiftOfferId=shiftOffer_Id
		ELSE
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
			'' AS targetEmpFullName, '' AS sourceEmpFullName, start_DateTime AS shiftStartDateTime, end_DateTime AS shiftEndDateTime,
			NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId,candidateUser_Id as CandidateUserIdDevice,IcantWork_Status as iCantWork
		END IF
	ELSE
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,45 AS shiftStatusId,'NOTFOUND' AS shiftStatus,
		'' AS targetEmpFullName, '' AS sourceEmpFullName, start_DateTime AS shiftStartDateTime, end_DateTime AS shiftEndDateTime,
		NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId,candidateUser_Id as CandidateUserIdDevice,IcantWork_Status as iCantWork
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateShiftStatusByManager` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateShiftStatusByManager`(
IN candidateUser_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN shift_status VARCHAR(50),
IN action_by BIGINT(20),
IN comments VARCHAR(2000))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update shift status by manager
*/
	DECLARE status_Id BIGINT(20)
	DECLARE old_status_Id BIGINT(20)
	DECLARE source_candidateId BIGINT(20)
	DECLARE source_shiftOfferId BIGINT(20)
	DECLARE current_jobProfileId BIGINT(20)
	DECLARE department_Id BIGINT(20)
	DECLARE subClassification_Id BIGINT(20)
	DECLARE businessSite_Id BIGINT(20)
	DECLARE start_DateTime DATETIME
	DECLARE end_DateTime DATETIME
	DECLARE rowCount BIGINT(20)
	DECLARE is_available BIT
	DECLARE timeDiff_InMinutes INT(11)
	Declare RoleCategory_Id tinyint(4)
    DECLARE isFlexible_ShiftTime bit(1)
    DECLARE shiftEndTime_Type TINYINT(4)
    DECLARE shiftEndTime_Value varchar(30)
    
	SET SQL_SAFE_UPDATES=0
	
	/*UPDATE `candidateShiftOffer` 
		SET `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
			`status` = status_Id , `comment` = comments
		WHERE `shiftofferId`=shiftOffer_Id*/
	
	SELECT so.exchangedShiftOfferId,so.shiftStartDateTime,so.shiftEndDateTime,so.status,tz.timeDiffInMinutes,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue   
	INTO source_shiftOfferId ,start_DateTime,end_DateTime,old_status_Id,timeDiff_InMinutes,isFlexible_ShiftTime,shiftEndTime_Type,shiftEndTime_Value
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.shiftOfferId=shiftOffer_Id
	
	IF DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)>=end_DateTime THEN
		SET shift_status='TIMEELAPSED'
	elseif DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)>=(
		select sos.shiftEndDateTime  from candidateShiftOffer  so 
		inner join  candidateShiftOffer sos on so.exchangedShiftOfferId=sos.shiftOfferId
		where so.shiftOfferId=shiftOffer_Id and shift_status='SWAPACCEPTMANAGERAPPROVED' limit 1) then  		
        SET shift_status='TIMEELAPSED'
	END IF
	
	SET is_available=CheckCandidateAvailability(candidateUser_Id,shiftOffer_Id,start_DateTime,end_DateTime)
	
	SELECT candidateId INTO source_candidateId FROM candidateShiftOffer
	WHERE shiftOfferId=source_shiftOfferId
		
	IF shift_status='SWAPACCEPTMANAGERAPPROVED' THEN
		IF old_status_Id=30 THEN
			IF is_available=1 THEN
				
				call InsertCandidateShiftOfferHistory (shiftOffer_Id,16) 
            
				-- update target candidate's record 
				UPDATE `candidateShiftOffer` 
				SET `candidateId` = source_candidateId , `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
					`status` = 29 , `comment` = comments
				WHERE `shiftofferId`=shiftOffer_Id
				
				UPDATE candidateTimesheet SET candidateId=source_candidateId
				WHERE shiftOfferId=shiftOffer_Id
				
                call InsertCandidateShiftOfferHistory (source_shiftOfferId,29) 
                
				-- update source candidate's record 
				UPDATE `candidateShiftOffer` 
				SET `candidateId` = candidateUser_Id , `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
					`status` = 16 , `comment` = comments
				WHERE `shiftofferId`=source_shiftOfferId
					
				UPDATE candidateTimesheet SET candidateId=candidateUser_Id
				WHERE shiftOfferId=source_shiftOfferId
				
				SET rowCount=ROW_COUNT()
			
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSEIF old_status_Id=17 THEN
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
		
	ELSEIF shift_status='SWAPACCEPTMANAGERDECLINED' THEN
		IF old_status_Id=29 THEN
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		ELSEIF old_status_Id=17 THEN
			SET shift_status='ALREADYDECLINED'
		ELSE
			-- update target candidate's record 
			UPDATE `candidateShiftOffer` 
			SET `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
				`status` = 17 , `comment` = comments
			WHERE `shiftofferId`=shiftOffer_Id
			
			-- update source candidate's record 
			UPDATE `candidateShiftOffer` 
			SET `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
				`status` = 25 , `comment` = comments
			WHERE `shiftofferId`=source_shiftOfferId
			
			SET rowCount=ROW_COUNT()
		END IF
		
	ELSEIF shift_status='GIVEAWAYACCEPTMANAGERAPPROVED' THEN
		IF old_status_Id=31 THEN
			IF is_available=1 THEN
				SELECT candidateId,jobProfileId,departmentId,subClassificationId,businessSiteId,shiftStartDateTime,shiftEndDateTime 
				INTO source_candidateId,current_jobProfileId,department_Id,subClassification_Id,businessSite_Id,start_DateTime,end_DateTime FROM candidateShiftOffer
				WHERE shiftOfferId=shiftOffer_Id
				 					
				INSERT INTO candidateShiftOffer(candidateId,exchangedShiftOfferId,jobProfileId,departmentId,subClassificationId,
					businessSiteId,shiftStartDateTime,shiftEndDateTime,actualShiftStartDateTime,actualShiftEndDateTime,isFlexibleShiftTime,shiftEndTimeType,shiftEndTimeValue,STATUS,COMMENT,sourceModule,createdBy,createdOn,updatedBy,updatedOn)
				VALUES(candidateUser_Id,shiftOffer_Id,NULL,department_Id,subClassification_Id,
					businessSite_Id,start_DateTime,end_DateTime,start_DateTime,end_DateTime,isFlexible_ShiftTime,shiftEndTime_Type,shiftEndTime_Value,20,comments,'ROSTER',action_by,utc_timestamp(),action_by,utc_timestamp())
				
                set source_shiftOfferId=last_insert_id() 
				INSERT INTO candidateShiftBreaks(shiftOfferId,startTime,endTime,breakType)
					SELECT source_shiftOfferId,startTime,endTime,breakType FROM candidateShiftBreaks WHERE shiftOfferId=shiftOffer_Id AND isDeleted=0 
				
				insert into candidateShiftOfferHistory
				(shiftOfferId,candidateUserId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,status,createdBy,createdOn)
				select source_shiftOfferId,candidateId,exchangedShiftOfferId,shiftStartDateTime,shiftEndDateTime,33,createdBy,utc_timestamp() from candidateShiftOffer
				where `shiftOfferId`=shiftOffer_Id
                
				UPDATE `candidateShiftOffer` 
				SET `exchangedShiftOfferId` = source_shiftOfferId , `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
					`status` = 33   ,`comment` = comments
				WHERE `shiftOfferId`=shiftOffer_Id
                
				call InsertCandidateShiftCancel(shiftOffer_Id,56,null,action_by,comments,null)   
                
				DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
				
				UPDATE candidateTimesheet SET candidateId=candidateUser_Id,shiftOfferId=source_shiftOfferId
				WHERE shiftOfferId=shiftOffer_Id
				
				SET rowCount=ROW_COUNT()
			ELSE
				SET shift_status='SHIFTOVERLAP'
			END IF
		ELSEIF old_status_Id=28 THEN
			SET shift_status='ALREADYDECLINED'
		ELSE
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		END IF
	ELSEIF shift_status='GIVEAWAYACCEPTMANAGERDECLINED' THEN
		IF old_status_Id=33 THEN
			SET shift_status='GIVEAWAYALREADYASSIGNED'
		ELSEIF old_status_Id=28 THEN
			SET shift_status='ALREADYDECLINED'
		ELSE
			UPDATE `candidateGiveAwayRequests` 
			SET `status` = 21,candidateStatus=3 ,updatedBy = action_by , updatedOn = utc_timestamp() 
			WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
			
			SET rowCount=ROW_COUNT() 			
             call InsertCandidateShiftCancel(shiftOffer_Id,55,null,action_by,comments,null)    
                    
			IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE shiftOfferId=shiftOffer_Id AND STATUS=18) THEN
				UPDATE `candidateShiftOffer` 
				SET `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
					`status` = 28 ,`comment` = comments
				WHERE `shiftOfferId`=shiftOffer_Id
			END IF
		
		END IF
	END IF
	
	SET SQL_SAFE_UPDATES=1
	
	SELECT statusId INTO status_Id FROM statusLookup WHERE statusName=shift_status
	set RoleCategory_Id=(select roleCategoryId from scUser where userId=candidateUser_Id)
    
	IF rowCount > 0 OR shift_status='SHIFTOVERLAP' THEN
	
		IF shift_status in('SWAPACCEPTMANAGERAPPROVED' ,'GIVEAWAYACCEPTMANAGERAPPROVED','SWAPACCEPTMANAGERDECLINED') THEN
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
				CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
				so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu.RoleCategoryId,b.businessName,so.candidateId as candidateUserIdNotification
			FROM candidateShiftOffer so
			INNER JOIN scUser scu ON so.candidateId=scu.userId 
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN business b ON bs.businessId=b.businessId
			WHERE so.shiftOfferId=shiftOffer_Id
			UNION
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
			CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
			so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu.RoleCategoryId,b.businessName,so.candidateId as candidateUserIdNotification
			FROM candidateShiftOffer so
			INNER JOIN scUser scu ON so.candidateId=scu.userId 
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN business b ON bs.businessId=b.businessId
			WHERE so.shiftOfferId=source_shiftOfferId
		elseIf shift_status in('GIVEAWAYACCEPTMANAGERDECLINED') THEN
			SELECT sg.candidateId AS candidateId,shiftOffer_Id AS shiftofferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
				CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
				so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu.RoleCategoryId,b.businessName,sg.candidateId as candidateUserIdNotification
			FROM candidateShiftOffer so
            inner join  candidateGiveAwayRequests sg on so.shiftOfferId=sg.shiftOfferId and sg.candidateId=candidateUser_Id
			INNER JOIN scUser scu ON sg.candidateId=scu.userId 
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN business b ON bs.businessId=b.businessId
			WHERE so.shiftOfferId=shiftOffer_Id 
            union            
            SELECT so.candidateId AS candidateId,shiftOffer_Id AS shiftofferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
				CONCAT(scu.firstName,' ',scu.lastName) AS sourceEmpFullName,
				so.shiftStartDateTime,so.shiftEndDateTime,null as deviceTypeID,null as deviceToken,scu.RoleCategoryId,b.businessName,so.candidateId as candidateUserIdNotification
			FROM candidateShiftOffer so
			INNER JOIN scUser scu ON so.candidateId=scu.userId 
			INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
			INNER JOIN business b ON bs.businessId=b.businessId
			WHERE so.shiftOfferId=shiftOffer_Id 
            
          --  delete from candidateGiveAwayRequests WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
		ELSE
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,status_Id AS shiftStatusId,shift_status AS shiftStatus,
			'' AS sourceEmpFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId, NULL AS businessName,candidateUser_Id as candidateUserIdNotification 
		END IF
	ELSEIF shift_status='TIMEELAPSED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,52 AS shiftStatusId,'TIMEELAPSED' AS shiftStatus,
		'' AS sourceEmpFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId, NULL AS businessName,candidateUser_Id as candidateUserIdNotification  
	ELSEIF shift_status='GIVEAWAYALREADYASSIGNED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,43 AS shiftStatusId,'GIVEAWAYALREADYASSIGNED' AS shiftStatus,
		'' AS sourceEmpFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId, NULL AS businessName,candidateUser_Id as candidateUserIdNotification 
	ELSEIF shift_status='ALREADYDECLINED' THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,50 AS shiftStatusId,'ALREADYDECLINED' AS shiftStatus,
		'' AS sourceEmpFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId, NULL AS businessName,candidateUser_Id as candidateUserIdNotification 
	ELSE
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,0 AS shiftStatusId,'NOTFOUND' AS shiftStatus,
		'' AS sourceEmpFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,RoleCategory_Id AS RoleCategoryId, NULL AS businessName,candidateUser_Id as candidateUserIdNotification 
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateSickRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateSickRequest`(
IN candidateUser_Id BIGINT(20),
in shiftOffer_Id BIGINT(20),
in action_by bigint(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update sick request
*/
	DECLARE timeDiff_InMinutes INT(11)
	DECLARE shift_EndDateTime DATETIME
	
	SELECT tz.timeDiffInMinutes,so.shiftEndDateTime INTO timeDiff_InMinutes,shift_EndDateTime
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.shiftOfferId=shiftOffer_Id
	
	IF DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE)<shift_EndDateTime THEN
		UPDATE `candidateShiftOffer` 
			SET `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
				`status` = 10 , `comment` = NULL,isCantWork=1
			WHERE `shiftOfferId`=shiftOffer_Id
            
		 call InsertCandidateShiftOfferHistory (shiftOffer_Id,null) 
         
		IF ROW_COUNT() > 0 THEN	
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,10 AS shiftStatusId,'SICK' AS shiftStatus,
			CONCAT(scu.firstName,' ',scu.lastName) AS empFullName,
				so.shiftStartDateTime,so.shiftEndDateTime,ucs.userId as managerId,ud.deviceTypeID,ud.deviceToken,scu1.RoleCategoryId 
			FROM candidateShiftOffer so
			INNER JOIN scUser scu ON so.candidateId=scu.userId
			INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
			INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
			INNER JOIN scUser scu1 ON ucs.userId=scu1.userId
			LEFT JOIN userDevice ud ON ucs.userId=ud.userID AND ud.isDeleted=0
			WHERE shiftOfferId=shiftOffer_Id AND ucs.RoleCategoryId = 3
		ELSE
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,0 AS shiftStatusId,'NOTFOUND' AS shiftStatus,
				NULL AS employeeName,NULL AS startDateTime,NULL AS endDateTime,
				NULL AS managerId,NULL AS deviceTypeId,NULL AS deviceToken,NULL AS RoleCategoryId
		END IF
	ELSE
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,52 AS shiftStatusId,'TIMEELAPSED' AS shiftStatus,
			NULL AS employeeName,NULL AS startDateTime,NULL AS endDateTime,
			NULL AS managerId,NULL AS deviceTypeId,NULL AS deviceToken,NULL AS RoleCategoryId
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateSwapRequest` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateSwapRequest`(
IN candidateUser_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN targetCandidateUser_Id BIGINT(20),
IN targetShiftoffer_Id BIGINT(20),
IN action_by BIGINT(20),
IN comments VARCHAR(2000))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update swap request
*/
	DECLARE countRow INT
	DECLARE start_DateTime DATETIME
	DECLARE end_DateTime DATETIME
	DECLARE is_available BIT
	
	SELECT shiftStartDateTime,shiftEndDateTime 
	INTO start_DateTime,end_DateTime FROM candidateShiftOffer
	WHERE shiftOfferId=targetShiftoffer_Id
	
	SET is_available=CheckCandidateAvailability(candidateUser_Id,shiftOffer_Id,start_DateTime,end_DateTime)
	
	IF is_available=1 THEN
	
		SELECT shiftStartDateTime,shiftEndDateTime 
		INTO start_DateTime,end_DateTime FROM candidateShiftOffer
		WHERE shiftOfferId=shiftOffer_Id
		
		SET is_available=CheckCandidateAvailability(targetCandidateUser_Id,targetShiftoffer_Id,start_DateTime,end_DateTime)	
	END IF
	
	IF is_available=1 THEN
	
		UPDATE `candidateShiftOffer` 
		SET exchangedShiftOfferId = targetShiftoffer_Id , `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
			`status` = 7 -- , `comment` = comments
		WHERE `shiftOfferId`=shiftOffer_Id
		
		SET countRow =  ROW_COUNT()
		
		IF countRow > 0 THEN
			SET countRow =  0
			
			UPDATE `candidateShiftOffer` 
			SET exchangedShiftOfferId = shiftOffer_Id , `updatedBy` = action_by , `updatedOn` = utc_timestamp() , 
				`status` = 14 , `comment` = comments
			WHERE `shiftOfferId`=targetShiftoffer_Id
			
			SET countRow =  ROW_COUNT()
			
			IF countRow > 0 THEN
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,7 AS shiftStatusId,'SWAPREQUESTED' AS shiftStatus,
				CONCAT(scu.firstName,' ',scu.lastName) AS empFullName,
				so.shiftStartDateTime,so.shiftEndDateTime,ud.deviceTypeID,ud.deviceToken,b.businessName,scu.RoleCategoryId
				FROM candidateShiftOffer so 
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				INNER JOIN candidateShiftOffer so1 ON so.exchangedShiftOfferId=so1.shiftOfferId
				LEFT JOIN userDevice ud ON so1.candidateId=ud.userID AND ud.isDeleted=0
				INNER JOIN businessSite bs ON so1.businessSiteId=bs.businessSiteId
				INNER JOIN business b ON bs.businessId=b.businessId
				WHERE so.shiftOfferId=shiftOffer_Id
			ELSE
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,0 AS shiftStatusId,'TARGETUPDATEFAILED' AS shiftStatus,
				'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS businessName,NULL AS RoleCategoryId
			END IF
		ELSE
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftId,0 AS shiftStatusId,'SOURCEUPDATEFAILED' AS shiftStatus,
			'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS businessName,NULL AS RoleCategoryId
		END IF
	ELSE
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftId,37 AS shiftStatusId,'SHIFTOVERLAP' AS shiftStatus,
		'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS businessName,NULL AS RoleCategoryId
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateCandidateUnavailableTime` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateCandidateUnavailableTime`(
in unavailable_Id bigint(20),
IN candidate_UserId BIGINT(20),
in start_DateTime datetime,
in end_DateTime datetime,
in unavailreason varchar(2000),
in performAction varchar(10))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update Unavailable time
*/
	IF performAction='DELETE' THEN
		DELETE FROM candidateUnavailability 
		WHERE unavailabilityId=unavailable_Id
	ELSEIF performAction='UPDATE' THEN
		UPDATE candidateUnavailability 
		SET candidateId=candidate_UserId,
			startDateTime=start_DateTime,endDateTime=end_DateTime,reason=unavailreason
		WHERE unavailabilityId=unavailable_Id
	ELSE
		INSERT INTO `candidateUnavailability` (
		  `candidateId`,`startDateTime`,`endDateTime`,`reason`) 
		VALUES
		  (candidate_UserId,start_DateTime,end_DateTime,unavailreason)
		  
		SET unavailable_Id = LAST_INSERT_ID()
	END IF
	
	SELECT unavailable_Id AS unavailabilityId,candidate_UserId AS candidateId
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateDeleteGiveAwayNotificationLog` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateDeleteGiveAwayNotificationLog`(
IN candidateUser_Id BIGINT(20),
in shiftOffer_Id BIGINT(20),
in isDeleted bit)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : update/delete giveaway logs
*/
	SET SQL_SAFE_UPDATES=0
	
	IF NOT EXISTS(SELECT 1 FROM candidateGiveAwayRequests WHERE candidateId=candidateUser_Id AND shiftofferId=shiftOffer_Id) THEN
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,0 AS shiftStatusId,'NOTEXISTS' AS shiftStatus
	ELSE
		IF isDeleted=0 THEN
			UPDATE `candidateGiveAwayRequests` 
			SET `status` = 3
			WHERE `shiftofferId`=shiftOffer_Id AND `candidateId`=candidateUser_Id
		
			IF ROW_COUNT() > 0 THEN	
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,4 AS shiftStatusId,'GIVEAWAYREQUESTED' AS shiftStatus
			ELSE
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftofferId,0 AS shiftStatusId,'NOTFOUND' AS shiftStatus
			END IF
		ELSE
			DELETE FROM candidateGiveAwayRequests WHERE shiftofferId=shiftOffer_Id
		END IF
	END IF
	
	SET SQL_SAFE_UPDATES=1
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateFirstTimeLogin` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateFirstTimeLogin`(IN user_Id bigint(20))
BEGIN
/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : Updating first time login
*/

	update scUser set isLoggedInOnce = 1 where userId = user_Id
    
    IF ROW_COUNT() > 0 THEN
		SELECT 	user_Id
	END IF
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateHireRequestState` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateHireRequestState`(
IN jobProfileHireRequest_Id bigint
,IN created_by bigint
, IN state_Id tinyint
)
BEGIN
/*
 Author: James
 Date  : 25/02/2015 
 status -- 0 - closed
			1 - Active
*/


update jobProfileHireRequest set status =state_Id ,updatedBy=created_by,updatedOn=utc_timestamp()
where jobProfileHireRequestId=jobProfileHireRequest_Id  

IF ROW_COUNT() > 0 THEN
	select jobProfileHireRequest_Id  
    
    if state_Id in (6,10) then 
		update jobProfileHireRequest set hireRequestClosingDate=utc_timestamp()
		where jobProfileHireRequestId=jobProfileHireRequest_Id  
    end if
    
end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateLastMinuteHireCandidateIgnore` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateLastMinuteHireCandidateIgnore`(
 IN lastMinuteHireCandidateIds nvarchar(2000)
,IN created_by bigint
)
BEGIN

/*
 Author: Tijo
 Date  : 20/04/2015
 Description : Used for ignoring candidate view
 call UpdateLastMinuteHireCandidateIgnore ("311,312,313")
 */
 
 declare StatusValue tinyint 
 set StatusValue = 0
		SET SQL_SAFE_UPDATES = 0
		update lastMinuteHireCandidate set isIgnored = 1 ,updatedBy = created_by , updatedOn = utc_timestamp()
        where find_in_set(lastMinuteHireCandidateid,lastMinuteHireCandidateIds) and isIgnored =0
        
        if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if
        SET SQL_SAFE_UPDATES = 1
		select StatusValue
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateLastMinuteHireCandidateView` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateLastMinuteHireCandidateView`(
 IN lastMinuteHireCandidateIds nvarchar(2000)
,IN created_by bigint
)
BEGIN

/*
 Author: Tijo
 Date  : 20/04/2015
 Description : Used for ignoring candidate view
 call UpdateLastMinuteHireCandidateView ("311,312,313")
 */
 
 declare StatusValue tinyint 
 set StatusValue = 0
		SET SQL_SAFE_UPDATES = 0
		update lastMinuteHireCandidate set candidateStatus = 4 ,updatedBy = created_by , updatedOn = utc_timestamp()
        where find_in_set(lastMinuteHireCandidateid,lastMinuteHireCandidateIds) 
        
        if ROW_COUNT() > 0 then	
			set StatusValue = 1
		end if
        SET SQL_SAFE_UPDATES = 1
		select StatusValue
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdatePassword` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdatePassword`(IN Email_Id nvarchar(200) ,IN Old_Password longtext, IN New_Password longtext, IN ChangeType tinyint , IN updated_by bigint)
BEGIN

/*
 Author: Tijo Joseph
 Date  : 19/11/2014
 Description : 
 call UpdatePassword()
 
 ChangeType -- 1 Normal Change Password
			-- 2 Updating OTP
			-- 3 Updating Pwaasword after generating OTP
 
*/

	 if (ChangeType =1) then  
		if exists( select 1 from scUser where emailId = Email_Id and UserPassword = Old_Password and isDeleted =0) then
			update scUser set UserPassword = New_Password , updatedby = updated_by, updatedon = utc_timestamp()
			where emailId = Email_Id and UserPassword = Old_Password and isDeleted =0
		
			if ROW_COUNT() > 0 then
			Select 1 as StatusValue
			end if
		 end if

	 else  if (ChangeType =2) then  
		update scUser set UserPassword = New_Password ,  updatedon = utc_timestamp() , isOTPGenerated =1 , otpGeneratedOn = utc_timestamp()
		where emailId = Email_Id and isDeleted =0
        
        if ROW_COUNT() > 0 then
		Select 1 as StatusValue
        end if
        
	else  if (ChangeType =3) then  
		set updated_by = (select userId from scUser where emailId = Email_Id and isDeleted =0)
		update scUser set UserPassword = New_Password , updatedby = updated_by, updatedon = utc_timestamp() , isOTPGenerated =0
		where emailId = Email_Id and isDeleted =0
        
        if ROW_COUNT() > 0 then
		Select 1 as StatusValue
        end if
    end if
    end if
    end if
    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateQuoteRequestAgencySiteNotified` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateQuoteRequestAgencySiteNotified`(
	IN quoteRequestAgency_SiteId bigint(20)
   ,IN created_By	bigint(20)
   
)
BEGIN


/*
 Author: James
 Date  : 03/02/2015
 Description : Update quoteRequestAgencySite notification
*/
			update quoteRequestAgencySite set 
						isNotified=1
						,updatedBy=created_By
                        ,updatedOn=utc_timestamp()
			where quoteRequestAgencySiteId=quoteRequestAgency_SiteId
            
            IF ROW_COUNT() > 0 THEN
				select quoteRequestAgency_SiteId
		    end if
                                    

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateResetDefaultRole` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateResetDefaultRole`(
	IN business_Id bigint
,	IN site_Id bigint
,	IN role_Id	bigint
, 	IN roleCategory_Id	bigint
,	IN created_By	bigint
)
BEGIN
/*
 Author: James
 Date  : 19/11/2014
 Description : Resetting the access permission for a role for a business.
*/

SET SQL_SAFE_UPDATES = 0

        update roleBusinessFunction    
        set  isDeleted=1
			,updatedBy=created_By
			,updatedOn=utc_timestamp()
		where businessId=business_Id and roleID = role_Id and roleCategoryId = roleCategory_Id
			
		
		update roleBusinessFunction rbf 
		inner join roleBusinessFunction rd on rbf.roleId=rd.roleId and rbf.businessFunctionId=rd.businessFunctionId and rd.businessId =0 and rd.roleId=role_Id
		set rbf.isDeleted=0, rbf.updatedBy=created_By, rbf.updatedOn=utc_timestamp()
		where rbf.businessId=business_Id and rbf.roleId=role_Id 
        
		if row_count()>0 then	
            select role_Id
    	end if
        
		insert into roleBusinessFunction(roleId,businessFunctionId,businessId,roleCategoryId,createdOn,createdBy,isDeleted )
        select roleId,businessFunctionId,business_Id,3,utc_timestamp(),created_By,rbf.isDeleted
		from roleBusinessFunction rbf
		where rbf.businessFunctionId not in 
		(select businessFunctionId from roleBusinessFunction rbf where rbf.roleId = role_Id and businessId=business_Id) and rbf.roleId = role_Id and rbf.isDeleted =0 and businessId=0
		
       
        




END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateRosteredShiftsForPushNotification` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateRosteredShiftsForPushNotification`(
  IN	shiftOffer_Id	BIGINT(20)
, IN 	candidateShiftOffer_HistoryId bigint(20)
, IN 	shift_status tinyint (4)
, IN    notification_status tinyint(4)
, IN 	created_By bigint(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update shifts for push notification
*/

if shift_status in(54,55,56,57,58,59) then 
		update  candidateShiftCancel set 
			isNotified=notification_status
		   ,updatedBy=created_By
           ,updatedOn=utc_timestamp()
		where candidateShiftCancelId =candidateShiftOffer_HistoryId
        and status in(54,55,56,57,58,59)  
        
		IF ROW_COUNT()>0 THEN
			SELECT 'SUCCESS' AS STATUS
		ELSE
			SELECT 'FAILED' AS STATUS
		END IF
else 
        UPDATE candidateShiftOffer SET isNotified=notification_status 
			,updatedBy=created_By
			,updatedOn=utc_timestamp()
        WHERE shiftOfferId=shiftOffer_Id 		
		IF ROW_COUNT()>0 THEN
			update candidateGiveAwayRequests set isNotified=1
            WHERE shiftOfferId=shiftOffer_Id 
        
			SELECT 'SUCCESS' AS STATUS
		ELSE
			SELECT 'FAILED' AS STATUS
		END IF
end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateRosterShiftNotify` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateRosterShiftNotify`(
 in businessSite_Id bigint(20)
,in department_Id bigint(20)
,in subClassification_Id bigint(20)
,in manager_Id bigint(20)
,in start_Date date
,in end_Date date 
)
BEGIN
/*
 Author: James
 Date  : 09/03/2016	
 Description : Roster week view notify
*/
declare statusValue bit(1)

set statusValue=0

SET SQL_SAFE_UPDATES=0  
    
	update candidateShiftOffer so 
		inner join candidateGiveAwayRequests cg on so.shiftOfferId=cg.shiftOfferId
		inner join businessSite bs on so.businessSiteId=bs.businessSiteId
		inner join timeZone tz on bs.timeZoneId=tz.timeZoneId
	set so.status=1 ,cg.status=1,cg.candidateStatus=1,cg.isNotified=0,so.updatedBy=manager_Id,so.updatedOn=utc_timestamp(),cg.updatedBy=manager_Id,cg.updatedOn=utc_timestamp()
		where so.businessSiteId=businessSite_Id and so.departmentId=department_Id 
		and so.subClassificationId=coalesce(subClassification_Id,so.subClassificationId)
		and date(so.shiftStartDateTime) between start_Date and end_Date 
		and so.status=60  and cg.status=60
		and DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiffInMinutes MINUTE)<so.shiftEndDateTime 
	if row_count()>0 then
		set statusValue=1
	end if
SET SQL_SAFE_UPDATES=1  
    	
  

	select statusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateShiftOfferNFSentDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateShiftOfferNFSentDetails`(
 IN user_Id bigint(20)
,IN deviceType_Id smallint(6)
,IN device_Id varchar(200)
, IN notification_flag bit(1)
, IN nofication_SentTime datetime
)
BEGIN

/*
 Author: Sravanthi M
 Date  : 28/04/2016
 Description : UpdateShiftOfferNFSentDetails
 call UpdateShiftOfferNFSentDetails(3897,1,'00000000-2c5e-cef0-ffff-ffffdae32e69',1,'2016-05-02 00:10:10')
 
*/
DECLARE statusValue bit(1)
 set statusValue=0
 
	SET SQL_SAFE_UPDATES = 0
    if coalesce(nofication_SentTime,'0')='0' then 
		UPDATE userDevice SET viewShiftOffers = notification_flag
		WHERE
			userID = user_Id AND deviceId = device_Id
			AND deviceTypeId = deviceType_Id and isDeleted=0
            
            IF ROW_COUNT() > 0 THEN
				set statusValue=1
			end if
		
	else
		UPDATE userDevice SET viewShiftOffers = notification_flag,
			shiftOfferNFSentTime = nofication_SentTime
		WHERE
			userID = user_Id AND deviceId = device_Id
			AND deviceTypeId = deviceType_Id and isDeleted=0
            
            IF ROW_COUNT() > 0 THEN
				set statusValue=1
			end if
	
	end if 
		select statusValue  
 
    SET SQL_SAFE_UPDATES=1
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateShiftOffersByTemplates` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateShiftOffersByTemplates`(
in businessSite_Id BIGINT(20),
in roster_date date)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update shift offers by templates
*/
	DECLARE curWeek_DayName VARCHAR(20)
	DECLARE curWeek_date DATE
	DECLARE count_weeks INT
	
	DECLARE weekStartDate DATE
	DECLARE weekEndDate DATE
	DECLARE x_weeks_after_new_year DATE
	DECLARE dateTracker DATE
	
	SET count_weeks=2
	
	-- reflect past and future 2weeks records
	SET curWeek_DayName=DAYNAME(roster_date)
	
	SET x_weeks_after_new_year=DATE_ADD(MAKEDATE(YEAR(roster_date), 1), INTERVAL (SELECT IF(WEEKOFYEAR(MAKEDATE(YEAR(roster_date), 1))>50 , 0 , -1))+WEEK(roster_date,3) WEEK)
		
	SET weekStartDate=DATE_SUB(x_weeks_after_new_year, INTERVAL WEEKDAY(x_weeks_after_new_year) DAY)
	SET weekEndDate=DATE_ADD(weekStartDate, INTERVAL 6 DAY)
	
	SET dateTracker=weekStartDate
	
	IF curWeek_DayName=week_DayName THEN
		SET curWeek_date=DATE(roster_date)
	ELSE
		getWeekDayLoop: WHILE (dateTracker<=weekEndDate) DO
			SET curWeek_DayName=DAYNAME(dateTracker)
			IF curWeek_DayName=week_DayName THEN
				SET curWeek_date=dateTracker
				LEAVE getWeekDayLoop
			END IF
		END WHILE getWeekDayLoop
	END IF
	
	/*WHILE (count_weeks>0) DO
		IF (SELECT COUNT(1) FROM candidateShiftOffer WHERE DATE(shiftStartDateTime)=curWeek_date) THEN
		
		END IF
	END WHILE*/
	
	SELECT shiftTemplate_Id AS shiftTemplateId,1 AS STATUS
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateShiftWage` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateShiftWage`(
 in shiftOffer_Id bigint(20)
,in wage_CurrencyId int
,in shift_Wage decimal(10,4)
,in updated_By bigint(20)

)
BEGIN
/*
 Author: James
 Date  : 08/06/2016	
 Description : Update wage for a shift
 call est_skillsconnect_dev.UpdateShiftWage(61703, 2, 20, 1369)

*/
declare statusValue bit(1)
set statusValue=0

	update candidateShiftOffer set 
		 wageCurrencyId=coalesce(wage_CurrencyId,wageCurrencyId)
		,wage=shift_Wage
		,updatedBy=updated_By
		,updatedOn=utc_timestamp()
	where shiftOfferId=shiftOffer_Id 
		if row_count()>0 then
			set statusValue=1
		end if 

	select statusValue
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateTimesheetForCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateTimesheetForCandidate`(
IN candidateUser_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN start_DateTime DATETIME,
IN end_DateTime DATETIME,
IN costCenter_Id BIGINT(20),
IN comments VARCHAR(2000),
IN shift_status VARCHAR(50),
IN updated_By BIGINT(20)
)
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : update timesheet
*/
	DECLARE timeSheet_Id BIGINT(20) 
	DECLARE status_Id  BIGINT(20) 
	DECLARE roster_startDateTime DATETIME
	DECLARE roster_endDateTime DATETIME
	DECLARE old_status_Id  BIGINT(20) 
	DECLARE timeDiff_InMinutes INT(11)
	
	SET timeSheet_Id = 0
	
	SELECT so.shiftStartDateTime,so.shiftEndDateTime,tz.timeDiffInMinutes
	INTO roster_startDateTime,roster_endDateTime,timeDiff_InMinutes
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.shiftOfferId = shiftOffer_Id
	
	SELECT timeSheetId,STATUS INTO timeSheet_Id,old_status_Id
	FROM candidateTimesheet 
	WHERE shiftOfferId = shiftOffer_Id
	
	IF comments='' THEN
		SET comments=NULL
	END IF
	
	IF old_status_Id<>2 THEN
	
		SELECT statusId INTO status_Id FROM statusLookup WHERE statusName=shift_status
		
		IF shiftOffer_Id>0 THEN
		
			IF timeSheet_Id>0 THEN
				IF shift_status='DECLINED' THEN
					UPDATE `candidateTimesheet` 
					SET `shiftStartDateTime` = start_DateTime,
					  `shiftEndDateTime` = end_DateTime,
					  `status` = status_Id,
					  `disputeComment` = comments,
					  `actionBy` = candidateUser_Id,
					  `actionOn` = UTC_TIMESTAMP(),
					  `costcenterParentId` = costCenter_Id
					WHERE timesheetId=timeSheet_Id 
				ELSE
					UPDATE `candidateTimesheet` 
					SET `shiftStartDateTime` = start_DateTime,
					  `shiftEndDateTime` = end_DateTime,
					  `status` = status_Id,
					  `candidateComment` = comments,
					  `actionBy` = candidateUser_Id,
					  `actionOn` = UTC_TIMESTAMP(),
					  `costcenterParentId` = costCenter_Id
					WHERE timesheetId=timeSheet_Id 
				END IF
			ELSE
				INSERT INTO `candidateTimesheet` (`shiftOfferId`,`shiftStartDateTime`,`shiftEndDateTime`,
				  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
				  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
				VALUES
				  (shiftOffer_Id,start_DateTime,end_DateTime,
				    candidateUser_Id,1,comments,NULL,costCenter_Id,NULL,
				    candidateUser_Id,UTC_TIMESTAMP(),candidateUser_Id,UTC_TIMESTAMP()
				  ) 
				  
				  SET timeSheet_Id=LAST_INSERT_ID()
			END IF
		END IF
		
		IF timeSheet_Id>0 THEN
			IF comments IS NOT NULL THEN
				INSERT INTO candidateTimesheetComments(timeSheetId,userId,COMMENT,createdDate,isUnread)
				VALUES(timeSheet_Id,updated_By,comments,DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE),1)
			END IF
			
			IF shift_status='DECLINED' THEN
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,shift_status AS timesheetStatus,
					CONCAT(scu.firstName,' ',scu.lastName) AS empFullName,
					ct.shiftStartDateTime,ct.shiftEndDateTime,ud.deviceTypeID,ud.deviceToken,scu.RoleCategoryId,so.candidateId as candidateUserIdDevice
				FROM candidateShiftOffer so
				INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
				WHERE so.shiftOfferId=shiftOffer_Id
				
			ELSEIF shift_status='SUBMITTED' AND (start_DateTime=roster_startDateTime AND end_DateTime=roster_endDateTime) THEN
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,shift_status AS timesheetStatus,
					CONCAT(scu.firstName,' ',scu.lastName) AS empFullName,
					ct.shiftStartDateTime,ct.shiftEndDateTime,ud.deviceTypeID,ud.deviceToken,scu1.RoleCategoryId,so.candidateId as candidateUserIdDevice
				FROM candidateShiftOffer so
				INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
				INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
				INNER JOIN scUser scu1 ON ucs.userId=scu1.userId
				LEFT JOIN userDevice ud ON ucs.userId=ud.userID AND ud.isDeleted=0
				WHERE so.shiftOfferId=shiftOffer_Id AND ucs.RoleCategoryId = 3
			ELSE
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,shift_status AS timesheetStatus,
				'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS RoleCategoryId,null as candidateUserIdDevice
			END IF
				
		ELSE
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,'NOTFOUND' AS timesheetStatus,
			'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS RoleCategoryId , null as candidateUserIdDevice
		END IF
	ELSE
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,'ALREADYAPPROVED' AS timesheetStatus,
			'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS RoleCategoryId
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateTimesheetForCandidate_old1` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateTimesheetForCandidate_old1`(
IN candidateUser_Id BIGINT(20),
IN shiftOffer_Id BIGINT(20),
IN start_DateTime DATETIME,
IN end_DateTime DATETIME,
IN costCenter_Id BIGINT(20),
IN comments VARCHAR(2000),
IN shift_status VARCHAR(50),
IN updated_By BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : update timesheet
*/
	DECLARE timeSheet_Id BIGINT(20) 
	DECLARE status_Id  BIGINT(20) 
	DECLARE roster_startDateTime DATETIME
	DECLARE roster_endDateTime DATETIME
	DECLARE old_status_Id  BIGINT(20) 
	DECLARE timeDiff_InMinutes INT(11)
	
	SET timeSheet_Id = 0
	
	SELECT so.shiftStartDateTime,so.shiftEndDateTime,tz.timeDiffInMinutes
	INTO roster_startDateTime,roster_endDateTime,timeDiff_InMinutes
	FROM candidateShiftOffer so
	INNER JOIN businessSite bs ON so.businessSiteId=bs.businessSiteId
	INNER JOIN timeZone tz ON bs.timeZoneId = tz.timeZoneId
	WHERE so.shiftOfferId = shiftOffer_Id
	
	SELECT timeSheetId,STATUS INTO timeSheet_Id,old_status_Id
	FROM candidateTimesheet 
	WHERE shiftOfferId = shiftOffer_Id
	
	IF comments='' THEN
		SET comments=NULL
	END IF
	
	IF old_status_Id<>2 THEN
	
		SELECT statusId INTO status_Id FROM statusLookup WHERE statusName=shift_status
		
		IF shiftOffer_Id>0 THEN
		
			IF timeSheet_Id>0 THEN
				IF shift_status='DECLINED' THEN
					UPDATE `candidateTimesheet` 
					SET `shiftStartDateTime` = start_DateTime,
					  `shiftEndDateTime` = end_DateTime,
					  `status` = status_Id,
					  `disputeComment` = comments,
					  `actionBy` = candidateUser_Id,
					  `actionOn` = UTC_TIMESTAMP(),
					  `costcenterParentId` = costCenter_Id
					WHERE timesheetId=timeSheet_Id 
				ELSE
					UPDATE `candidateTimesheet` 
					SET `shiftStartDateTime` = start_DateTime,
					  `shiftEndDateTime` = end_DateTime,
					  `status` = status_Id,
					  `candidateComment` = comments,
					  `actionBy` = candidateUser_Id,
					  `actionOn` = UTC_TIMESTAMP(),
					  `costcenterParentId` = costCenter_Id
					WHERE timesheetId=timeSheet_Id 
				END IF
			ELSE
				INSERT INTO `candidateTimesheet` (`shiftOfferId`,`shiftStartDateTime`,`shiftEndDateTime`,
				  `candidateId`,`status`,`candidateComment`,`disputeComment`,`costcenterParentId`,`costcenterChildId`,
				  `actionBy`,`actionOn`,`createdBy`,`createdOn`) 
				VALUES
				  (shiftOffer_Id,start_DateTime,end_DateTime,
				    candidateUser_Id,1,comments,NULL,costCenter_Id,NULL,
				    candidateUser_Id,UTC_TIMESTAMP(),candidateUser_Id,UTC_TIMESTAMP()
				  ) 
				  
				  SET timeSheet_Id=LAST_INSERT_ID()
			END IF
		END IF
		
		IF timeSheet_Id>0 THEN
			IF comments IS NOT NULL THEN
				INSERT INTO candidateTimesheetComments(timeSheetId,userId,COMMENT,createdDate)
				VALUES(timeSheet_Id,updated_By,comments,DATE_ADD(UTC_TIMESTAMP(), INTERVAL timeDiff_InMinutes MINUTE))
			END IF
			
			IF shift_status='DECLINED' THEN
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,shift_status AS timesheetStatus,
					CONCAT(scu.firstName,' ',scu.lastName) AS empFullName,
					ct.shiftStartDateTime,ct.shiftEndDateTime,ud.deviceTypeID,ud.deviceToken,scu.RoleCategoryId,so.candidateId as candidateUserIdDevice
				FROM candidateShiftOffer so
				INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				LEFT JOIN userDevice ud ON so.candidateId=ud.userID AND ud.isDeleted=0
				WHERE so.shiftOfferId=shiftOffer_Id
				
			ELSEIF shift_status='SUBMITTED' AND (start_DateTime=roster_startDateTime AND end_DateTime=roster_endDateTime) THEN
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,shift_status AS timesheetStatus,
					CONCAT(scu.firstName,' ',scu.lastName) AS empFullName,
					ct.shiftStartDateTime,ct.shiftEndDateTime,ud.deviceTypeID,ud.deviceToken,scu1.RoleCategoryId,so.candidateId as candidateUserIdDevice
				FROM candidateShiftOffer so
				INNER JOIN candidateTimesheet ct ON so.shiftOfferId=ct.shiftOfferId
				INNER JOIN scUser scu ON so.candidateId=scu.userId
				INNER JOIN userRoleBusinessSite cbs ON so.businessSiteId=cbs.businessSiteId AND cbs.isDeleted = 0
				INNER JOIN userRole ucs ON cbs.userRoleId = ucs.userRoleId AND ucs.isDeleted = 0
				INNER JOIN scUser scu1 ON ucs.userId=scu1.userId
				LEFT JOIN userDevice ud ON ucs.userId=ud.userID AND ud.isDeleted=0
				WHERE so.shiftOfferId=shiftOffer_Id AND ucs.RoleCategoryId = 3
			ELSE
				SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,shift_status AS timesheetStatus,
				'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS RoleCategoryId,null as candidateUserIdDevice
			END IF
				
		ELSE
			SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,'NOTFOUND' AS timesheetStatus,
			'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS RoleCategoryId , null as candidateUserIdDevice
		END IF
	ELSE
		SELECT candidateUser_Id AS candidateId,shiftOffer_Id AS shiftOfferId,timeSheet_Id AS timeSheetId,'ALREADYAPPROVED' AS timesheetStatus,
			'' AS empFullName,NULL AS shiftStartDateTime,NULL AS shiftEndDateTime,NULL AS deviceTypeID,NULL AS deviceToken,NULL AS RoleCategoryId
	END IF
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateTimesheetStatus` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateTimesheetStatus`(
in shiftOffer_Id BIGINT(20),
in shift_status VARCHAR(50),
in updated_By BIGINT(20))
BEGIN
/*
 Author: Raghu
 Date  : 18/06/2015
 Description : Update timesheet status
*/
	DECLARE status_Id BIGINT(20)
	
	SET SQL_SAFE_UPDATES=0
	
	SELECT statusId INTO status_Id FROM statusLookup WHERE statusName=shift_status
	
	UPDATE candidateTimesheet SET STATUS=status_Id, actionBy=updated_By, actionOn=utc_timestamp()
	WHERE shiftOfferId=shiftOffer_Id
	
	SET SQL_SAFE_UPDATES=1
	
	if row_count()>0 then
		select shiftOffer_Id as shiftOfferId,1 AS status,'SUCCESS' as statusMessage
	else
		SELECT shiftOffer_Id AS shiftOfferId,0 AS status,'FAILED' AS statusMessage
	end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateTimeSheetUnreadMessage` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateTimeSheetUnreadMessage`(
 IN shiftOffer_Id bigint(20)
,IN user_Id bigint(20)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 21/04/2016
 Description : Update TimeSheet Unread Message latch
 call UpdateTimeSheetUnreadMessage(33533,3897)
*/
	DECLARE timeSheet_Id bigint(20)
    
	SELECT timeSheetId INTO timeSheet_Id 
    FROM
		candidateTimesheet
	WHERE
		shiftOfferId = shiftOffer_Id
	AND candidateId = user_Id
            
	
	UPDATE candidateTimesheetComments 
	SET 
		isUnread = 0
	WHERE
	timeSheetId = timeSheet_Id AND userId <> user_Id
	-- 	AND userId <> user_Id
    
	
    IF ROW_COUNT() > 0 THEN
		select timeSheet_Id  
	end if
    
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserActiveOrInactive` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateUserActiveOrInactive`(
IN userRole_SiteId bigint
,IN status_ID tinyint
,IN role_categoryId tinyint
,IN created_By bigint
)
BEGIN
DECLARE StatusValue bigint

/*

 Author: Tijo Joseph
 Date  : 10-10-2015
 Description : Making user active/inactive for a particular site.
 status_ID - 1 -- inactive
			 2 -- active
*/


if   role_categoryId =3 then 
	update  userRoleBusinessSite set status= status_ID,updatedBy=created_By,updatedOn=utc_timestamp()
	where userRoleBusinessSiteId=userRole_SiteId  
    
    IF ROW_COUNT() > 0 THEN
		set StatusValue=1 
		select StatusValue
    END IF
    
elseif role_categoryId =4 then 

	update  userRoleAgencySite set status= status_ID,updatedBy=created_By,updatedOn=utc_timestamp()
	where userRoleAgencySiteId=userRole_SiteId  
    
    IF ROW_COUNT() > 0 THEN
		set StatusValue=1 
		select StatusValue
    END IF
end if

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserEmailId` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateUserEmailId`(
 IN old_emailId varchar(100)
, IN new_emailId varchar(100)
, IN user_password  varchar(100)
, IN expire_time int(11)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 12/04/2016
 Description : Update User EmailId
 exception_type 0 -- user not found
			2 -- activation time window lapsed
            3 -- duplicate email id
            4 -- username/password notmatching (authentication failed)
            1 -- Success
*/
DECLARE user_Id bigint(20)
DECLARE timeDiff_InHours int(11)
DECLARE exception_type tinyint(4)

set exception_type = 1

select userId into user_Id from scUser where emailId = old_emailId

select time_to_sec(timediff(utc_timestamp(), coalesce(updatedOn,createdOn) )) / 3600 into timeDiff_InHours from userTempEmailId where userId = user_Id AND isCompleted = 0

if coalesce(user_Id,0)=0 then
	set exception_type = 0
elseif exists(select 1 from scUser where emailId = new_emailId) then
	set exception_type = 3
elseif not exists(select 1 from scUser sc inner join userTempEmailId ut on ut.userId = sc.userId where sc.userId = user_Id AND UserPassword = user_password AND ut.emailId = new_emailId ) then
    set exception_type = 4
elseif (timeDiff_InHours > expire_time ) then
    set exception_type = 2
else
		update userTempEmailId set 
                        isCompleted = 1
						,updatedOn = utc_timestamp()
						where userId = user_Id
                        
		update scUser set 
                        emailId = new_emailId
                        ,updatedBy = user_Id
						,updatedOn = utc_timestamp()
						where userId = user_Id
                        
end if
select exception_type
    
  
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserForceLogOut` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateUserForceLogOut`(
 IN user_Id bigint(20)
,IN deviceType_Id smallint(6)
,IN device_Id varchar(200)
, IN is_ForceLogOut bit(1)

)
BEGIN

/*
 Author: Sravanthi M
 Date  : 21/04/2016
 Description : Update User ForceLogOut latch
 call UpdateUserForceLogOut(3897,1,'00000000-2c5e-cef0-ffff-ffffdae32e69',1)
*/

	SET SQL_SAFE_UPDATES = 0
	
    UPDATE userDevice SET isForceLogOut = is_ForceLogOut ,updatedBy=coalesce(user_Id,updatedBy,createdBy)
    ,updatedOn=utc_timestamp() WHERE userID=coalesce(user_Id,userID) AND deviceTypeID = coalesce(deviceType_Id,deviceTypeID) AND deviceId = coalesce(device_Id,deviceId)
	
    IF ROW_COUNT() > 0 THEN
		select is_ForceLogOut  
	end if
    
	
    SET SQL_SAFE_UPDATES=1

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserNotified` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateUserNotified`(
	in user_Id	  bigint
   ,in notification_Type	tinyint
)
BEGIN

/*  
	Author: Tijo Joseph
	Date  : 10-03-2015
	Description : user notification update for last minute hire
	notification_Type  1 -- Job Related
					   2 -- LMH 
*/

Declare statusValue tinyint 
Declare roleCategory_Id tinyint 
set statusValue=0

	set roleCategory_Id = (select RoleCategoryId from scUser where userId=user_Id)

SET SQL_SAFE_UPDATES = 0

if roleCategory_Id=2 then
		if notification_Type=1 then
        
			update hireRequestCandidate set
				 isCandidateNotified=1,
				updatedOn=utc_timestamp()
			where candidateUserId = user_Id
			
			IF ROW_COUNT() > 0 THEN
				set statusValue =1 
			end if

		elseif notification_Type=2 then
			update lastMinuteHireCandidate set 
				candidateStatus=4,
				updatedOn=utc_timestamp()
			where candidateUserId = user_Id
			
			IF ROW_COUNT() > 0 THEN
				set statusValue =1 
			end if

		end if
elseif roleCategory_Id=3 then
		if notification_Type=1 then
				 
                update   jobProfileHireRequest jphr 
				inner join jobProfileBusinessSite jp on jphr.jobProfileBusinessSiteId=jp.jobProfileBusinessSiteId 
				inner join  userRoleBusinessSite urbs on jp.businessSiteId=urbs.businessSiteId 
                inner join userRole ur 	on urbs.userRoleId=ur.userRoleId and userId=user_Id  
				 set jphr.isNotified=1,jphr.updatedOn=utc_timestamp()
				where jphr.isNotified=0  
                
			IF ROW_COUNT() > 0 THEN
				set statusValue =1 
			end if
		end if

end if

	select statusValue

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UpdateUserType` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UpdateUserType`(
 in email_Id varchar(50)
,in user_Type tinyInt(4)
)
BEGIN
/*
userType : 
          0 - Normal
          1 - Demo
          2 - Normal Test
          3 - Demo Test

*/
declare statusValue bit(1)
set statusValue=0

	update scUser set userType=2
	where emailId=email_Id
	if row_count()>0 then
		set statusValue=1	
	end if 

select   statusValue
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UploadCandidateDetails` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UploadCandidateDetails`(
  IN file_Id bigint(20) 
, IN created_By bigint(20)  
)
BEGIN

/*
 Author: James
 Date  : 02/12/2014
 Description : Uploading candidate details
*/

/*
		recordStatus code
		0 - insert
        1 - error
        2 - processed
        roleCategoryId   3 -- Business 4 -- Agency
*/

	declare business_Id bigint
    declare site_Id bigint
	declare StatusValue bit
    declare roleCategory_Id tinyint
	set StatusValue=0
    set business_Id  = (select businessId from fileUpload where fileId = file_Id)
    set site_Id  = (select siteId from fileUpload where fileId = file_Id)
    set roleCategory_Id =  (select roleCategoryId from fileUpload where fileId = file_Id)


SET SQL_SAFE_UPDATES = 0

	update candidateTemp set recordStatus=0, errorMessage=' ' 
	where fileId=file_Id
    

	-- updating user id
	update candidateTemp  ut 
    left join scUser u on ut.emailId=u.emailId
    left join genderLocale gl on ut.gender=gl.genderName
    left join countryLocale cl on ut.country=cl.countryName
    left join stateLocale sl on ut.state=sl.stateName 
    left join cityLocale cil on   ut.city=cil.cityName
	set ut.userId =u.userId
		,ut.genderId=gl.genderId
		,ut.countryId=cl.countryId
		,ut.stateId =sl.stateId
		,ut.cityId=cil.cityId
	where ut.fileId=file_Id

	    
	-- Error Status 
	update candidateTemp set  errorMessage = "Invalid gender", recordStatus=1
	where coalesce(genderId,0)=0 and fileId=file_Id and recordStatus=0     
    
	update candidateTemp set   errorMessage= "Invalid country", recordStatus=1
	where coalesce(countryId,0)=0 and fileId=file_Id and recordStatus=0 
    
    update candidateTemp set  errorMessage= "Invalid state", recordStatus=1
	where coalesce(stateId,0)=0 and fileId=file_Id and recordStatus=0 
    
    update candidateTemp set  errorMessage="Invalid city", recordStatus=1
	where coalesce(cityId,0)=0 and fileId=file_Id and recordStatus=0 
    	
	update  candidateTemp t inner join (
		select emailId,count(1)tt from candidateTemp
		where fileId=file_Id 
		group by emailId
		having count(1)>1 )b
	on t.emailId=b.emailId 
	set errorMessage="Duplicate Email id  exist in the CSV file", recordStatus=1
	where t.fileId=file_Id
    
    update candidateTemp set errorMessage="Email id already exist in the database", recordStatus=1
    where coalesce(userId,0)<>0 and fileId=file_Id and recordStatus=0
    
    update candidateTemp set recordStatus=2
	where coalesce(cityID,0)<>0 and coalesce(stateId,0)<>0 and coalesce(countryId,0)<>0 and coalesce(genderId,0)<>0 and coalesce(userId,0)=0
	and fileId=file_Id 
    
     -- updating password & hashed password
    update candidateTemp  ut set password = concat(conv(floor(rand() * 999999999999), 10, 36), "@", left(rand() *100,2))
    where ut.fileId=file_Id and recordStatus=2
    
    update candidateTemp  ut set userPassword = TO_BASE64(UNHEX(sha1(password))) 
    where ut.fileId=file_Id and recordStatus=2

	insert into scUser(	firstName
					,	middleName
					,	lastName
					,	genderId
					,	nationalityId
					,	RoleCategoryId
					,	emailId
					,	UserPassword
					,	status
					,	createdBy
					,	createdOn
					,	isDeleted
                    ,   isLoggedInOnce
                    , 	encryptionKey)  
	select sut.firstName,sut.middleName,sut.lastName,sut.genderId,countryId,2
	,sut.emailId,sut.UserPassword,1 as status,created_By,utc_timestamp(),0, 0,encryptionKey
	from candidateTemp sut 
	where fileId=file_Id and recordStatus=2  
 
	IF ROW_COUNT() > 0 THEN
	set StatusValue =1
	end if
              
  
	update scUser u inner join candidateTemp ut on ut.emailId=u.emailId
	set u.userUIId= CONCAT(UUID() , '-' , u.userId)        
	where coalesce( u.userUIId,'') ='' and fileId=file_Id and recordStatus=2
     
 	-- updating user id    
	update candidateTemp  ut inner join scUser u on   ut.emailId=u.emailId
	set ut.userId =u.userId ,ut.userUIId=u.userUIId
	where fileId=file_Id
	
    
			
	insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId)                     
	select sut.userId,2,created_By,utc_timestamp() dt,2 
    from candidateTemp sut 
	where fileId=file_Id and recordStatus=2    
    
	IF ROW_COUNT() > 0 THEN
	set StatusValue =1
	end if
    
	insert into candidateUser ( candidateUserId
							,	createdBy
							,	createdOn
							,	isDeleted )	
	select sut.userId,created_By,utc_timestamp(),0 
    from  candidateTemp sut 
	where fileId=file_Id and recordStatus=2 

	IF ROW_COUNT() > 0 THEN
	set StatusValue =1
	end if
        

	insert into candidateDetail (
				candidateUserId
			,	streetAddressLine1
			,	streetAddressLine2
			,	countryId
			,	stateId
			,	cityId
			,	zipCode
			,	dob
			,	createdBy
			,	createdOn
            ,latitude,longitude
            )
			 
	select sut.userId,sut.streetAddressLine1,sut.streetAddressLine2,sut.countryId,sut.stateId,sut.cityId,sut.postCode,sut.dob,created_By,utc_timestamp() ,latitude,longitude
	from candidateTemp sut 
	where fileId=file_Id and recordStatus=2 

		IF ROW_COUNT() > 0 THEN
		set StatusValue =1
		end if

	insert into userContact (userId,mobilePhone,isDeleted) 
	select sut.userId,sut.mobileNo,0 
    from candidateTemp sut 
    where fileId=file_Id and recordStatus=2  

		IF ROW_COUNT() > 0 THEN
		set StatusValue =1
		end if

		if (roleCategory_Id = 3) then
			insert into businessCandidate (businessId
										,	businessSiteId
										,	candidateUserId
										,	createdBy
										,	createdOn )
			select business_Id,site_Id,userId,created_By,utc_timestamp()  
			from candidateTemp
			where fileId=file_Id and recordStatus=2 
					
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
			end if

		else 
			insert into agencyCandidate (agencyId
										,	agencySiteId
										,	candidateUserId
										,	createdBy
										,	createdOn )
			select business_Id,site_Id,userId,created_By,utc_timestamp()  
			from candidateTemp
			where fileId=file_Id and recordStatus=2 
					
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
			end if

		end if
		

	select StatusValue
    
     
    
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UploadHireRequestCandidate` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UploadHireRequestCandidate`(
  IN file_Id bigint(20) 
, IN created_By bigint(20)  
-- , IN jobProfileHireRequest_Id bigint(20) 
-- , IN candidateHR_Status tinyint

)
BEGIN


/*
 Author: James
 Date  : 02/12/2014
 Description : Uploading hire request candidate details
*/

/*
		recordStatus code
		0 - insert
        1 - error
        2 - processed
        3 - already registered candidate
		roleCategoryId   3 -- Business 4 -- Agency
*/

	declare business_Id bigint
    declare site_Id bigint
	declare StatusValue bit
    declare roleCategory_Id tinyint
	set StatusValue=0
    set business_Id  = (select businessId from fileUpload where fileId = file_Id)
    set site_Id  = (select siteId from fileUpload where fileId = file_Id)
    set roleCategory_Id =  (select roleCategoryId from fileUpload where fileId = file_Id)


SET SQL_SAFE_UPDATES = 0

	update candidateTemp set recordStatus=0, errorMessage=' ' 
	where fileId=file_Id
    

	-- updating user id
	update candidateTemp  ut 
    left join scUser u on ut.emailId=u.emailId
    left join genderLocale gl on ut.gender=gl.genderName
    left join countryLocale cl on ut.country=cl.countryName
    left join stateLocale sl on ut.state=sl.stateName 
    left join cityLocale cil on   ut.city=cil.cityName
	set ut.userId =u.userId
		,ut.genderId=gl.genderId
		,ut.countryId=cl.countryId
		,ut.stateId =sl.stateId
		,ut.cityId=cil.cityId
	where ut.fileId=file_Id

	    
	-- Error Status 
	 
    
	update candidateTemp set   errorMessage= "Invalid country", recordStatus=1
	where coalesce(countryId,0)=0 and fileId=file_Id and recordStatus=0 

    update candidateTemp set   recordStatus=3
    where coalesce(userId,0)<>0 and fileId=file_Id and recordStatus=0
     
	update  candidateTemp ct 
    inner join scUser u on ct.userId=u.userId
	set errorMessage="Email id already exist in the database with business", recordStatus=1
	where fileId=file_Id and u.RoleCategoryId <>2  
    
    update candidateTemp set recordStatus=2
	where coalesce(countryId,0)<>0 and coalesce(userId,0)=0 and fileId=file_Id 
    
    update candidateTemp set  cityID=null
    where fileId=file_Id and recordStatus=2 and coalesce(cityID,0)=0  
    
    update candidateTemp set  stateId=null
    where fileId=file_Id and recordStatus=2 and coalesce(stateId,0)=0  
    
    update candidateTemp set  genderId=null
    where fileId=file_Id and recordStatus=2 and coalesce(genderId,0)=0  
    
     -- updating password & hashed password
	update candidateTemp  ut set password ="End@12345"
   -- update candidateTemp  ut set password = concat(conv(floor(rand() * 999999999999), 10, 36), "@", left(rand() *100,2))
    where ut.fileId=file_Id and recordStatus=2
    
    update candidateTemp  ut set userPassword = TO_BASE64(UNHEX(sha1(password))) 
    where ut.fileId=file_Id and recordStatus=2

	insert into scUser(	firstName
					,	middleName
					,	lastName
					,	genderId
					,	nationalityId
					,	RoleCategoryId
					,	emailId
					,	UserPassword
					,	status
					,	createdBy
					,	createdOn
					,	isDeleted
                    ,   isLoggedInOnce
                    ,	encryptionKey)  
	select distinct sut.firstName,sut.middleName,sut.lastName,sut.genderId,countryId,2
	,sut.emailId,sut.UserPassword,2 as status,created_By,utc_timestamp(),0, 0, encryptionKey
	from candidateTemp sut 
	where fileId=file_Id and recordStatus=2  
 
	IF ROW_COUNT() > 0 THEN
	set StatusValue =1
	end if
              
  
	update scUser u inner join candidateTemp ut on ut.emailId=u.emailId
	set u.userUIId= CONCAT(UUID() , '-' , u.userId)        
	where coalesce( u.userUIId,'') ='' and fileId=file_Id and recordStatus=2
     
 	-- updating user id    
	update candidateTemp  ut inner join scUser u on   ut.emailId=u.emailId
	set ut.userId =u.userId ,ut.userUIId=u.userUIId
	where fileId=file_Id
	
    
			
	insert into userRole(userId,RoleId,createdBy,createdOn,RoleCategoryId)                     
	select sut.userId,2,created_By,utc_timestamp() dt,2 
    from candidateTemp sut 
	where fileId=file_Id and recordStatus=2    
    
	IF ROW_COUNT() > 0 THEN
		set StatusValue =1
	end if
    
	insert into candidateUser ( candidateUserId
						 	,	createdBy
	 					 	,	createdOn
						 	,	isDeleted )	
	select distinct sut.userId,created_By,utc_timestamp(),0 
    from  candidateTemp sut 
    left join candidateUser cu on sut.userId = cu.candidateUserId
	where fileId=file_Id and recordStatus in (2,3) and cu.candidateUserId is null 

	IF ROW_COUNT() > 0 THEN
	set StatusValue =1
	end if
        

	insert into candidateDetail (
				candidateUserId
			,	streetAddressLine1
			,	streetAddressLine2
			,	countryId
			,	stateId
			,	cityId
			,	zipCode
			,	dob
			,	createdBy
			,	createdOn
            ,latitude,longitude
            )
			 
	select sut.userId,sut.streetAddressLine1,sut.streetAddressLine2,sut.countryId,sut.stateId,sut.cityId,sut.postCode,sut.dob,created_By,utc_timestamp() ,latitude,longitude
	from candidateTemp sut 
	where fileId=file_Id and recordStatus=2 

		IF ROW_COUNT() > 0 THEN
		set StatusValue =1
		end if

	insert into userContact (userId,mobilePhone,isDeleted) 
	select sut.userId,sut.mobileNo,0 
    from candidateTemp sut 
    where fileId=file_Id and recordStatus=2  

		IF ROW_COUNT() > 0 THEN
		set StatusValue =1
		end if

		if (roleCategory_Id = 3) then
			-- select 1
			insert into businessCandidate (businessId
										,	businessSiteId
										,	candidateUserId
										,	createdBy
										,	createdOn )
			select distinct business_Id,site_Id,userId,created_By,utc_timestamp()  
			from candidateTemp ct 
            left join businessCandidate bc on ct.userId=bc.candidateUserId  and bc.businessId=business_Id
			where fileId=file_Id and recordStatus in(2,3) and bc.candidateUserId is null  

			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
			end if

		else 
			insert into agencyCandidate (agencyId
										,	agencySiteId
										,	candidateUserId
										,	createdBy
										,	createdOn )
			select distinct business_Id,site_Id,userId,created_By,utc_timestamp()  
			from candidateTemp ct left join agencyCandidate ac on ct.userId=ac.candidateUserId  
			where fileId=file_Id and recordStatus in(2,3) and ac.candidateUserId is null 
					
			IF ROW_COUNT() > 0 THEN
			set StatusValue =1
			end if

		end if
		


		insert into hireRequestCandidate (jobProfileHireRequestId,candidateUserId,createdBy,createdOn,isDeleted,candidateHRStatus,paidStatus)
		select distinct hrf.jobProfileHireRequestId,userId,  created_By,utc_timestamp(),0,hrf.hireRequestStatus,1 from candidateTemp sut 
		inner join fileUpload f on sut.fileId=f.fileId and  f.fileId=file_Id and recordStatus in(2,3) 
		inner join hireRequestFileUpload hrf on hrf.fileId=f.fileId
		left join hireRequestCandidate hrc on sut.userId=hrc.candidateUserId and hrc.jobProfileHireRequestId=hrf.jobProfileHireRequestId and hrc.isDeleted=0
		where f.fileId=file_Id and recordStatus in(2,3) and hrc.candidateUserId is null 

		update  jobProfileHireRequest jphr inner join hireRequestFileUpload f
		on jphr.jobProfileHireRequestId=f.jobProfileHireRequestId
		set isCsvUpload=1 
		where f.fileId=file_Id 
		
			IF ROW_COUNT() > 0 THEN
				set StatusValue =1
                
                  --   update candidateTemp  set recordStatus=2 where fileId=file_Id and recordStatus=3 

                    /*					
					update  jobProfileHireRequest jphr inner join hireRequestFileUpload f
					on jphr.jobProfileHireRequestId=f.jobProfileHireRequestId
					set isCsvUpload=1 
					where f.fileId=file_Id */
                     
			end if


	select StatusValue
    
     
    
     
    
    
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `UserLogin` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `UserLogin`( 
IN Email_Id varchar(100) 
, IN U_Password varchar(1000)
 ,IN deviceType_Id smallint(6)
 ,IN device_Id varchar(200) 
 )
BEGIN 

/*
 Author: Tijo Joseph
 Date  : 06/06/2014
 Description : Login service
*/

DECLARE StatusValue bigint

 
set Email_Id = TRIM(BOTH '' FROM Email_Id)


			
					select 
				 u.userId
				,firstName
				,lastName
				,RoleCategoryId
				,emailId
				,isLoggedInOnce
                ,nationalityId
                ,isOTPGenerated
               ,  case when RoleCategoryId=4 then (
						select count(1) from userRole ucs 
						inner join userRoleAgencySite cas on cas.userRoleId = ucs.userRoleId   -- and cas.status=2
						where ucs.userId=u.userId ) else 
						(select count(1) from userRole ucs 
						inner join userRoleBusinessSite cbs on cbs.userRoleId = ucs.userRoleId   -- and cbs.status=2
						where  ucs.userId=u.userId )end as associatedSite	
               ,  case when RoleCategoryId=4 then 
						(select count(1) 
                        from userRole ucs 
						inner join userRoleAgencySite cas on cas.userRoleId = ucs.userRoleId and cas.status=2
                        inner join agencySite ast on ast.agencySiteId = cas.agencySiteId and ast.isDeleted=0
						where ucs.userId=u.userId and cas.isDeleted=0 ) 
                        else 
						(select count(1) 
                        from userRole ucs 
						inner join userRoleBusinessSite cbs on cbs.userRoleId = ucs.userRoleId and cbs.status=2
                        inner join businessSite bs on bs.businessSiteId = cbs.businessSiteId and bs.isDeleted=0
						where  ucs.userId=u.userId and cbs.isDeleted=0)end as activeSite
				, coalesce(case when exists (select 1 from businessCandidate bc where bc.candidateUserId = u.userId) then 1 else 0 end, 0) as isBusinessCandidate
                ,ud.isForceLogOut
                ,u.userType
				from scUser u
				left join userDevice ud on (u.userId = ud.userID AND ud.deviceTypeID = deviceType_Id AND ud.deviceId = device_Id
                AND ud.isDeleted = 0)
				where emailId = Email_Id and userPassword = U_Password and status =2 and u.isDeleted =0
                and case when isOTPGenerated = 1 then DATE_ADD(otpGeneratedOn,INTERVAL 1 DAY) >= utc_timestamp() else  true  end
                
	
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `ValidateUser` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `ValidateUser`( IN userUniqueId varchar(100) , IN hours int(11) )
BEGIN
/*
 Author: Tijo Joseph
 Date  : 06/06/2014
 Description : Login service
*/
DECLARE StatusValue bigint
Declare Email_Id varchar(100)

		set Email_Id= (select emailId from scUser where userUIId = userUniqueId)

		if not exists (select 1 from scUser where userUIId = userUniqueId) then
			 select 0 as IsValidated,Email_Id 
		 else if exists (select 1 from scUser where userUIId = userUniqueId and status =1 and TIMESTAMPDIFF(HOUR, createdOn, utc_timestamp() ) <= hours)then
			SET SQL_SAFE_UPDATES = 0
			update scUser set status =2 where userUIId = userUniqueId
			
			IF ROW_COUNT() > 0 THEN
			select 1 as IsValidated, Email_Id 
			end if
			SET SQL_SAFE_UPDATES = 1
		 else	
			 select 2 as IsValidated, Email_Id 
		 end if
		 end if
END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `ValidateUserEmailName` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `ValidateUserEmailName`(
 IN email_ID nvarchar(1000)
)
BEGIN

/*
Author			: Tijo
Date  			: 10-07-2014
Description		: validating email id
call ValidateUserEmailName('tijojoseph1989@yahoo.com', 'Tijo', 'Joseph')
*/

	
    select firstName, middleName ,lastName
    from scUser
    where emailId = email_ID

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!50003 DROP PROCEDURE IF EXISTS `ValidateUserUpdateEmail` */
/*!50003 SET @saved_cs_client      = @@character_set_client */ 
/*!50003 SET @saved_cs_results     = @@character_set_results */ 
/*!50003 SET @saved_col_connection = @@collation_connection */ 
/*!50003 SET character_set_client  = utf8 */ 
/*!50003 SET character_set_results = utf8 */ 
/*!50003 SET collation_connection  = utf8_general_ci */ 
/*!50003 SET @saved_sql_mode       = @@sql_mode */ 
/*!50003 SET sql_mode              = 'NO_ENGINE_SUBSTITUTION' */ 
#
CREATE PROCEDURE `ValidateUserUpdateEmail`( IN User_Id bigint(20) , IN Email_Id varchar(100) )
BEGIN

/*
Author			: Tijo
Date  			: 10-07-2014
Description		: Validate User Email
*/
		
		if exists (select 1 from scUser where UserId = User_Id and EmailId =Email_Id) then
			select 2
		else if exists (select 1 from scUser where EmailId =Email_Id) then
			select 1
		else
			select 3 
		end if 
		end if 
			

END
#
/*!50003 SET sql_mode              = @saved_sql_mode */ 
/*!50003 SET character_set_client  = @saved_cs_client */ 
/*!50003 SET character_set_results = @saved_cs_results */ 
/*!50003 SET collation_connection  = @saved_col_connection */ 
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */

-- Dump completed on 2016-06-22 12:34:15
